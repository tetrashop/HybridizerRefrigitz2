ordinary square number:
  unsigned sq;
to rotate right:
squ = (sq + (sq << 3)) & 63;

to rotate left:
squ = (sq - (sq << 3)) & 63;

Or visualized:
                     sq                    right                     left
 0  1  2  3  4  5  6  7   0 57 50 43 36 29 22 15   0  9 18 27 36 45 54 63
 8  9 10 11 12 13 14 15   8  1 58 51 44 37 30 23   8 17 26 35 44 53 62  7
16 17 18 19 20 21 22 23  16  9  2 59 52 45 38 31  16 25 34 43 52 61  6 15
24 25 26 27 28 29 30 31  24 17 10  3 60 53 46 39  24 33 42 51 60  5 14 23
32 33 34 35 36 37 38 39  32 25 18 11  4 61 54 47  32 41 50 59  4 13 22 31
40 41 42 43 44 45 46 47  40 33 26 19 12  5 62 55  40 49 58  3 12 21 30 39
48 49 50 51 52 53 54 55  48 41 34 27 20 13  6 63  48 57  2 11 20 29 38 47
56 57 58 59 60 61 62 63  56 49 42 35 28 21 14  7  56  1 10 19 28 37 46 55

56 57 58 59 60 61 62 63  56 49 42 35 28 21 14  7  56  1 10 19 28 37 46 55
48 49 50 51 52 53 54 55  48 41 34 27 20 13  6 63  48 57  2 11 20 29 38 47
40 41 42 43 44 45 46 47  40 33 26 19 12  5 62 55  40 49 58  3 12 21 30 39
32 33 34 35 36 37 38 39  32 25 18 11  4 61 54 47  32 41 50 59  4 13 22 31
24 25 26 27 28 29 30 31  24 17 10  3 60 53 46 39  24 33 42 51 60  5 14 23
16 17 18 19 20 21 22 23  16  9  2 59 52 45 38 31  16 25 34 43 52 61  6 15
 8  9 10 11 12 13 14 15   8  1 58 51 44 37 30 23   8 17 26 35 44 53 62  7
 0  1  2  3  4  5  6  7   0 57 50 43 36 29 22 15   0  9 18 27 36 45 54 63
 
 
 
a8 b8 c8 d8 e8 f8 g8 h8  a8 b7 c6 d5 e4 f3 g2 h1  a8 b1 c2 d3 e4 f5 g6 h7
a7 b7 c7 d7 e7 f7 g7 h7  a7 b6 c5 d4 e3 f2 g1 h8  a7 b8 c1 d2 e3 f4 g5 h6
a6 b6 c6 d6 e6 f6 g6 h6  a6 b5 c4 d3 e2 f1 g8 h7  a6 b7 c8 d1 e2 f3 g4 h5
a5 b5 c5 d5 e5 f5 g5 h5  a5 b4 c3 d2 e1 f8 g7 h6  a5 b6 c7 d8 e1 f2 g3 h4
a4 b4 c4 d4 e4 f4 g4 h4  a4 b3 c2 d1 e8 f7 g6 h5  a4 b5 c6 d7 e8 f1 g2 h3
a3 b3 c3 d3 e3 f3 g3 h3  a3 b2 c1 d8 e7 f6 g5 h4  a3 b4 c5 d6 e7 f8 g1 h2
a2 b2 c2 d2 e2 f2 g2 h2  a2 b1 c8 d7 e6 f5 g4 h3  a2 b3 c4 d5 e6 f7 g8 h1
a1 b1 c1 d1 e1 f1 g1 h1  a1 b8 c7 d6 e5 f4 g3 h2  a1 b2 c3 d4 e5 f6 g7 h8

right90                        all        w          b

a1 a2 a3 a4 a5 a6 a7 a8      11000011   11000000   00000011
b1 b2 b3 b4 b5 b6 b7 b8	     11000011   11000000   00000011
c1 c2 c3 c4 c5 c6 c7 c8	     11000011   11000000   00000011
d1 d2 d3 d4 d5 d6 d7 d8	     11000011   11000000   00000011
e1 e2 e3 e4 e5 e6 e7 e8	     11000011   11000000   00000011
f1 f2 f3 f4 f5 f6 f7 f8	     11000011   11000000   00000011
g1 g2 g3 g4 g5 g6 g7 g8	     11000011   11000000   00000011
h1 h2 h3 h4 h5 h6 h7 h8	     11000011   11000000   00000011

0xC3C3C3C3C3C3C3C3
0xC0C0C0C0C0C0C0C0
0x0303030303030303

                               all        w          b
r45
a8 b7 c6 d5 e4 f3 g2 h1      11000011   00000011   11000000
a7 b6 c5 d4 e3 f2 g1 h8      10000111   00000110   10000001
a6 b5 c4 d3 e2 f1 g8 h7      00001111   00001100   00000011
a5 b4 c3 d2 e1 f8 g7 h6      00011110   00011000   00000110
a4 b3 c2 d1 e8 f7 g6 h5      00111100   00110000   00001100
a3 b2 c1 d8 e7 f6 g5 h4      01111000   01100000   00011000
a2 b1 c8 d7 e6 f5 g4 h3      11110000   11000000   00110000
a1 b8 c7 d6 e5 f4 g3 h2      11100001   10000001   01100000

0xC3870F1D3C78F0D1
0x03060C183060C081
0xC08103060C183060

a8-h1 11111111       00000000
a7-g1 11111110 h8    00000001
a6-f1 11111100 g8-h7 00000011
a5-e1 11111000 f8-h6 00000111
a4-d1 11110000 e8-h5 00001111
a3-c1 11100000 d8-h4 00011111
a2-b1 11000000 c8-h3 00111111
a1    10000000 b8-h2 01111111

 8 7 6 5 4 3 2 1 
 7 8 7 6 5 4 3 2
 6 7 8 7 6 5 4 3
 5 6 7 8 7 6 5 4
 4 5 6 7 8 7 6 5
 3 4 5 6 7 8 7 6
 2 3 4 5 6 7 8 7
 1 2 3 4 5 6 7 8


8 8 8 8 8 8 8 8      0 0 0 0 0 0 0 0
7 7 7 7 7 7 7 0      0 0 0 0 0 0 0 1
6 6 6 6 6 6 0 0      0 0 0 0 0 0 2 2
5 5 5 5 5 0 0 0      0 0 0 0 0 3 3 3
4 4 4 4 0 0 0 0      0 0 0 0 4 4 4 4
3 3 3 0 0 0 0 0      0 0 0 5 5 5 5 5
2 2 0 0 0 0 0 0      0 0 6 6 6 6 6 6
1 0 0 0 0 0 0 0      0 7 7 7 7 7 7 7

                               all        w          b
l45
a8 b1 c2 d3 e4 f5 g6 h7      11100001   01100000   10000001
a7 b8 c1 d2 e3 f4 g5 h6      11110000   00110000   11000000
a6 b7 c8 d1 e2 f3 g4 h5      01111000   00011000   01100000
a5 b6 c7 d8 e1 f2 g3 h4      00111100   00001100   00110000
a4 b5 c6 d7 e8 f1 g2 h3      00011110   00000110   00011000
a3 b4 c5 d6 e7 f8 g1 h2      00001111   00000011   00001100
a2 b3 c4 d5 e6 f7 g8 h1      10000111   10000001   00000110
a1 b2 c3 d4 e5 f6 g7 h8      11000011   11000000   00000011

0xE1F0783D1E0F87C3
0x6030180C060381C0
0x81C06030180C0603

a8    10000000 b1-h7 01111111
a7-b8 11000000 c1-h6 00111111
a6-c8 11100000 d1-h5 00011111
a5-d8 11110000 e1-h4 00001111
a4-e8 11111000 f1-h3 00000111
a3-f8 11111100 g1-h2 00000011
a2-g8 11111110 h1    00000001
a1-h8 11111111       00000000


 1 2 3 4 5 6 7 8
 2 3 4 5 6 7 8 7
 3 4 5 6 7 8 7 6
 4 5 6 7 8 7 6 5
 5 6 7 8 7 6 5 4
 6 7 8 7 6 5 4 3
 7 8 7 6 5 4 3 2
 8 7 6 5 4 3 2 1 



1 0 0 0 0 0 0 0      0 7 7 7 7 7 7 7
2 2 0 0 0 0 0 0      0 0 6 6 6 6 6 6
3 3 3 0 0 0 0 0      0 0 0 5 5 5 5 5
4 4 4 4 0 0 0 0      0 0 0 0 4 4 4 4
5 5 5 5 5 0 0 0      0 0 0 0 0 3 3 3
6 6 6 6 6 6 0 0      0 0 0 0 0 0 2 2
7 7 7 7 7 7 7 0      0 0 0 0 0 0 0 1
8 8 8 8 8 8 8 8      0 0 0 0 0 0 0 0


    public static int [] diagonal_length = 
    {
      1,
      2,  2,
      3,  3,  3,
      4,  4,  4,  4,
      5,  5,  5,  5,  5,
      6,  6,  6,  6,  6,  6,
      7,  7,  7,  7,  7,  7,  7,
      8,  8,  8,  8,  8,  8,  8,  8,
      7,  7,  7,  7,  7,  7,  7,
      6,  6,  6,  6,  6,  6,
      5,  5,  5,  5,  5,
      4,  4,  4,  4,
      3,  3,  3,
      2,  2,
      1 
    };





                          right90 
                          i%8*8 + i/8 
                          = ((i & 8) <<< 3) + (i >>> 3) 

56 57 58 59 60 61 62 63    7 15 23 31 39 47 51 63 
48 49 50 51 52 53 54 55    6 14 22 30 38 46 50 62 
40 41 42 43 44 45 46 47    5 13 21 29 37 45 51 61 
32 33 34 35 36 37 38 39    4 12 20 28 36 44 52 60 
24 25 26 27 28 29 30 31    3 11 19 27 35 43 51 59 
16 17 18 19 20 21 22 23    2 10 18 26 34 42 50 58 
 8  9 10 11 12 13 14 15    1  9 17 25 33 41 49 57 
 0  1  2  3  4  5  6  7    0  8 16 24 32 40 48 56 


                          left90 
                          i%8*8 + (7 - i/8) 
                          = ((i & 8) <<< 3) + (i >>> 3) ^ 7 

56 57 58 59 60 61 62 63    63 55 47 39 31 23 15  7 
48 49 50 51 52 53 54 55    62 54 46 38 30 22 14  6 
40 41 42 43 44 45 46 47    61 53 45 37 29 21 13  5 
32 33 34 35 36 37 38 39    60 52 44 36 28 20 12  4 
24 25 26 27 28 29 30 31    59 51 43 35 27 19 11  3 
16 17 18 19 20 21 22 23    58 50 42 34 26 18 10  2 
 8  9 10 11 12 13 14 15    57 49 41 33 25 17  9  1
 0  1  2  3  4  5  6  7    56 48 40 32 24 16  8  0 


                          right45 
                          (i + i%8*8) % 64 
                          = (i + (i-i/8*8)*8) % 64 
                          = (i + i*8 - i/8*8*8) % 64 
                          = (i + i*8 - i/8*64) % 64 
                          = (i + i*8) % 64 
                          = (i + (i << 3)) & 63 

56 57 58 59 60 61 62 63    56 49 42 35 28 21 14  7 
48 49 50 51 52 53 54 55    48 41 34 27 20 13  6 63 
40 41 42 43 44 45 46 47    40 33 26 19 12  5 62 55 
32 33 34 35 36 37 38 39    32 25 18 11  4 61 54 47 
24 25 26 27 28 29 30 31    24 17 10  3 60 53 46 39 
16 17 18 19 20 21 22 23    16  9  2 59 52 45 38 31 
 8 9 10 11 12 13 14 15      8  1 58 51 44 37 30 23 
 0 1  2  3  4  5  6  7      0 57 50 43 36 29 22 15 


                          left45 
                          (i - i%8*8) % 64 
                          = (i - (i << 3)) & 63 

56 57 58 59 60 61 62 63    56  1 10 19 28 37 46 55 
48 49 50 51 52 53 54 55    48 57  2 11 20 29 38 47 
40 41 42 43 44 45 46 47    40 49 58  3 12 21 30 39 
32 33 34 35 36 37 38 39    32 41 50 59  4 13 22 31 
24 25 26 27 28 29 30 31    24 33 42 51 60  5 14 23 
16 17 18 19 20 21 22 23    16 25 34 43 52 61  6 15 
 8  9 10 11 12 13 14 15     8 17 26 35 44 53 62  7 
 0  1  2  3  4  5  6  7     0  9 18 27 36 45 54 63 


0x8000000000000000 = 9223372036854775808
0x0080000000000000 = 36028797018963968
0x0000800000000000 = 140737488355328
0x0000008000000000 = 549755813888
0x0000000080000000 = 2147483648
0x0000000000800000 = 8388608
0x0000000000008000 = 32768 = 128 * 256
0x0000000000000080 = 128


0x0100000000000000 = 72057594037927936
0x0001000000000000 = 281474976710656
0x0000010000000000 = 1099511627776
0x0000000100000000 = 4294967296
0x0000000001000000 = 16777216
0x0000000000010000 = 65536
0x0000000000000100 = 256
0x0000000000000001 = 1

// Saved as looks at rotated boards.
    /// <summary>
    /// Determines what squares a sliding piece may successfully move to, this
    /// would include the capture of an enemy piece.
    /// </summary>
    /// <param name="piece">single bit of piece loation in row or column</param>
    /// <param name="attacker">the bits of all pieces in row or column of the side to move</param>
    /// <param name="defender">the bits of all pieces in row or column of the side not to move</param>
    /// <returns></returns>
    ushort getSlidingMoves(ushort piece, ushort attacker, ushort defender)
    {
      ushort pBit    = 0x08;
      ushort moveBucket = 0x00;

      pBit = piece;
      while( pBit != 0 )
      {
        pBit = (ushort)(pBit >> 1);
        if( (int)(pBit & attacker) == 0 )
        {
          if( (int)(pBit & defender) != 0 )
          {
            moveBucket = (ushort)( moveBucket | pBit );
            break;
          }
          else
            moveBucket = (ushort)( moveBucket | pBit );
        }
        else
          break;
      }
      pBit = piece;
      while( pBit < 128 )
      {
        pBit = (ushort)(pBit << 1);
        if( (int)(pBit & attacker) == 0 )
        {
          if( (int)(pBit & defender) != 0 )
          {
            moveBucket = (ushort)( moveBucket | pBit );
            break;
          }
          else
            moveBucket = (ushort)( moveBucket | pBit );
        }
        else
          break;
      }
      return moveBucket;
    }

