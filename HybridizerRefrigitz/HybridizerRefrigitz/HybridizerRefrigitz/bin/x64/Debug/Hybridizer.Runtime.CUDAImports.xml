<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Hybridizer.Runtime.CUDAImports</name>
    </assembly>
    <members>
        <member name="T:Hybridizer.Runtime.CUDAImports.AlignedAllocation">
            <summary>
            Aligned memory allocation helper
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.AlignedAllocation.Aligned">
            <summary>
            The aligned pointer
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.AlignedAllocation.AllocatedSize">
            <summary>
            Total allocated size
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.AlignedAllocation.Alloc(System.Int64,System.Int32)">
            <summary>
            Allocates aligned memory
            </summary>
            <param name="size">Amount of bytes to allocate</param>
            <param name="alignment">Alignement</param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.AlignedAllocation.Free">
            <summary>
            Releases allocated memory
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.Coalesced`1">
            <summary>
            internal
            </summary>
            <typeparam name="T">Usually an int</typeparam>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.alignedindex">
            <summary>
            An index, aligned to 32 -- also representing the next 32 indices
            <example>
            0, 1, 2, ... 31
            64, 65, 66, ... 95
            </example>
            Allows memory load/store optimization
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.alignedindex.Inner">
            <summary>
            the underlying int
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.alignedindex.VectorUnitID">
            <summary></summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.alignedindex.VectorUnitSize">
            <summary></summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.alignedindex.op_Addition(Hybridizer.Runtime.CUDAImports.alignedindex,System.Int32)">
            <summary>
            addition operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.alignedindex.op_LessThan(Hybridizer.Runtime.CUDAImports.alignedindex,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.alignedindex.op_LessThanOrEqual(Hybridizer.Runtime.CUDAImports.alignedindex,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.alignedindex.op_LessThan(Hybridizer.Runtime.CUDAImports.alignedindex,Hybridizer.Runtime.CUDAImports.alignedindex)">
            <summary></summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.alignedindex.op_LessThanOrEqual(Hybridizer.Runtime.CUDAImports.alignedindex,Hybridizer.Runtime.CUDAImports.alignedindex)">
            <summary></summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.alignedindex.op_GreaterThan(Hybridizer.Runtime.CUDAImports.alignedindex,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.alignedindex.op_GreaterThanOrEqual(Hybridizer.Runtime.CUDAImports.alignedindex,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.alignedindex.op_GreaterThan(Hybridizer.Runtime.CUDAImports.alignedindex,Hybridizer.Runtime.CUDAImports.alignedindex)">
            <summary></summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.alignedindex.op_GreaterThanOrEqual(Hybridizer.Runtime.CUDAImports.alignedindex,Hybridizer.Runtime.CUDAImports.alignedindex)">
            <summary></summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.alignedindex.op_Implicit(System.Int32)~Hybridizer.Runtime.CUDAImports.alignedindex">
            <summary>
            conversion to int32
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.alignedindex.op_Implicit(Hybridizer.Runtime.CUDAImports.alignedindex)~System.Int32">
            <summary>
            conversion to an int32
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.alignedstorage_double">
            <summary>
            A <see cref="T:Hybridizer.Runtime.CUDAImports.DoubleResidentArray"/> with an underlying pointer aligned to 32
            Allows memory load/store optimization
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.alignedstorage_double.HostPointer">
            <summary>
            Host Pointer
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.alignedstorage_double.Size">
            <summary>
            Size in bytes
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.alignedstorage_double.Item(Hybridizer.Runtime.CUDAImports.alignedindex)">
            <summary>
             indexer with aligned index
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.alignedstorage_double.Item(System.Int32)">
            <summary>
            indexer with raw int--should not be used
            </summary>
            <param name="idx"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.alignedstorage_double.#ctor(System.Int32,System.Object)">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.alignedstorage_double.destroy">
            <summary>
            release memory
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.alignedstorage_double.CopyFrom(Hybridizer.Runtime.CUDAImports.alignedstorage_double,System.Int32)">
            <summary>
            Copy memory from src
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.alignedstorage_double.MarshalTo(System.IO.BinaryWriter,Hybridizer.Runtime.CUDAImports.HybridizerFlavor)">
            <summary>
            Marshals to native memory
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.alignedstorage_double.UnmarshalFrom(System.IO.BinaryReader,Hybridizer.Runtime.CUDAImports.HybridizerFlavor)">
            <summary>
            Unmarshals from native memory
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.alignedstorage_double.ToString">
            <summary>
            A string representation
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.alignedstorage_double_zerocopy">
            <summary>
            A <see cref="T:Hybridizer.Runtime.CUDAImports.alignedstorage_double"/> using <see href="https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#zero-copy">zero-copy</see>
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.alignedstorage_double_zerocopy.HostPointer">
            <summary>
            Host Pointer
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.alignedstorage_double_zerocopy.Size">
            <summary>
            Size in bytes
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.alignedstorage_double_zerocopy.Item(Hybridizer.Runtime.CUDAImports.alignedindex)">
            <summary>
            indexer using <see cref="T:Hybridizer.Runtime.CUDAImports.alignedindex"/>
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.alignedstorage_double_zerocopy.Item(System.Int32)">
            <summary>
            indexer using raw int -- should not be used
            </summary>
            <param name="idx"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.alignedstorage_double_zerocopy.#ctor(System.Int32,System.Object)">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.alignedstorage_double_zerocopy.destroy">
            <summary>
            releases memory
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.alignedstorage_double_zerocopy.CopyFrom(Hybridizer.Runtime.CUDAImports.alignedstorage_double,System.Int32)">
            <summary>
            copies memory from src
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.alignedstorage_double_zerocopy.MarshalTo(System.IO.BinaryWriter,Hybridizer.Runtime.CUDAImports.HybridizerFlavor)">
            <summary>
            Marshals to Native
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.alignedstorage_double_zerocopy.UnmarshalFrom(System.IO.BinaryReader,Hybridizer.Runtime.CUDAImports.HybridizerFlavor)">
            <summary>
            Unmarshals from
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.alignedstorage_double_zerocopy.ToString">
            <summary>
            A string representation
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.alignedstorage_int">
            <summary>
            A <see cref="T:Hybridizer.Runtime.CUDAImports.IntResidentArray"/> with memory aligned to 32
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.alignedstorage_int.HostPointer">
            <summary>
            Host Pointer
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.alignedstorage_int.Size">
            <summary>
            Size in bytes
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.alignedstorage_int.Item(Hybridizer.Runtime.CUDAImports.alignedindex)">
            <summary>
            indexer using aligned index
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.alignedstorage_int.Item(System.Int32)">
            <summary>
            indexer using raw int -- should not be used
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.alignedstorage_int.#ctor(System.Int32)">
            <summary>
            constructor
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.alignedstorage_int.destroy">
            <summary>
            releases memory
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.alignedstorage_int.CopyFrom(Hybridizer.Runtime.CUDAImports.alignedstorage_int,System.Int32)">
            <summary>
            copy memory from src
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.alignedstorage_int.MarshalTo(System.IO.BinaryWriter,Hybridizer.Runtime.CUDAImports.HybridizerFlavor)">
            <summary>
            Marshal to native
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.alignedstorage_int.UnmarshalFrom(System.IO.BinaryReader,Hybridizer.Runtime.CUDAImports.HybridizerFlavor)">
            <summary>
            Unmarshal from native
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.alignedstorage_int.ToString">
            <summary>
            A string representation
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.alignedstorage_float">
            <summary>
            A <see cref="T:Hybridizer.Runtime.CUDAImports.FloatResidentArray"/> with underlying memory aligned to 32
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.alignedstorage_float.HostPointer">
            <summary>
            Host Pointer
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.alignedstorage_float.Size">
            <summary>
            Size in bytes
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.alignedstorage_float.Item(Hybridizer.Runtime.CUDAImports.alignedindex)">
            <summary>
            indexer using alignedindex
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.alignedstorage_float.Item(System.Int32)">
            <summary>
            index using raw int -- should not be used
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.alignedstorage_float.#ctor(System.Int32)">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.alignedstorage_float.destroy">
            <summary>
            releases memory
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.alignedstorage_float.CopyFrom(Hybridizer.Runtime.CUDAImports.alignedstorage_float,System.Int32)">
            <summary>
            copy memory from src
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.alignedstorage_float.MarshalTo(System.IO.BinaryWriter,Hybridizer.Runtime.CUDAImports.HybridizerFlavor)">
            <summary>
             marshals to native
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.alignedstorage_float.UnmarshalFrom(System.IO.BinaryReader,Hybridizer.Runtime.CUDAImports.HybridizerFlavor)">
            <summary>
            unmarshals from native
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.alignedstorage_float.ToString">
            <summary>
            A string representation
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cooperative_groups">
            <summary>
            global functions from cooperative_groups.h header
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cooperative_groups.this_thread">
            <summary>
            Constructs a generic thread_group containing only the calling thread
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cooperative_groups.this_thread_block">
            <summary>
            Constructs a thread_block group
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cooperative_groups.this_grid">
            <summary>
            Constructs a grid_group
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cooperative_groups.coalesced_threads">
            <summary>
            
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cooperative_groups.sync(Hybridizer.Runtime.CUDAImports.thread_block)">
            <summary>
            syncs a thread block
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cooperative_groups.sync(Hybridizer.Runtime.CUDAImports.thread_group)">
            <summary>
            syncs a thread group
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cooperative_groups.sync(Hybridizer.Runtime.CUDAImports.grid_group)">
            <summary>
            syncs current grid
            requires cuLaunchCooperativeKernel
            </summary>
            <param name="tb"></param>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cooperative_groups.sync(Hybridizer.Runtime.CUDAImports.thread_block_tile_1)">
            <summary>
            syncs a tiled partition
            </summary>
            <param name="tb"></param>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cooperative_groups.sync(Hybridizer.Runtime.CUDAImports.thread_block_tile_2)">
            <summary>
            syncs a tiled partition
            </summary>
            <param name="tb"></param>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cooperative_groups.sync(Hybridizer.Runtime.CUDAImports.thread_block_tile_4)">
            <summary>
            syncs a tiled partition
            </summary>
            <param name="tb"></param>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cooperative_groups.sync(Hybridizer.Runtime.CUDAImports.thread_block_tile_8)">
            <summary>
            syncs a tiled partition
            </summary>
            <param name="tb"></param>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cooperative_groups.sync(Hybridizer.Runtime.CUDAImports.thread_block_tile_16)">
            <summary>
            syncs a tiled partition
            </summary>
            <param name="tb"></param>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cooperative_groups.sync(Hybridizer.Runtime.CUDAImports.thread_block_tile_32)">
            <summary>
            syncs a tiled partition
            </summary>
            <param name="tb"></param>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cooperative_groups.tiled_partition(Hybridizer.Runtime.CUDAImports.thread_group,System.UInt32)">
            <summary>
            The tiled_partition(parent, tilesz) method is a collective operation that
            partitions the parent group into a one-dimensional, row-major, tiling of subgroups.
            
            A total of ((size(parent)+tilesz-1)/tilesz) subgroups will
            be created where threads having identical k = (thread_rank(parent)/tilesz)
            will be members of the same subgroup.
            
            The implementation may cause the calling thread to wait until all the members
            of the parent group have invoked the operation before resuming execution.
            
            Functionality is limited to power-of-two sized subgorup instances of at most
            32 threads. Only thread_block, thread_block_tile&lt;&gt;, and their subgroups can be
            tiled_partition() in _CG_VERSION 1000.
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cooperative_groups.tiled_partition(Hybridizer.Runtime.CUDAImports.thread_block,System.UInt32)">
            <summary>
            Thread block type overload: returns a basic thread_group for now (may be specialized later)
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cooperative_groups.tiled_partition(Hybridizer.Runtime.CUDAImports.coalesced_group,System.UInt32)">
            <summary>
            Coalesced group type overload: retains its ability to stay coalesced
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cooperative_groups.tile_partition_32(Hybridizer.Runtime.CUDAImports.thread_block)">
            <summary>
             The tiled_partition&lt;tilesz&gt;(parent) method is a collective operation that
             partitions the parent group into a one-dimensional, row-major, tiling of subgroups.
            
             A total of ((size(parent)/tilesz) subgroups will be created,
             therefore the parent group size must be evenly divisible by the tilesz.
             The allow parent groups are thread_block or thread_block_tile&lt;size&gt;.
            
             The implementation may cause the calling thread to wait until all the members
             of the parent group have invoked the operation before resuming execution.
            
             Functionality is limited to native hardware sizes, 1/2/4/8/16/32.
             The size(parent) must be greater than the template Size parameter
             otherwise the results are undefined.
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cooperative_groups.tile_partition_16(Hybridizer.Runtime.CUDAImports.thread_block)">
            <summary>
             The tiled_partition&lt;tilesz&gt;(parent) method is a collective operation that
             partitions the parent group into a one-dimensional, row-major, tiling of subgroups.
            
             A total of ((size(parent)/tilesz) subgroups will be created,
             therefore the parent group size must be evenly divisible by the tilesz.
             The allow parent groups are thread_block or thread_block_tile&lt;size&gt;.
            
             The implementation may cause the calling thread to wait until all the members
             of the parent group have invoked the operation before resuming execution.
            
             Functionality is limited to native hardware sizes, 1/2/4/8/16/32.
             The size(parent) must be greater than the template Size parameter
             otherwise the results are undefined.
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cooperative_groups.tile_partition_8(Hybridizer.Runtime.CUDAImports.thread_block)">
            <summary>
             The tiled_partition&lt;tilesz&gt;(parent) method is a collective operation that
             partitions the parent group into a one-dimensional, row-major, tiling of subgroups.
            
             A total of ((size(parent)/tilesz) subgroups will be created,
             therefore the parent group size must be evenly divisible by the tilesz.
             The allow parent groups are thread_block or thread_block_tile&lt;size&gt;.
            
             The implementation may cause the calling thread to wait until all the members
             of the parent group have invoked the operation before resuming execution.
            
             Functionality is limited to native hardware sizes, 1/2/4/8/16/32.
             The size(parent) must be greater than the template Size parameter
             otherwise the results are undefined.
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cooperative_groups.tile_partition_4(Hybridizer.Runtime.CUDAImports.thread_block)">
            <summary>
             The tiled_partition&lt;tilesz&gt;(parent) method is a collective operation that
             partitions the parent group into a one-dimensional, row-major, tiling of subgroups.
            
             A total of ((size(parent)/tilesz) subgroups will be created,
             therefore the parent group size must be evenly divisible by the tilesz.
             The allow parent groups are thread_block or thread_block_tile&lt;size&gt;.
            
             The implementation may cause the calling thread to wait until all the members
             of the parent group have invoked the operation before resuming execution.
            
             Functionality is limited to native hardware sizes, 1/2/4/8/16/32.
             The size(parent) must be greater than the template Size parameter
             otherwise the results are undefined.
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cooperative_groups.tile_partition_2(Hybridizer.Runtime.CUDAImports.thread_block)">
            <summary>
             The tiled_partition&lt;tilesz&gt;(parent) method is a collective operation that
             partitions the parent group into a one-dimensional, row-major, tiling of subgroups.
            
             A total of ((size(parent)/tilesz) subgroups will be created,
             therefore the parent group size must be evenly divisible by the tilesz.
             The allow parent groups are thread_block or thread_block_tile&lt;size&gt;.
            
             The implementation may cause the calling thread to wait until all the members
             of the parent group have invoked the operation before resuming execution.
            
             Functionality is limited to native hardware sizes, 1/2/4/8/16/32.
             The size(parent) must be greater than the template Size parameter
             otherwise the results are undefined.
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cooperative_groups.tile_partition_1(Hybridizer.Runtime.CUDAImports.thread_block)">
            <summary>
             The tiled_partition&lt;tilesz&gt;(parent) method is a collective operation that
             partitions the parent group into a one-dimensional, row-major, tiling of subgroups.
            
             A total of ((size(parent)/tilesz) subgroups will be created,
             therefore the parent group size must be evenly divisible by the tilesz.
             The allow parent groups are thread_block or thread_block_tile&lt;size&gt;.
            
             The implementation may cause the calling thread to wait until all the members
             of the parent group have invoked the operation before resuming execution.
            
             Functionality is limited to native hardware sizes, 1/2/4/8/16/32.
             The size(parent) must be greater than the template Size parameter
             otherwise the results are undefined.
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.thread_group">
            <summary>
            A handle to a group of threads. The handle is only accessible to members of the group it represents.
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_group.thread_rank">
            <summary>
            Thread index within the group
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_group.sync">
            <summary>
            synchronize threads within the group
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_group.size">
            <summary>
            Get the size (total number of threads) of a group
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.thread_block">
            <summary>
            Every GPU kernel is executed by a grid of thread blocks, and threads within
            each block are guaranteed to reside on the same streaming multiprocessor.
            A thread_block represents a thread block whose dimensions are not known until runtime.
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block.thread_rank">
            <summary>
            Thread index within the group
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block.sync">
            <summary>
            synchronize threads within the group
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block.size">
            <summary>
            Get the size (total number of threads) of a group
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block.group_index">
            <summary>
            equivalent of blockIdx
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block.thread_index">
            <summary>
            equivalent of threadIdx
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block.group_dim">
            <summary>
            equivalent of blockDim
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.coalesced_group">
            <summary>
            A group representing the current set of converged threads in a warp.
            The size of the group is not guaranteed and it may return a group of
            only one thread (itself).
            This group exposes warp-synchronous builtins.
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.coalesced_group.thread_rank">
            <summary>
            Thread index within the group
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.coalesced_group.sync">
            <summary>
            synchronize threads within the group
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.coalesced_group.size">
            <summary>
            Get the size (total number of threads) of a group
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.coalesced_group.shfl(System.Int32,System.UInt32)">
            <summary>
            Direct copy from indexed lane
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.coalesced_group.shfl(System.UInt32,System.UInt32)">
            <summary>
            Direct copy from indexed lane
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.coalesced_group.shfl(System.Int64,System.UInt32)">
            <summary>
            Direct copy from indexed lane
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.coalesced_group.shfl(System.UInt64,System.UInt32)">
            <summary>
            Direct copy from indexed lane
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.coalesced_group.shfl(System.Single,System.UInt32)">
            <summary>
            Direct copy from indexed lane
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.coalesced_group.shfl(System.Double,System.UInt32)">
            <summary>
            Direct copy from indexed lane
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.coalesced_group.shfl_up(System.Int32,System.Int32)">
            <summary>
            Copy from a lane with lower ID relative to caller
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.coalesced_group.shfl_up(System.UInt32,System.Int32)">
            <summary>
            Copy from a lane with lower ID relative to caller
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.coalesced_group.shfl_up(System.Int64,System.Int32)">
            <summary>
            Copy from a lane with lower ID relative to caller
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.coalesced_group.shfl_up(System.UInt64,System.Int32)">
            <summary>
            Copy from a lane with lower ID relative to caller
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.coalesced_group.shfl_up(System.Single,System.Int32)">
            <summary>
            Copy from a lane with lower ID relative to caller
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.coalesced_group.shfl_up(System.Double,System.Int32)">
            <summary>
            Copy from a lane with lower ID relative to caller
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.coalesced_group.shfl_down(System.Int32,System.Int32)">
            <summary>
            Copy from a lane with higher ID relative to caller
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.coalesced_group.shfl_down(System.UInt32,System.Int32)">
            <summary>
            Copy from a lane with higher ID relative to caller
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.coalesced_group.shfl_down(System.Int64,System.Int32)">
            <summary>
            Copy from a lane with higher ID relative to caller
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.coalesced_group.shfl_down(System.UInt64,System.Int32)">
            <summary>
            Copy from a lane with higher ID relative to caller
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.coalesced_group.shfl_down(System.Single,System.Int32)">
            <summary>
            Copy from a lane with higher ID relative to caller
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.coalesced_group.shfl_down(System.Double,System.Int32)">
            <summary>
            Copy from a lane with higher ID relative to caller
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.coalesced_group.any(System.Int32)">
            <summary>
            Evaluate predicate for all non-exited threads and return non-zero if and only if predicate evaluates to non-zero for any of them. 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.coalesced_group.all(System.Int32)">
            <summary>
            Evaluate predicate for all non-exited threads and return non-zero if and only if predicate evaluates to non-zero for any of them. 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.coalesced_group.ballot(System.Int32)">
            <summary>
            Evaluate predicate for all non-exited threads and return an integer whose Nth bit is set if and only if predicate evaluates to non-zero for the Nth thread of the warp and the Nth thread is active. 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.grid_group.thread_rank">
            <summary>
            Thread index within the group
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.grid_group.sync">
            <summary>
            synchronize threads within the group
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.grid_group.size">
            <summary>
            Get the size (total number of threads) of a group
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_32.thread_rank">
            <summary>
            Thread index within the group
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_32.sync">
            <summary>
            synchronize threads within the group
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_32.size">
            <summary>
            Get the size (total number of threads) of a group
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_32.shfl(System.Int32,System.UInt32)">
            <summary>
            Direct copy from indexed lane
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_32.shfl(System.UInt32,System.UInt32)">
            <summary>
            Direct copy from indexed lane
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_32.shfl(System.Int64,System.UInt32)">
            <summary>
            Direct copy from indexed lane
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_32.shfl(System.UInt64,System.UInt32)">
            <summary>
            Direct copy from indexed lane
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_32.shfl(System.Single,System.UInt32)">
            <summary>
            Direct copy from indexed lane
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_32.shfl(System.Double,System.UInt32)">
            <summary>
            Direct copy from indexed lane
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_32.shfl_up(System.Int32,System.Int32)">
            <summary>
            Copy from a lane with lower ID relative to caller
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_32.shfl_up(System.UInt32,System.Int32)">
            <summary>
            Copy from a lane with lower ID relative to caller
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_32.shfl_up(System.Int64,System.Int32)">
            <summary>
            Copy from a lane with lower ID relative to caller
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_32.shfl_up(System.UInt64,System.Int32)">
            <summary>
            Copy from a lane with lower ID relative to caller
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_32.shfl_up(System.Single,System.Int32)">
            <summary>
            Copy from a lane with lower ID relative to caller
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_32.shfl_up(System.Double,System.Int32)">
            <summary>
            Copy from a lane with lower ID relative to caller
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_32.shfl_down(System.Int32,System.Int32)">
            <summary>
            Copy from a lane with higher ID relative to caller
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_32.shfl_down(System.UInt32,System.Int32)">
            <summary>
            Copy from a lane with higher ID relative to caller
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_32.shfl_down(System.Int64,System.Int32)">
            <summary>
            Copy from a lane with higher ID relative to caller
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_32.shfl_down(System.UInt64,System.Int32)">
            <summary>
            Copy from a lane with higher ID relative to caller
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_32.shfl_down(System.Single,System.Int32)">
            <summary>
            Copy from a lane with higher ID relative to caller
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_32.shfl_down(System.Double,System.Int32)">
            <summary>
            Copy from a lane with higher ID relative to caller
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_32.any(System.Int32)">
            <summary>
            Evaluate predicate for all non-exited threads and return non-zero if and only if predicate evaluates to non-zero for any of them. 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_32.all(System.Int32)">
            <summary>
            Evaluate predicate for all non-exited threads and return non-zero if and only if predicate evaluates to non-zero for any of them. 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_32.ballot(System.Int32)">
            <summary>
            Evaluate predicate for all non-exited threads and return an integer whose Nth bit is set if and only if predicate evaluates to non-zero for the Nth thread of the warp and the Nth thread is active. 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_32.shfl_xor(System.Int32,System.UInt32)">
            <summary>
            Copy from a lane based on bitwise XOR of own lane ID
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_32.shfl_xor(System.UInt32,System.UInt32)">
            <summary>
            Copy from a lane based on bitwise XOR of own lane ID
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_32.shfl_xor(System.Int64,System.UInt32)">
            <summary>
            Copy from a lane based on bitwise XOR of own lane ID
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_32.shfl_xor(System.UInt64,System.UInt32)">
             <summary>
            Copy from a lane based on bitwise XOR of own lane ID
             </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_32.shfl_xor(System.Single,System.UInt32)">
            <summary>
            Copy from a lane based on bitwise XOR of own lane ID
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_32.shfl_xor(System.Double,System.UInt32)">
            <summary>
            Copy from a lane based on bitwise XOR of own lane ID
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_16.thread_rank">
            <summary>
            Thread index within the group
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_16.sync">
            <summary>
            synchronize threads within the group
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_16.size">
            <summary>
            Get the size (total number of threads) of a group
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_16.shfl(System.Int32,System.UInt32)">
            <summary>
            Direct copy from indexed lane
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_16.shfl(System.UInt32,System.UInt32)">
            <summary>
            Direct copy from indexed lane
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_16.shfl(System.Int64,System.UInt32)">
            <summary>
            Direct copy from indexed lane
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_16.shfl(System.UInt64,System.UInt32)">
            <summary>
            Direct copy from indexed lane
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_16.shfl(System.Single,System.UInt32)">
            <summary>
            Direct copy from indexed lane
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_16.shfl(System.Double,System.UInt32)">
            <summary>
            Direct copy from indexed lane
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_16.shfl_up(System.Int32,System.Int32)">
            <summary>
            Copy from a lane with lower ID relative to caller
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_16.shfl_up(System.UInt32,System.Int32)">
            <summary>
            Copy from a lane with lower ID relative to caller
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_16.shfl_up(System.Int64,System.Int32)">
            <summary>
            Copy from a lane with lower ID relative to caller
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_16.shfl_up(System.UInt64,System.Int32)">
            <summary>
            Copy from a lane with lower ID relative to caller
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_16.shfl_up(System.Single,System.Int32)">
            <summary>
            Copy from a lane with lower ID relative to caller
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_16.shfl_up(System.Double,System.Int32)">
            <summary>
            Copy from a lane with lower ID relative to caller
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_16.shfl_down(System.Int32,System.Int32)">
            <summary>
            Copy from a lane with higher ID relative to caller
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_16.shfl_down(System.UInt32,System.Int32)">
            <summary>
            Copy from a lane with higher ID relative to caller
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_16.shfl_down(System.Int64,System.Int32)">
            <summary>
            Copy from a lane with higher ID relative to caller
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_16.shfl_down(System.UInt64,System.Int32)">
            <summary>
            Copy from a lane with higher ID relative to caller
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_16.shfl_down(System.Single,System.Int32)">
            <summary>
            Copy from a lane with higher ID relative to caller
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_16.shfl_down(System.Double,System.Int32)">
            <summary>
            Copy from a lane with higher ID relative to caller
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_16.any(System.Int32)">
            <summary>
            Evaluate predicate for all non-exited threads and return non-zero if and only if predicate evaluates to non-zero for any of them. 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_16.all(System.Int32)">
            <summary>
            Evaluate predicate for all non-exited threads and return non-zero if and only if predicate evaluates to non-zero for any of them. 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_16.ballot(System.Int32)">
            <summary>
            Evaluate predicate for all non-exited threads and return an integer whose Nth bit is set if and only if predicate evaluates to non-zero for the Nth thread of the warp and the Nth thread is active. 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_16.shfl_xor(System.Int32,System.UInt32)">
            <summary>
            Copy from a lane based on bitwise XOR of own lane ID
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_16.shfl_xor(System.UInt32,System.UInt32)">
            <summary>
            Copy from a lane based on bitwise XOR of own lane ID
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_16.shfl_xor(System.Int64,System.UInt32)">
            <summary>
            Copy from a lane based on bitwise XOR of own lane ID
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_16.shfl_xor(System.UInt64,System.UInt32)">
             <summary>
            Copy from a lane based on bitwise XOR of own lane ID
             </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_16.shfl_xor(System.Single,System.UInt32)">
            <summary>
            Copy from a lane based on bitwise XOR of own lane ID
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_16.shfl_xor(System.Double,System.UInt32)">
            <summary>
            Copy from a lane based on bitwise XOR of own lane ID
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_8.thread_rank">
            <summary>
            Thread index within the group
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_8.sync">
            <summary>
            synchronize threads within the group
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_8.size">
            <summary>
            Get the size (total number of threads) of a group
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_8.shfl(System.Int32,System.UInt32)">
            <summary>
            Direct copy from indexed lane
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_8.shfl(System.UInt32,System.UInt32)">
            <summary>
            Direct copy from indexed lane
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_8.shfl(System.Int64,System.UInt32)">
            <summary>
            Direct copy from indexed lane
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_8.shfl(System.UInt64,System.UInt32)">
            <summary>
            Direct copy from indexed lane
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_8.shfl(System.Single,System.UInt32)">
            <summary>
            Direct copy from indexed lane
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_8.shfl(System.Double,System.UInt32)">
            <summary>
            Direct copy from indexed lane
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_8.shfl_up(System.Int32,System.Int32)">
            <summary>
            Copy from a lane with lower ID relative to caller
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_8.shfl_up(System.UInt32,System.Int32)">
            <summary>
            Copy from a lane with lower ID relative to caller
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_8.shfl_up(System.Int64,System.Int32)">
            <summary>
            Copy from a lane with lower ID relative to caller
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_8.shfl_up(System.UInt64,System.Int32)">
            <summary>
            Copy from a lane with lower ID relative to caller
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_8.shfl_up(System.Single,System.Int32)">
            <summary>
            Copy from a lane with lower ID relative to caller
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_8.shfl_up(System.Double,System.Int32)">
            <summary>
            Copy from a lane with lower ID relative to caller
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_8.shfl_down(System.Int32,System.Int32)">
            <summary>
            Copy from a lane with higher ID relative to caller
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_8.shfl_down(System.UInt32,System.Int32)">
            <summary>
            Copy from a lane with higher ID relative to caller
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_8.shfl_down(System.Int64,System.Int32)">
            <summary>
            Copy from a lane with higher ID relative to caller
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_8.shfl_down(System.UInt64,System.Int32)">
            <summary>
            Copy from a lane with higher ID relative to caller
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_8.shfl_down(System.Single,System.Int32)">
            <summary>
            Copy from a lane with higher ID relative to caller
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_8.shfl_down(System.Double,System.Int32)">
            <summary>
            Copy from a lane with higher ID relative to caller
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_8.any(System.Int32)">
            <summary>
            Evaluate predicate for all non-exited threads and return non-zero if and only if predicate evaluates to non-zero for any of them. 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_8.all(System.Int32)">
            <summary>
            Evaluate predicate for all non-exited threads and return non-zero if and only if predicate evaluates to non-zero for any of them. 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_8.ballot(System.Int32)">
            <summary>
            Evaluate predicate for all non-exited threads and return an integer whose Nth bit is set if and only if predicate evaluates to non-zero for the Nth thread of the warp and the Nth thread is active. 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_8.shfl_xor(System.Int32,System.UInt32)">
            <summary>
            Copy from a lane based on bitwise XOR of own lane ID
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_8.shfl_xor(System.UInt32,System.UInt32)">
            <summary>
            Copy from a lane based on bitwise XOR of own lane ID
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_8.shfl_xor(System.Int64,System.UInt32)">
            <summary>
            Copy from a lane based on bitwise XOR of own lane ID
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_8.shfl_xor(System.UInt64,System.UInt32)">
             <summary>
            Copy from a lane based on bitwise XOR of own lane ID
             </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_8.shfl_xor(System.Single,System.UInt32)">
            <summary>
            Copy from a lane based on bitwise XOR of own lane ID
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_8.shfl_xor(System.Double,System.UInt32)">
            <summary>
            Copy from a lane based on bitwise XOR of own lane ID
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_4.thread_rank">
            <summary>
            Thread index within the group
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_4.sync">
            <summary>
            synchronize threads within the group
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_4.size">
            <summary>
            Get the size (total number of threads) of a group
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_4.shfl(System.Int32,System.UInt32)">
            <summary>
            Direct copy from indexed lane
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_4.shfl(System.UInt32,System.UInt32)">
            <summary>
            Direct copy from indexed lane
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_4.shfl(System.Int64,System.UInt32)">
            <summary>
            Direct copy from indexed lane
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_4.shfl(System.UInt64,System.UInt32)">
            <summary>
            Direct copy from indexed lane
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_4.shfl(System.Single,System.UInt32)">
            <summary>
            Direct copy from indexed lane
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_4.shfl(System.Double,System.UInt32)">
            <summary>
            Direct copy from indexed lane
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_4.shfl_up(System.Int32,System.Int32)">
            <summary>
            Copy from a lane with lower ID relative to caller
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_4.shfl_up(System.UInt32,System.Int32)">
            <summary>
            Copy from a lane with lower ID relative to caller
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_4.shfl_up(System.Int64,System.Int32)">
            <summary>
            Copy from a lane with lower ID relative to caller
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_4.shfl_up(System.UInt64,System.Int32)">
            <summary>
            Copy from a lane with lower ID relative to caller
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_4.shfl_up(System.Single,System.Int32)">
            <summary>
            Copy from a lane with lower ID relative to caller
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_4.shfl_up(System.Double,System.Int32)">
            <summary>
            Copy from a lane with lower ID relative to caller
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_4.shfl_down(System.Int32,System.Int32)">
            <summary>
            Copy from a lane with higher ID relative to caller
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_4.shfl_down(System.UInt32,System.Int32)">
            <summary>
            Copy from a lane with higher ID relative to caller
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_4.shfl_down(System.Int64,System.Int32)">
            <summary>
            Copy from a lane with higher ID relative to caller
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_4.shfl_down(System.UInt64,System.Int32)">
            <summary>
            Copy from a lane with higher ID relative to caller
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_4.shfl_down(System.Single,System.Int32)">
            <summary>
            Copy from a lane with higher ID relative to caller
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_4.shfl_down(System.Double,System.Int32)">
            <summary>
            Copy from a lane with higher ID relative to caller
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_4.any(System.Int32)">
            <summary>
            Evaluate predicate for all non-exited threads and return non-zero if and only if predicate evaluates to non-zero for any of them. 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_4.all(System.Int32)">
            <summary>
            Evaluate predicate for all non-exited threads and return non-zero if and only if predicate evaluates to non-zero for any of them. 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_4.ballot(System.Int32)">
            <summary>
            Evaluate predicate for all non-exited threads and return an integer whose Nth bit is set if and only if predicate evaluates to non-zero for the Nth thread of the warp and the Nth thread is active. 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_4.shfl_xor(System.Int32,System.UInt32)">
            <summary>
            Copy from a lane based on bitwise XOR of own lane ID
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_4.shfl_xor(System.UInt32,System.UInt32)">
            <summary>
            Copy from a lane based on bitwise XOR of own lane ID
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_4.shfl_xor(System.Int64,System.UInt32)">
            <summary>
            Copy from a lane based on bitwise XOR of own lane ID
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_4.shfl_xor(System.UInt64,System.UInt32)">
             <summary>
            Copy from a lane based on bitwise XOR of own lane ID
             </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_4.shfl_xor(System.Single,System.UInt32)">
            <summary>
            Copy from a lane based on bitwise XOR of own lane ID
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_4.shfl_xor(System.Double,System.UInt32)">
            <summary>
            Copy from a lane based on bitwise XOR of own lane ID
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_2.thread_rank">
            <summary>
            Thread index within the group
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_2.sync">
            <summary>
            synchronize threads within the group
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_2.size">
            <summary>
            Get the size (total number of threads) of a group
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_2.shfl(System.Int32,System.UInt32)">
            <summary>
            Direct copy from indexed lane
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_2.shfl(System.UInt32,System.UInt32)">
            <summary>
            Direct copy from indexed lane
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_2.shfl(System.Int64,System.UInt32)">
            <summary>
            Direct copy from indexed lane
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_2.shfl(System.UInt64,System.UInt32)">
            <summary>
            Direct copy from indexed lane
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_2.shfl(System.Single,System.UInt32)">
            <summary>
            Direct copy from indexed lane
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_2.shfl(System.Double,System.UInt32)">
            <summary>
            Direct copy from indexed lane
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_2.shfl_up(System.Int32,System.Int32)">
            <summary>
            Copy from a lane with lower ID relative to caller
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_2.shfl_up(System.UInt32,System.Int32)">
            <summary>
            Copy from a lane with lower ID relative to caller
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_2.shfl_up(System.Int64,System.Int32)">
            <summary>
            Copy from a lane with lower ID relative to caller
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_2.shfl_up(System.UInt64,System.Int32)">
            <summary>
            Copy from a lane with lower ID relative to caller
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_2.shfl_up(System.Single,System.Int32)">
            <summary>
            Copy from a lane with lower ID relative to caller
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_2.shfl_up(System.Double,System.Int32)">
            <summary>
            Copy from a lane with lower ID relative to caller
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_2.shfl_down(System.Int32,System.Int32)">
            <summary>
            Copy from a lane with higher ID relative to caller
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_2.shfl_down(System.UInt32,System.Int32)">
            <summary>
            Copy from a lane with higher ID relative to caller
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_2.shfl_down(System.Int64,System.Int32)">
            <summary>
            Copy from a lane with higher ID relative to caller
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_2.shfl_down(System.UInt64,System.Int32)">
            <summary>
            Copy from a lane with higher ID relative to caller
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_2.shfl_down(System.Single,System.Int32)">
            <summary>
            Copy from a lane with higher ID relative to caller
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_2.shfl_down(System.Double,System.Int32)">
            <summary>
            Copy from a lane with higher ID relative to caller
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_2.any(System.Int32)">
            <summary>
            Evaluate predicate for all non-exited threads and return non-zero if and only if predicate evaluates to non-zero for any of them. 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_2.all(System.Int32)">
            <summary>
            Evaluate predicate for all non-exited threads and return non-zero if and only if predicate evaluates to non-zero for any of them. 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_2.ballot(System.Int32)">
            <summary>
            Evaluate predicate for all non-exited threads and return an integer whose Nth bit is set if and only if predicate evaluates to non-zero for the Nth thread of the warp and the Nth thread is active. 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_2.shfl_xor(System.Int32,System.UInt32)">
            <summary>
            Copy from a lane based on bitwise XOR of own lane ID
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_2.shfl_xor(System.UInt32,System.UInt32)">
            <summary>
            Copy from a lane based on bitwise XOR of own lane ID
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_2.shfl_xor(System.Int64,System.UInt32)">
            <summary>
            Copy from a lane based on bitwise XOR of own lane ID
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_2.shfl_xor(System.UInt64,System.UInt32)">
             <summary>
            Copy from a lane based on bitwise XOR of own lane ID
             </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_2.shfl_xor(System.Single,System.UInt32)">
            <summary>
            Copy from a lane based on bitwise XOR of own lane ID
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_2.shfl_xor(System.Double,System.UInt32)">
            <summary>
            Copy from a lane based on bitwise XOR of own lane ID
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_1.thread_rank">
            <summary>
            Thread index within the group
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_1.sync">
            <summary>
            synchronize threads within the group
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_1.size">
            <summary>
            Get the size (total number of threads) of a group
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_1.shfl(System.Int32,System.UInt32)">
            <summary>
            Direct copy from indexed lane
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_1.shfl(System.UInt32,System.UInt32)">
            <summary>
            Direct copy from indexed lane
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_1.shfl(System.Int64,System.UInt32)">
            <summary>
            Direct copy from indexed lane
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_1.shfl(System.UInt64,System.UInt32)">
            <summary>
            Direct copy from indexed lane
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_1.shfl(System.Single,System.UInt32)">
            <summary>
            Direct copy from indexed lane
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_1.shfl(System.Double,System.UInt32)">
            <summary>
            Direct copy from indexed lane
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_1.shfl_up(System.Int32,System.Int32)">
            <summary>
            Copy from a lane with lower ID relative to caller
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_1.shfl_up(System.UInt32,System.Int32)">
            <summary>
            Copy from a lane with lower ID relative to caller
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_1.shfl_up(System.Int64,System.Int32)">
            <summary>
            Copy from a lane with lower ID relative to caller
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_1.shfl_up(System.UInt64,System.Int32)">
            <summary>
            Copy from a lane with lower ID relative to caller
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_1.shfl_up(System.Single,System.Int32)">
            <summary>
            Copy from a lane with lower ID relative to caller
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_1.shfl_up(System.Double,System.Int32)">
            <summary>
            Copy from a lane with lower ID relative to caller
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_1.shfl_down(System.Int32,System.Int32)">
            <summary>
            Copy from a lane with higher ID relative to caller
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_1.shfl_down(System.UInt32,System.Int32)">
            <summary>
            Copy from a lane with higher ID relative to caller
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_1.shfl_down(System.Int64,System.Int32)">
            <summary>
            Copy from a lane with higher ID relative to caller
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_1.shfl_down(System.UInt64,System.Int32)">
            <summary>
            Copy from a lane with higher ID relative to caller
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_1.shfl_down(System.Single,System.Int32)">
            <summary>
            Copy from a lane with higher ID relative to caller
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_1.shfl_down(System.Double,System.Int32)">
            <summary>
            Copy from a lane with higher ID relative to caller
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_1.any(System.Int32)">
            <summary>
            Evaluate predicate for all non-exited threads and return non-zero if and only if predicate evaluates to non-zero for any of them. 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_1.all(System.Int32)">
            <summary>
            Evaluate predicate for all non-exited threads and return non-zero if and only if predicate evaluates to non-zero for any of them. 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_1.ballot(System.Int32)">
            <summary>
            Evaluate predicate for all non-exited threads and return an integer whose Nth bit is set if and only if predicate evaluates to non-zero for the Nth thread of the warp and the Nth thread is active. 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_1.shfl_xor(System.Int32,System.UInt32)">
            <summary>
            Copy from a lane based on bitwise XOR of own lane ID
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_1.shfl_xor(System.UInt32,System.UInt32)">
            <summary>
            Copy from a lane based on bitwise XOR of own lane ID
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_1.shfl_xor(System.Int64,System.UInt32)">
            <summary>
            Copy from a lane based on bitwise XOR of own lane ID
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_1.shfl_xor(System.UInt64,System.UInt32)">
             <summary>
            Copy from a lane based on bitwise XOR of own lane ID
             </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_1.shfl_xor(System.Single,System.UInt32)">
            <summary>
            Copy from a lane based on bitwise XOR of own lane ID
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.thread_block_tile_1.shfl_xor(System.Double,System.UInt32)">
            <summary>
            Copy from a lane based on bitwise XOR of own lane ID
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cusparse.cusparseHandle_t">
            <summary>
            This is a pointer type to an opaque cuSPARSE context, which the user must initialize by calling prior to calling cusparseCreate() any other library function. The handle created and returned by cusparseCreate() must be passed to every cuSPARSE function
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cusparse.cusparseMatDescr_t">
            <summary>
            This structure is used to describe the shape and properties of a matrix.
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cusparse.cusparseSolveAnalysisInfo_t">
            <summary>
            This is a pointer type to an opaque structure holding the information collected in the analysis phase of the solution of the sparse triangular linear system.It is expected to be passed unchanged to the solution phase of the sparse triangular linear system.
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cusparse.csrsv2Info_t">
            <summary>
            This is a pointer type to an opaque structure holding the information used in csrsv2_bufferSize(), csrsv2_analysis(), and csrsv2_solve().
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cusparse.csrsm2Info_t">
            <summary>
            This is a pointer type to an opaque structure holding the information used in csrsm2_bufferSize(), csrsm2_analysis(), and csrsm2_solve().
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cusparse.csric02Info_t">
            <summary>
            This is a pointer type to an opaque structure holding the information used in csric02_bufferSize(), csric02_analysis(), and csric02(). 
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cusparse.bsric02Info_t">
            <summary>
            This is a pointer type to an opaque structure holding the information used in bsric02_bufferSize(), bsric02_analysis(), and bsric02(). 
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cusparse.csrilu02Info_t">
            <summary>
            This is a pointer type to an opaque structure holding the information used in csrilu02_bufferSize(), csrilu02_analysis(), and csrilu02(). 
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cusparse.bsrilu02Info_t">
            <summary>
            This is a pointer type to an opaque structure holding the information used in bsrilu02_bufferSize(), bsrilu02_analysis(), and bsrilu02()
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cusparse.bsrsv2Info_t">
            <summary>
            This is a pointer type to an opaque structure holding the information used in bsrsv2_bufferSize(), bsrsv2_analysis(), and bsrsv2_solve(). 
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cusparse.bsrsm2Info_t">
            <summary>
            This is a pointer type to an opaque structure holding the information used in bsrsm2_bufferSize(), bsrsm2_analysis(), and bsrsm2_solve(). 
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cusparse.cusparseHybMat_t">
            <summary>
            internal
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cusparse.csru2csrInfo_t">
            <summary>
             Opaque structure holding the sorting information
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cusparse.cusparseColorInfo_t">
            <summary>
            Opaque structure holding the coloring information
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cusparse.csrgemm2Info_t">
            <summary>
            Opaque structures holding sparse gemm information
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cusparse.cusparseStatus_t">
            <summary>
            CUSPARSE status type returns
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cusparse.cusparseStatus_t.CUSPARSE_STATUS_SUCCESS">
            <summary></summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cusparse.cusparseStatus_t.CUSPARSE_STATUS_NOT_INITIALIZED">
            <summary></summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cusparse.cusparseStatus_t.CUSPARSE_STATUS_ALLOC_FAILED">
            <summary></summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cusparse.cusparseStatus_t.CUSPARSE_STATUS_INVALID_VALUE">
            <summary></summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cusparse.cusparseStatus_t.CUSPARSE_STATUS_ARCH_MISMATCH">
            <summary></summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cusparse.cusparseStatus_t.CUSPARSE_STATUS_MAPPING_ERROR">
            <summary></summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cusparse.cusparseStatus_t.CUSPARSE_STATUS_EXECUTION_FAILED">
            <summary></summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cusparse.cusparseStatus_t.CUSPARSE_STATUS_INTERNAL_ERROR">
            <summary></summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cusparse.cusparseStatus_t.CUSPARSE_STATUS_MATRIX_TYPE_NOT_SUPPORTED">
            <summary></summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cusparse.cusparseStatus_t.CUSPARSE_STATUS_ZERO_PIVOT">
            <summary></summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cusparse.cusparsePointerMode_t">
            <summary>
            Types definitions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cusparse.cusparsePointerMode_t.CUSPARSE_POINTER_MODE_HOST">
            <summary></summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cusparse.cusparsePointerMode_t.CUSPARSE_POINTER_MODE_DEVICE">
            <summary></summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cusparse.cusparseAlgMode_t">
            <summary>
            Types definitions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cusparse.cusparseAlgMode_t.CUSPARSE_ALG_NAIVE">
            <summary></summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cusparse.cusparseAlgMode_t.CUSPARSE_ALG_MERGE_PATH">
            <summary></summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cusparse.cusparseAction_t">
            <summary></summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cusparse.cusparseAction_t.CUSPARSE_ACTION_SYMBOLIC">
            <summary></summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cusparse.cusparseAction_t.CUSPARSE_ACTION_NUMERIC">
            <summary></summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cusparse.cusparseMatrixType_t">
            <summary></summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cusparse.cusparseMatrixType_t.CUSPARSE_MATRIX_TYPE_GENERAL">
            <summary></summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cusparse.cusparseMatrixType_t.CUSPARSE_MATRIX_TYPE_SYMMETRIC">
            <summary></summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cusparse.cusparseMatrixType_t.CUSPARSE_MATRIX_TYPE_HERMITIAN">
            <summary></summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cusparse.cusparseMatrixType_t.CUSPARSE_MATRIX_TYPE_TRIANGULAR">
            <summary></summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cusparse.cusparseFillMode_t">
            <summary></summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cusparse.cusparseFillMode_t.CUSPARSE_FILL_MODE_LOWER">
            <summary></summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cusparse.cusparseFillMode_t.CUSPARSE_FILL_MODE_UPPER">
            <summary></summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cusparse.CUSPARSE_64_75">
            <summary>
            Complete documentation <see href="https://docs.nvidia.com/cuda/cusparse/index.html">here</see>
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cusparse.CUSPARSE_64_80">
            <summary>
            Complete documentation <see href="https://docs.nvidia.com/cuda/archive/8.0/cusparse/index.html">here</see>
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cusparse.CUSPARSE_64_90">
            <summary>
            Complete documentation <see href="https://docs.nvidia.com/cuda/archive/9.0/cusparse/index.html">here</see>
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cusparse.CUSPARSE_64_91">
            <summary>
            Complete documentation <see href="https://docs.nvidia.com/cuda/archive/9.1/cusparse/index.html">here</see>
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cusparse.CUSPARSE_64_92">
            <summary>
            Complete documentation <see href="https://docs.nvidia.com/cuda/archive/9.2/cusparse/index.html">here</see>
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cusparse.CUSPARSE_64_100">
            <summary>
            Complete documentation <see href="https://docs.nvidia.com/cuda/cusparse/index.html">here</see>
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cusparse.CUSPARSE_64_101">
            <summary>
            Complete documentation <see href="https://docs.nvidia.com/cuda/cusparse/index.html">here</see>
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.NppiNorm.nppiNormInf">
            <summary>
            maximum
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.NppiNorm.nppiNormL1">
            <summary>
            sum
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.NppiNorm.nppiNormL2">
            <summary>
            square root of sum of squares
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.NppStatus.NOT_SUPPORTED_MODE_ERROR">
            <summary>
            negative return-codes indicate errors
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.NppStatus.ZC_MODE_NOT_SUPPORTED_ERROR">
            <summary>
            ZeroCrossing mode not supported
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.NppStatus.ROUND_MODE_NOT_SUPPORTED_ERROR">
            <summary>
            Unsupported round mode
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.NppStatus.QUALITY_INDEX_ERROR">
            <summary>
            Image pixels are constant for quality index
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.NppStatus.RESIZE_NO_OPERATION_ERROR">
            <summary>
            One of the output image dimensions is less than 1 pixel
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.NppStatus.OVERFLOW_ERROR">
            <summary>
            Number overflows the upper or lower limit of the data type
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.NppStatus.NOT_EVEN_STEP_ERROR">
            <summary>
            Step value is not pixel multiple
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.NppStatus.HISTOGRAM_NUMBER_OF_LEVELS_ERROR">
            <summary>
            Number of levels for histogram is less than 2
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.NppStatus.LUT_NUMBER_OF_LEVELS_ERROR">
            <summary>
            Number of levels for LUT is less than 2
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.NppStatus.CORRUPTED_DATA_ERROR">
            <summary>
            Processed data is corrupted
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.NppStatus.CHANNEL_ORDER_ERROR">
            <summary>
            Wrong order of the destination channels
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.NppStatus.ZERO_MASK_VALUE_ERROR">
            <summary>
            All values of the mask are zero
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.NppStatus.QUADRANGLE_ERROR">
            <summary>
            The quadrangle is nonconvex or degenerates into triangle, line or point
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.NppStatus.RECTANGLE_ERROR">
            <summary>
             Size of the rectangle region is less than or equal to 1
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.NppStatus.COEFFICIENT_ERROR">
            <summary>
            Unallowable values of the transformation coefficients
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.NppStatus.NUMBER_OF_CHANNELS_ERROR">
            <summary>
            Bad or unsupported number of channels
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.NppStatus.COI_ERROR">
            <summary>
            Channel of interest is not 1, 2, or 3
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.NppStatus.DIVISOR_ERROR">
            <summary>
            Divisor is equal to zero
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.NppStatus.CHANNEL_ERROR">
            <summary>
            Illegal channel index
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.NppStatus.STRIDE_ERROR">
            <summary>
            Stride is less than the row length
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.NppStatus.ANCHOR_ERROR">
            <summary>
            Anchor point is outside mask
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.NppStatus.MASK_SIZE_ERROR">
            <summary>
            Lower bound is larger than upper bound
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.NppStatus.STEP_ERROR">
            <summary>
            Step is less or equal zero
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.NppStatus.NO_ERROR">
            <summary>
            Error free operation
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.NppStatus.SUCCESS">
            <summary>
            Successful operation (same as NO_ERROR)
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.NppStatus.NO_OPERATION_WARNING">
            <summary>
             Indicates that no operation was performed
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.NppStatus.DIVIDE_BY_ZERO_WARNING">
            <summary>
            Divisor is zero however does not terminate the execution
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.NppStatus.AFFINE_QUAD_INCORRECT_WARNING">
            <summary>
            Indicates that the quadrangle passed to one of affine warping functions doesn't have necessary properties. First 3 vertices are used, the fourth vertex discarded.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.NppStatus.WRONG_INTERSECTION_ROI_WARNING">
            <summary>
            The given ROI has no interestion with either the source or destination ROI. Thus no operation was performed.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.NppStatus.WRONG_INTERSECTION_QUAD_WARNING">
            <summary>
            The given quadrangle has no intersection with either the source or destination ROI. Thus no operation was performed.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.NppStatus.DOUBLE_SIZE_WARNING">
            <summary>
            Image size isn't multiple of two. Indicates that in case of 422/411/420 sampling the ROI width/height was modified for proper processing.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.NppStatus.MISALIGNED_DST_ROI_WARNING">
            <summary>
             Speed reduction due to uncoalesced memory accesses warning.
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.nvrtcProgram">
            <summary>
            https://docs.nvidia.com/cuda/nvrtc/index.html#group__compilation_1ga64ec636c8e3e1e8ea10028866c4594b
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.nvrtcResult">
            <summary>
            https://docs.nvidia.com/cuda/nvrtc/index.html#group__error
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.nvrtc10.nvrtcCreateProgram(Hybridizer.Runtime.CUDAImports.nvrtcProgram@,System.String,System.String,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            https://docs.nvidia.com/cuda/nvrtc/index.html#group__compilation_1g9ae65f68911d1cf0adda2af4ad8cb458
            </summary>
            <param name="prog">CUDA Runtime Compilation program. </param>
            <param name="src">CUDA program source. </param>
            <param name="name"></param>
            <param name="numHeaders"></param>
            <param name="headers"></param>
            <param name="includeNames"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.nvrtc10.nvrtcCompileProgram(Hybridizer.Runtime.CUDAImports.nvrtcProgram,System.Int32,System.IntPtr)">
            <summary>
            https://docs.nvidia.com/cuda/nvrtc/index.html#group__compilation_1g1f3136029db1413e362154b567297e8b
            </summary>
            <param name="prog"></param>
            <param name="numOptions"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.nvrtc10.nvrtcGetProgramLogSize(Hybridizer.Runtime.CUDAImports.nvrtcProgram,System.UInt64@)">
            <summary>
            
            </summary>
            <param name="prog"></param>
            <param name="logSize"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.nvrtc101.nvrtcCreateProgram(Hybridizer.Runtime.CUDAImports.nvrtcProgram@,System.String,System.String,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            https://docs.nvidia.com/cuda/nvrtc/index.html#group__compilation_1g9ae65f68911d1cf0adda2af4ad8cb458
            </summary>
            <param name="prog">CUDA Runtime Compilation program. </param>
            <param name="src">CUDA program source. </param>
            <param name="name"></param>
            <param name="numHeaders"></param>
            <param name="headers"></param>
            <param name="includeNames"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.nvrtc101.nvrtcCompileProgram(Hybridizer.Runtime.CUDAImports.nvrtcProgram,System.Int32,System.IntPtr)">
            <summary>
            https://docs.nvidia.com/cuda/nvrtc/index.html#group__compilation_1g1f3136029db1413e362154b567297e8b
            </summary>
            <param name="prog"></param>
            <param name="numOptions"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.nvrtc101.nvrtcGetProgramLogSize(Hybridizer.Runtime.CUDAImports.nvrtcProgram,System.UInt64@)">
            <summary>
            
            </summary>
            <param name="prog"></param>
            <param name="logSize"></param>
            <returns></returns>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.ForgedFunc`1">
            <summary>
            internal usage -- reserved
            </summary>
            <typeparam name="FuncT"></typeparam>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.NativeSerializerState.AbstractObjectVisiter.InitialVisit(System.Object)">
            <summary>
            Initial point of entry when serializing / deserializing a whole object tree
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.CudaAggregatedSerializationState.AggregatedAllocator.baseDevicePtr">
            <summary>
            Pointer to the start of the preallocated memory on the device
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.CudaAggregatedSerializationState.AggregatedAllocator.currentOffset">
            <summary>
            Current offset in the preallocated buffer (offset of the first free byte)
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.CudaAggregatedSerializationState.AggregatedAllocator.aggregatedAllocatedSize">
            <summary>
            MaxSize of the preallocated buffer
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.CudaAggregatedSerializationState.AggregatedAllocator.allAggregatedObjects">
            <summary>
            Set of all objects that have been copied to the preallocated buffer (direclty allocated objects are not in it)
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.CudaAggregatedSerializationState.AggregatedAllocator.object2Allocator">
            <summary>
            For each object allocated, keeps a link to the allocator which allocated it on the device
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.CudaAggregatedSerializationState.AggregatedAllocator.directlyAllocatedObjects">
            <summary>
            All objects that have been directly allocated (without going to the preallocated buffer)
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.CudaAggregatedSerializationState.AggregatedAllocator._hostBufferArray">
            <summary>
            Buffer used to group all objects in host memory before copying to the device
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.CudaAggregatedSerializationState.CUDAAggregatedSerializer.#ctor(Hybridizer.Runtime.CUDAImports.CudaAggregatedSerializationState)">
            <summary>
            Associate each initial object to a global allocator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.CudaAggregatedSerializationState.CUDAAggregatedSerializer.DeepSerializeArray(System.Array)">
            <summary>
            Serializes all the objects contained in <paramref name="ap"/>
            </summary>
            <param name="ap">Array of objects</param>
            <returns>an array of pointers pointing to native memory</returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.CudaAggregatedSerializationState.CUDAAggregatedSizeCalculator.DeepSerializeArray(System.Array)">
            <summary>
            Serializes all the objects contained in <paramref name="ap"/>
            </summary>
            <param name="ap">Array of objects</param>
            <returns>an array of pointers pointing to native memory</returns>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.MainMemorySerializationState.pinned_objects">
            <summary>
            Object to pointer on the device memory
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.MainMemorySerializationState.MainMemorySerializer.DeepSerializeArray(System.Array)">
            <summary>
            Serializes all the objects contained in <paramref name="ap"/>
            </summary>
            <param name="ap">Array of objects</param>
            <returns>an array of pointers pointing to native memory</returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.CudaSerializationState.CUDASerializer.DeepSerializeArray(System.Array)">
            <summary>
            Serializes all the objects contained in <paramref name="ap"/>
            </summary>
            <param name="ap">Array of objects</param>
            <returns>an array of pointers pointing to native memory</returns>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.CudaMarshaler">
            <summary>
            Marshaler to CUDA device memory
            
            Usage example:
            \begin{lstlisting}[style=customcs]
            
             [DllImport("{cuda DLL name}.dll", 
                        EntryPoint = "{EntryPointName}_ExternCWrapper_CUDA", 
                        CallingConvention = CallingConvention.Cdecl)]
             private static extern int methodName(
                        int gridDimX, int gridDimY, 
                        int blockDimX, int blockDimY, int blockDimZ,
                        int shared,
                 [MarshalAs(UnmanagedType.CustomMarshaler, 
                        MarshalTypeRef = typeof(CudaMarshaler))] 
                        TypeToBemarshaled param);
            
            \end{lstlisting}
            
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.CudaMarshaler.CudaMarshalerFix">
            <summary>
            Necessary because .Net runtime caches calls to GetInstance method and we need to change
            the implementation at runtime
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.CudaMarshaler.CudaMarshalerFix.MarshalNativeToManaged(System.IntPtr)">
            <summary>
            INTERNAL METHOD
            </summary>
            <param name="pNativeData"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.CudaMarshaler.CudaMarshalerFix.MarshalManagedToNative(System.Object)">
            <summary>
            INTERNAL METHOD
            </summary>
            <param name="ManagedObj"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.CudaMarshaler.CudaMarshalerFix.CleanUpNativeData(System.IntPtr)">
            <summary>
            INTERNAL METHOD
            </summary>
            <param name="pNativeData"></param>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.CudaMarshaler.CudaMarshalerFix.CleanUpManagedData(System.Object)">
            <summary>
            INTERNAL METHOD
            </summary>
            <param name="ManagedObj"></param>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.CudaMarshaler.CudaMarshalerFix.GetNativeDataSize">
            <summary>
            INTERNAL METHOD
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.CudaMarshaler.Create(System.Boolean,Hybridizer.Runtime.CUDAImports.cudaStream_t,Hybridizer.Runtime.CUDAImports.cuda.ICudaMarshalling)">
            <summary>
            Factory method
            </summary>
            <param name="useAggregation">True: malloc and memcopy will be aggregated in one single large block</param>
            <param name="stream">cuda stream for marshaller creation</param>
            <param name="cuda">Implementation of ICuda</param>
            <returns>The Instance of Marshaller (to be used with Instance property)</returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.CudaMarshaler.Create(System.Boolean,Hybridizer.Runtime.CUDAImports.cuda.ICudaMarshalling)">
            <summary>
            Factory method
            </summary>
            <param name="useAggregation">True: malloc and memcopy will be aggregated in one single large block</param>
            <param name="cuda">Implementation of ICuda</param>
            <returns>The Instance of Marshaller (to be used with Instance property)</returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.CudaMarshaler.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.CudaMarshaler.GetInstance(System.String)">
            <summary>
            Necessary when using default DllImport-related marshaler.
            </summary>
            <param name="cookie"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.CudaMarshaler.changeAggregation(System.Boolean)">
            <summary>
            Modify aggregation flag to enable marshaler aggregation
            </summary>
            <param name="useAggregation"></param>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.CudaMarshaler.Instance">
            <summary>
            current instance
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.MainMemoryMarshaler">
            <summary>
            Marshaler to main memory - to be used for OMP and AVX flavors
            
            Usage example:
            
            \begin{lstlisting}[style=customcs]
            
             [DllImport("{DLL name}.dll", 
                    EntryPoint = "{EntryPointName}", 
                    CallingConvention = CallingConvention.Cdecl)]
             private static extern int methodName ( 
                 [MarshalAs(UnmanagedType.CustomMarshaler, 
                        MarshalTypeRef = typeof(MainMemoryMarshaler))] 
                        TypeToBemarshaled param);
                 
            \end{lstlisting}
            
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.MainMemoryMarshaler.Create(Hybridizer.Runtime.CUDAImports.HybridizerFlavor)">
            <summary>
            Create an instance of MainMemoryMarshaler for the given flavor
            </summary>
            <param name="flavor"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.MainMemoryMarshaler.GetInstance(System.String)">
            <summary>
            Singleton implementation
            </summary>
            <param name="cookie"></param>
            <returns></returns>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.MainMemoryMarshaler.Instance">
            <summary>
             current instance
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.MainMemoryMarshaler.MarshalManagedToNative(System.Object)">
            <summary>
             Marshals Managed to Native
            </summary>
            <param name="managedObj"></param>
            <returns></returns>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.ThreadedCudaMarshaler">
            <summary>
            Cuda marshaler, threaded
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.ThreadedCudaMarshaler.GetInstance(System.String)">
            <summary>
            Mandatory when using CustomMarshaler
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.ThreadedCudaMarshaler.ThreadLocalInstance">
            <summary>
            current instance (thread)
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.ThreadedCudaMarshaler.MarshalNativeToManaged(System.IntPtr)">
            <summary>
            Marshals Native to Managed
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.ThreadedCudaMarshaler.MarshalManagedToNative(System.Object)">
            <summary>
            Marshals Managed to Native
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.ThreadedCudaMarshaler.CleanUpNativeData(System.IntPtr)">
            <summary>
            cleanup native data
            </summary>
            <param name="pNativeData"></param>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.ThreadedCudaMarshaler.CleanUpManagedData(System.Object)">
            <summary>
            cleanup managed data
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.ThreadedCudaMarshaler.GetNativeDataSize">
            <summary>
            Get Native Data Size
            </summary>
            <returns></returns>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.AbstractNativeMarshaler">
            <summary>
            Base class for NativeMarshaler
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.AbstractNativeMarshaler.cleanUpNativeData">
            <summary>
            cleans up native data
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.AbstractNativeMarshaler.IsCleanUpNativeData">
            <summary>
            is cleanup native data?
            </summary>
            <returns></returns>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.AbstractNativeMarshaler.CreatingThreadId">
            <summary></summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.AbstractNativeMarshaler.MarshalNativeToManaged(System.IntPtr)">
            <summary>
            Marshals Native To Managed
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.AbstractNativeMarshaler.MarshalManagedToNative(System.Object)">
            <summary>
            Marshals Managed to Native
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.AbstractNativeMarshaler.CleanUpNativeData(System.IntPtr)">
            <summary>
            cleanup native data
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.AbstractNativeMarshaler.CleanUpManagedData(System.Object)">
            <summary>
            cleanup managed data
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.AbstractNativeMarshaler.GetNativeDataSize">
            <summary>
            Get native data size
            </summary>
            <returns></returns>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.AbstractNativeMarshaler.NbelementsInGhost">
            <summary>
            Returns the number of objects that have been marshaled
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.AbstractNativeMarshaler.Free">
            <summary>
            Forces freeing all native allocated memory
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.AbstractNativeMarshaler.RegisterDLL(System.String)">
            <summary>
            Register a dll that contains types to be used in marshaling
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.AbstractNativeMarshaler.IsClean">
            <summary>
            Is state clean?
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.AbstractNativeMarshaler.CopyToSymbol(System.String,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            copies memory to symbol
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.AbstractNativeMarshaler.Flavor">
            <summary>
            current flavor
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.AbstractNativeMarshaler.SetCustomMarshaler(System.Type,Hybridizer.Runtime.CUDAImports.IHybCustomMarshaler)">
            <summary>
            sets a custom marshaler to a type
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.CudaMarshalerTimer">
            <summary>
            internal
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.HandleDelegate">
            <summary>
            Handle for delegate serialized as structs
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.HandleDelegate.Marshalled">
            <summary></summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.HandleDelegate.FuncPtr">
            <summary></summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.HandleDelegate._isStaticFunc">
            <summary></summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.NativeDlls">
            <summary>
            wrapper class listing generated native dlls
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.NativeDlls.Dlls">
            <summary>
            list of native dlls
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.NativePtrConverter">
            <summary>
            Handle conversion of managed code types (via the fullname) to native typeIds
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.NativePtrConverter.GetTypeInfo(System.Type)">
            <summary>
            INTERNAL METHOD
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.TypeInfo">
            <summary>
            Type information, used as a caching structure in the marshaller
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.JavaRandom">
            <summary>
            Simple random class (host)
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.JavaRandom.#ctor(System.UInt64)">
            <summary>
            constructor
            </summary>
            <param name="s">seed</param>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.JavaRandom.nextFloat">
            <summary>
            generates a random float32
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.JavaRandom.Next(System.Int32)">
            <summary>
            generates a random unsigned int 32
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.INVBLAS">
            <summary>
            Complete documentation on <see href="https://docs.nvidia.com/cuda/nvblas/index.html">NVidia documentation</see>
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.nvblas">
            <summary>
            factory class
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.nvblas.GetCudaVersion">
            <summary>
            get current CUDA version
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.nvblas.Instance">
            <summary>
            returns the an iNVBLAS implementation, matching the current cuda version
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.Parallel2D">
            <summary>
            Similar to Parallel class in <see cref="T:System.Threading.Tasks.Parallel"/>
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.Parallel2D.For(System.Int32,System.Int32,System.Int32,System.Int32,System.Action{System.Int32,System.Int32})">
            <summary>
            Work is distributed on J -- on I we assume a pragma simd
            Assume that memory access is j*N + i (coalesced in i)
            Still need to be improved -- both in C# and in AVX
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.DoubleZeroCopyResidentArray">
            <summary>
            A resident array of double precision real numbers, allocated using zero-copy
            Complete documentation <see href="https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#zero-copy">here </see>
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.DoubleZeroCopyResidentArray.#ctor(System.Int64,System.Object)">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.DoubleZeroCopyResidentArray.Item(System.Int32)">
            <summary>
            indexer
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.DoubleZeroCopyResidentArray.GetResidentArray(System.Double*,System.Int32)">
            <summary>
            
            </summary>
            <param name="tab"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.DoubleZeroCopyResidentArray.SetResidentArray(System.Double*,System.Int32,System.Double)">
            <summary>
            
            </summary>
            <param name="tab"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.DoubleZeroCopyResidentArray.CheckRefreshHost">
            <summary>
            
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.DoubleZeroCopyResidentArray.Status">
            <summary>
            Memory status
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.DoubleZeroCopyResidentArray.DevicePointer">
            <summary>
            Device pointer
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.DoubleZeroCopyResidentArray.HostPointer">
            <summary>
            Host pointer
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.DoubleZeroCopyResidentArray.Size">
            <summary>
            Size in bytes
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.DoubleZeroCopyResidentArray.RefreshHost">
            <summary>
            Moves memory from device to host
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.DoubleZeroCopyResidentArray.RefreshDevice">
            <summary>
            Moves memory from Host to Device
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.DoubleZeroCopyResidentArray.Count">
            <summary>
            number of elements
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.DoubleZeroCopyResidentArray.Finalize">
            <summary>
            
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.FloatZeroCopyResidentArray">
            <summary>
            A resident array of float 32 elements, allocated using zero-copy
            Zero-copy documentation <see href="https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#zero-copy">here</see>
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.FloatZeroCopyResidentArray.#ctor(System.Int64,System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.FloatZeroCopyResidentArray.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.FloatZeroCopyResidentArray.GetResidentArray(System.Single*,System.Int32)">
            <summary>
            
            </summary>
            <param name="tab"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.FloatZeroCopyResidentArray.SetResidentArray(System.Single*,System.Int32,System.Single)">
            <summary>
            
            </summary>
            <param name="tab"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.FloatZeroCopyResidentArray.CheckRefreshHost">
            <summary>
            
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.FloatZeroCopyResidentArray.Status">
            <summary>
            Memory status
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.FloatZeroCopyResidentArray.DevicePointer">
            <summary>
            Device Pointer
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.FloatZeroCopyResidentArray.HostPointer">
            <summary>
            Host Pointer
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.FloatZeroCopyResidentArray.Size">
            <summary>
            Size in Bytes
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.FloatZeroCopyResidentArray.RefreshHost">
            <summary>
            Moves memory from Device To Host
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.FloatZeroCopyResidentArray.RefreshDevice">
            <summary>
            Moves memory from Host To Device
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.FloatZeroCopyResidentArray.Count">
            <summary>
            Number of elements
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.FloatZeroCopyResidentArray.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.FloatZeroCopyResidentArray.Finalize">
            <summary>
            
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cublasHandle_t">
            <summary>
            Opaque pointer holding the cuBLAS library context
            Complete documentation on <see href="https://docs.nvidia.com/cuda/cublas/index.html#cublashandle_t">Nvidia documentation</see>
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cublasStatus_t">
            <summary>
            The type is used for function status returns
            Complete documentation on <see href="https://docs.nvidia.com/cuda/cublas/index.html#cublasstatus_t">Nvidia documentation</see>
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cublasStatus_t.CUBLAS_STATUS_SUCCESS">
            <summary>
            The operation completed successfully.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cublasStatus_t.CUBLAS_STATUS_NOT_INITIALIZED">
            <summary>
            The cuBLAS library was not initialized.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cublasStatus_t.CUBLAS_STATUS_ALLOC_FAILED">
            <summary>
            Resource allocation failed inside the cuBLAS library.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cublasStatus_t.CUBLAS_STATUS_INVALID_VALUE">
            <summary>
            An unsupported value or parameter was passed to the function
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cublasStatus_t.CUBLAS_STATUS_ARCH_MISMATCH">
            <summary>
            The function requires a feature absent from the device architecture
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cublasStatus_t.CUBLAS_STATUS_MAPPING_ERROR">
            <summary>
            An access to GPU memory space failed
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cublasStatus_t.CUBLAS_STATUS_EXECUTION_FAILED">
            <summary>
            The GPU program failed to execute. This is often caused by a launch failure of the kernel on the GPU, which can be caused by multiple reasons. 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cublasStatus_t.CUBLAS_STATUS_INTERNAL_ERROR">
            <summary>
             An internal cuBLAS operation failed.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cublasStatus_t.CUBLAS_STATUS_NOT_SUPPORTED">
            <summary>
            The functionnality requested is not supported
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cublasStatus_t.CUBLAS_STATUS_LICENSE_ERROR">
            <summary>
            The functionnality requested requires some license and an error was detected when trying to check the current licensing.
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cublasOperation_t">
            <summary>
            Indicates which operation needs to be performed with the dense matrix.
            Complete documentation on <see href="https://docs.nvidia.com/cuda/cublas/index.html#cublasoperation_t">Nvidia documentation</see>
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cublasOperation_t.CUBLAS_OP_N">
            <summary>
            the non-transpose operation is selected
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cublasOperation_t.CUBLAS_OP_T">
            <summary>
            the transpose operation is selected
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cublasOperation_t.CUBLAS_OP_C">
            <summary>
            the conjugate transpose operation is selected
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cublasFillMode_t">
            <summary>
            The type indicates which part (lower or upper) of the dense matrix was filled and consequently should be used by the function.
            Complete documentation on <see href="https://docs.nvidia.com/cuda/cublas/index.html#cublasfillmode_t">Nvidia documentation</see>
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cublasFillMode_t.CUBLAS_FILL_MODE_LOWER">
            <summary>
            the lower part of the matrix is filled
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cublasFillMode_t.CUBLAS_FILL_MODE_UPPER">
            <summary>
            the upper part of the matrix is filled
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cublasDiagType_t">
            <summary>
            Indicates whether the main diagonal of the dense matrix is unity and consequently should not be touched or modified by the function
            Complete documentation on <see href="https://docs.nvidia.com/cuda/cublas/index.html#cublasdiagtype_t">Nvidia documentation</see>
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cublasDiagType_t.CUBLAS_DIAG_NON_UNIT">
            <summary>
            the matrix diagonal has non-unit elements
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cublasDiagType_t.CUBLAS_DIAG_UNIT">
            <summary>
            the matrix diagonal has unit elements
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cublasSideMode_t">
            <summary>
            Indicates whether the dense matrix is on the left or right side in the matrix equation solved by a particular function
            Complete documentation on <see href="https://docs.nvidia.com/cuda/cublas/index.html#cublassidemode_t">Nvidia documentation</see>
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cublasSideMode_t.CUBLAS_SIDE_LEFT">
            <summary>
            the matrix is on the left side in the equation
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cublasSideMode_t.CUBLAS_SIDE_RIGHT">
            <summary>
            the matrix is on the right side in the equation
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cublasPointerMode_t">
            <summary>
            Indicates whether the scalar values are passed by reference on the host or device
            Complete documentation on <see href="https://docs.nvidia.com/cuda/cublas/index.html#cublaspointermode_t">Nvidia documentation</see>
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cublasPointerMode_t.CUBLAS_POINTER_MODE_HOST">
            <summary>
            the scalars are passed by reference on the host
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cublasPointerMode_t.CUBLAS_POINTER_MODE_DEVICE">
            <summary>
            the scalars are passed by reference on the device
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cublasAtomicsMode_t">
            <summary>
            Indicates whether cuBLAS routines which has an alternate implementation using atomics can be used
            Complete documentation on <see href="https://docs.nvidia.com/cuda/cublas/index.html#cublasatomicsmode_t">Nvidia documentation</see>
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cublasAtomicsMode_t.CUBLAS_ATOMICS_NOT_ALLOWED">
            <summary>
            the usage of atomics is not allowed
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cublasAtomicsMode_t.CUBLAS_ATOMICS_ALLOWED">
            <summary>
            the usage of atomics is allowed
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cublasGemmAlgo_t">
            <summary>
            An enumerant to specify the algorithm for matrix-matrix multiplication
            Complete documentation on <see href="https://docs.nvidia.com/cuda/cublas/index.html#cublasgemmalgo_t">Nvidia documentation</see>
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cublasGemmAlgo_t.CUBLAS_GEMM_DEFAULT">
            <summary>
            Apply Heuristics to select the GEMM algorithm
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cublasGemmAlgo_t.CUBLAS_GEMM_ALGO0">
            <summary>
            Explicitly choose Algorithm 0 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cublasGemmAlgo_t.CUBLAS_GEMM_ALGO1">
            <summary>
            Explicitly choose Algorithm 1 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cublasGemmAlgo_t.CUBLAS_GEMM_ALGO2">
            <summary>
            Explicitly choose Algorithm 2 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cublasGemmAlgo_t.CUBLAS_GEMM_ALGO3">
            <summary>
            Explicitly choose Algorithm 3 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cublasGemmAlgo_t.CUBLAS_GEMM_ALGO4">
            <summary>
            Explicitly choose Algorithm 4 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cublasGemmAlgo_t.CUBLAS_GEMM_ALGO5">
            <summary>
            Explicitly choose Algorithm 5 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cublasGemmAlgo_t.CUBLAS_GEMM_ALGO6">
            <summary>
            Explicitly choose Algorithm 6 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cublasGemmAlgo_t.CUBLAS_GEMM_ALGO7">
            <summary>
            Explicitly choose Algorithm 7 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cublasGemmAlgo_t.CUBLAS_GEMM_ALGO8">
            <summary>
            Explicitly choose Algorithm 8 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cublasGemmAlgo_t.CUBLAS_GEMM_ALGO9">
            <summary>
            Explicitly choose Algorithm 9 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cublasGemmAlgo_t.CUBLAS_GEMM_ALGO10">
            <summary>
            Explicitly choose Algorithm 10 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cublasGemmAlgo_t.CUBLAS_GEMM_ALGO11">
            <summary>
            Explicitly choose Algorithm 11 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cublasGemmAlgo_t.CUBLAS_GEMM_ALGO12">
            <summary>
            Explicitly choose Algorithm 12 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cublasGemmAlgo_t.CUBLAS_GEMM_ALGO13">
            <summary>
            Explicitly choose Algorithm 13 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cublasGemmAlgo_t.CUBLAS_GEMM_ALGO14">
            <summary>
            Explicitly choose Algorithm 14 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cublasGemmAlgo_t.CUBLAS_GEMM_ALGO15">
            <summary>
            Explicitly choose Algorithm 15 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cublasGemmAlgo_t.CUBLAS_GEMM_ALGO16">
            <summary>
            Explicitly choose Algorithm 16 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cublasGemmAlgo_t.CUBLAS_GEMM_ALGO17">
            <summary>
            Explicitly choose Algorithm 17 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cublasGemmAlgo_t.CUBLAS_GEMM_DEFAULT_TENSOR_OP">
            <summary>
            Apply Heuristics to select the GEMM algorithm, and allow the use of Tensor Core operations when possible
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cublasGemmAlgo_t.CUBLAS_GEMM_ALGO0_TENSOR_OP">
            <summary>
            Explicitly choose GEMM Algorithm 0 while allowing the use of Tensor Core operations when possible
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cublasGemmAlgo_t.CUBLAS_GEMM_ALGO1_TENSOR_OP">
            <summary>
            Explicitly choose GEMM Algorithm 1 while allowing the use of Tensor Core operations when possible
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cublasGemmAlgo_t.CUBLAS_GEMM_ALGO2_TENSOR_OP">
            <summary>
            Explicitly choose GEMM Algorithm 2 while allowing the use of Tensor Core operations when possible
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cublasMath_t">
            <summary>
            cublasMath_t enumerate type is used in cublasSetMathMode to choose whether or not to use Tensor Core operations in the library by setting the math mode to either CUBLAS_TENSOR_OP_MATH or CUBLAS_DEFAULT_MATH. 
            Complete documentation on <see href="https://docs.nvidia.com/cuda/cublas/index.html#cublasmath_t">Nvidia documentation</see>
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cublasMath_t.CUBLAS_DEFAULT_MATH">
            <summary>
             Prevent the library from using Tensor Core operations
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cublasMath_t.CUBLAS_TENSOR_OP_MATH">
            <summary>
             Allows the library to use Tensor Core operations whenever possible
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cudaDataType_t">
            <summary>
            The cudaDataType_t type is an enumerant to specify the data precision. It is used when the data reference does not carry the type itself (e.g void *) 
            Complete documentation on <see href="https://docs.nvidia.com/cuda/cublas/index.html#cuda_datatype_t">Nvidia documentation</see>
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDataType_t.CUDA_R_16F">
            <summary>
            read as a half
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDataType_t.CUDA_C_16F">
            <summary>
             complex as a pair of half
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDataType_t.CUDA_R_32F">
            <summary>
            real as a float
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDataType_t.CUDA_C_32F">
            <summary>
            complex as a pair of float
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDataType_t.CUDA_R_64F">
            <summary>
            real as a double
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDataType_t.CUDA_C_64F">
            <summary>
            complex as a pair of double
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDataType_t.CUDA_R_8I">
            <summary>
            real as a signed char
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDataType_t.CUDA_C_8I">
            <summary>
            complex as a pair of signed char
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDataType_t.CUDA_R_8U">
            <summary>
            real as an unsigned char
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDataType_t.CUDA_C_8U">
            <summary>
            complex as a pair of unsigned char
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDataType_t.CUDA_R_32I">
            <summary>
            real as a signed int
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDataType_t.CUDA_C_32I">
            <summary>
            complex as a pair of signed int
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDataType_t.CUDA_R_32U">
            <summary>
            real as an unsigned int
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDataType_t.CUDA_C_32U">
            <summary>
            complex as a pair of unsigned int numbers
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.libraryPropertyType_t">
            <summary>
            The libraryPropertyType_t is used as a parameter to specify which property is requested when using the routine cublasGetProperty
            Complete documentation on <see href="https://docs.nvidia.com/cuda/cublas/index.html#libraryPropertyType_t">Nvidia documentation</see>
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.libraryPropertyType_t.MAJOR_VERSION">
            <summary>
            enumerant to query the major version
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.libraryPropertyType_t.MINOR_VERSION">
            <summary>
            enumerant to query the minor version
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.libraryPropertyType_t.PATCH_LEVEL">
            <summary>
            number to identify the patch level
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cublas">
            <summary>
            cuBLAS mapping
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.GetCudaVersion">
            <summary>
            Gets CUDA version from app.config
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.#ctor">
            <summary>
            builds a cublas instance with requested cuda version (5.0 to 9.1)
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Create(Hybridizer.Runtime.CUDAImports.cublasHandle_t@)">
            <summary>
            This function initializes the CUBLAS library and creates a handle to an opaque structure holding the CUBLAS library context. It allocates hardware resources on the host and device and must be called prior to making any other CUBLAS library calls. The CUBLAS library context is tied to the current CUDA device. To use the library on multiple devices, one CUBLAS handle needs to be created for each device. Furthermore, for a given device, multiple CUBLAS handles with different configuration can be created. Because cublasCreate allocates some internal resources and the release of those resources by calling cublasDestroy will implicitly call cublasDeviceSynchronize, it is recommended to minimize the number of cublasCreate/cublasDestroy occurences. For multi-threaded applications that use the same device from different threads, the recommended programming model is to create one CUBLAS handle per thread and use that CUBLAS handle for the entire life of the thread. 
            Complete documentation on <see href="https://docs.nvidia.com/cuda/cublas/index.html#cublascreate">nvidia documentation</see>
            </summary>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Destroy(Hybridizer.Runtime.CUDAImports.cublasHandle_t)">
            <summary>
            This function releases hardware resources used by the CUBLAS library. This function is usually the last call with a particular handle to the CUBLAS library. Because cublasCreate allocates some internal resources and the release of those resources by calling cublasDestroy will implicitly call cublasDeviceSynchronize, it is recommended to minimize the number of cublasCreate/cublasDestroy occurences. 
            Complete documentation on <see href="https://docs.nvidia.com/cuda/cublas/index.html#cublasdestroy">nvidia documentation</see>
            </summary>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.GetVersion(System.Int32@)">
            <summary>
            This function returns the version number of the cuBLAS library.
            Complete documentation on <see href="https://docs.nvidia.com/cuda/cublas/index.html#cublasgetversion">nvidia documentation</see>
            </summary>
            <param name="version"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.SetStream(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cudaStream_t)">
            <summary>
            This function sets the cuBLAS library stream, which will be used to execute all subsequent calls to the cuBLAS library functions. If the cuBLAS library stream is not set, all kernels use the defaultNULL stream. In particular, this routine can be used to change the stream between kernel launches and then to reset the cuBLAS library stream back to NULL. 
            Complete documentation on <see href="https://docs.nvidia.com/cuda/cublas/index.html#cublassetstream">nvidia documentation</see>
            </summary>
            <param name="handle"></param>
            <param name="streamId"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.GetStream(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cudaStream_t@)">
            <summary>
            This function gets the cuBLAS library stream, which is being used to execute all calls to the cuBLAS library functions. If the cuBLAS library stream is not set, all kernels use the defaultNULL stream. 
            Complete documentation on <see href="https://docs.nvidia.com/cuda/cublas/index.html#cublasgetstream">nvidia documentation</see>
            </summary>
            <param name="handle"></param>
            <param name="streamId"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.SetPointerMode(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasPointerMode_t)">
            <summary>
            This function sets the pointer mode used by the cuBLAS library. The default is for the values to be passed by reference on the host. Please see the section on the cublasPointerMode_t type for more details. 
            Complete documentation on <see href="https://docs.nvidia.com/cuda/cublas/index.html#cublassetpointermode">nvidia documentation</see>
            </summary>
            <param name="handle"></param>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.GetPointerMode(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasPointerMode_t@)">
            <summary>
            This function obtains the pointer mode used by the cuBLAS library. Please see the section on the cublasPointerMode_t type for more details. 
            Complete documentation on <see href="https://docs.nvidia.com/cuda/cublas/index.html#cublasgetpointermode">nvidia documentation</see>
            </summary>
            <param name="handle"></param>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.SetVector(System.Int32,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.Int32)">
            <summary>
            This function copies n elements from a vector x in host memory space to a vector y in GPU memory space. Elements in both vectors are assumed to have a size of elemSize bytes. The storage spacing between consecutive elements is given by incx for the source vector x and by incy for the destination vector y. 
            Complete documentation on <see href="https://docs.nvidia.com/cuda/cublas/index.html#cublassetvector">nvidia documentation</see>
            </summary>
            <param name="n"></param>
            <param name="elemSize"></param>
            <param name="x"></param>
            <param name="incx"></param>
            <param name="y"></param>
            <param name="incy"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.GetVector(System.Int32,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.Int32)">
            <summary>
            This function copies n elements from a vector x in GPU memory space to a vector y in host memory space. Elements in both vectors are assumed to have a size of elemSize bytes. The storage spacing between consecutive elements is given by incx for the source vector and incy for the destination vector y. 
            Complete documentation on <see href="https://docs.nvidia.com/cuda/cublas/index.html#cublasgetvector">nvidia documentation</see>
            </summary>
            <param name="n"></param>
            <param name="elemSize"></param>
            <param name="x"></param>
            <param name="incx"></param>
            <param name="y"></param>
            <param name="incy"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.GetMatrix(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.Int32)">
            <summary>
            This function copies a tile of rows x cols elements from a matrix A in GPU memory space to a matrix B in host memory space. It is assumed that each element requires storage of elemSize bytes and that both matrices are stored in column-major format, with the leading dimension of the source matrix A and destination matrix B given in lda and ldb, respectively. The leading dimension indicates the number of rows of the allocated matrix, even if only a submatrix of it is being used. In general, A is a device pointer that points to an object, or part of an object, that was allocated in GPU memory space via cublasAlloc(). 
            Complete documentation on <see href="https://docs.nvidia.com/cuda/cublas/index.html#cublasgetmatrix">nvidia documentation</see>
            </summary>
            <param name="rows"></param>
            <param name="cols"></param>
            <param name="elemSize"></param>
            <param name="A"></param>
            <param name="lda"></param>
            <param name="B"></param>
            <param name="ldb"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.SetMatrix(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.Int32)">
            <summary>
            This function copies a tile of rows x cols elements from a matrix A in host memory space to a matrix B in GPU memory space. It is assumed that each element requires storage of elemSize bytes and that both matrices are stored in column-major format, with the leading dimension of the source matrix A and destination matrix B given in lda and ldb, respectively. The leading dimension indicates the number of rows of the allocated matrix, even if only a submatrix of it is being used. In general, B is a device pointer that points to an object, or part of an object, that was allocated in GPU memory space via cublasAlloc(). 
            Complete documentation on <see href="https://docs.nvidia.com/cuda/cublas/index.html#cublassetmatrix">nvidia documentation</see>
            </summary>
            <param name="rows"></param>
            <param name="cols"></param>
            <param name="elemSize"></param>
            <param name="A"></param>
            <param name="lda"></param>
            <param name="B"></param>
            <param name="ldb"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.SetVectorAsync(System.Int32,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.Int32,Hybridizer.Runtime.CUDAImports.cudaStream_t)">
            <summary>
            This function has the same functionality as cublasSetVector(), with the exception that the data transfer is done asynchronously (with respect to the host) using the given CUDA™ stream parameter. 
            Complete documentation on <see href="https://docs.nvidia.com/cuda/cublas/index.html#cublassetvectorasync">nvidia documentation</see>
            </summary>
            <param name="n"></param>
            <param name="elemSize"></param>
            <param name="hostPtr"></param>
            <param name="incx"></param>
            <param name="devicePtr"></param>
            <param name="incy"></param>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.GetVectorAsync(System.Int32,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.Int32,Hybridizer.Runtime.CUDAImports.cudaStream_t)">
            <summary>
             This function has the same functionality as cublasGetVector(), with the exception that the data transfer is done asynchronously (with respect to the host) using the given CUDA™ stream parameter. 
            Complete documentation on <see href="https://docs.nvidia.com/cuda/cublas/index.html#cublasgetvectorasync">nvidia documentation</see>
            </summary>
            <param name="n"></param>
            <param name="elemSize"></param>
            <param name="devicePtr"></param>
            <param name="incx"></param>
            <param name="hostPtr"></param>
            <param name="incy"></param>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.SetMatrixAsync(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.Int32,Hybridizer.Runtime.CUDAImports.cudaStream_t)">
            <summary>
            This function has the same functionality as cublasSetMatrix(), with the exception that the data transfer is done asynchronously (with respect to the host) using the given CUDA™ stream parameter. 
            Complete documentation on <see href="https://docs.nvidia.com/cuda/cublas/index.html#cublassetmatrixasync">nvidia documentation</see>
            </summary>
            <param name="rows"></param>
            <param name="cols"></param>
            <param name="elemSize"></param>
            <param name="A"></param>
            <param name="lda"></param>
            <param name="B"></param>
            <param name="ldb"></param>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.GetMatrixAsync(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.Int32,Hybridizer.Runtime.CUDAImports.cudaStream_t)">
            <summary>
            This function has the same functionality as cublasGetMatrix(), with the exception that the data transfer is done asynchronously (with respect to the host) using the given CUDA™ stream parameter. 
            Complete documentation on <see href="https://docs.nvidia.com/cuda/cublas/index.html#cublasgetmatrixasync">nvidia documentation</see>
            </summary>
            <param name="rows"></param>
            <param name="cols"></param>
            <param name="elemSize"></param>
            <param name="A"></param>
            <param name="lda"></param>
            <param name="B"></param>
            <param name="ldb"></param>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.SetAtomicsMode(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasAtomicsMode_t)">
            <summary>
            Some routines like cublas&lt;t&gt;symv and cublas&lt;t&gt;hemv have an alternate implementation that use atomics to cumulate results. This implementation is generally significantly faster but can generate results that are not strictly identical from one run to the others. Mathematically, those different results are not significant but when debugging those differences can be prejudicial. 
            This function allows or disallows the usage of atomics in the cuBLAS library for all routines which have an alternate implementation. When not explicitly specified in the documentation of any cuBLAS routine, it means that this routine does not have an alternate implementation that use atomics. When atomics mode is disabled, each cuBLAS routine should produce the same results from one run to the other when called with identical parameters on the same Hardware. 
            Complete documentation on <see href="https://docs.nvidia.com/cuda/cublas/index.html#cublassetatomicsmode">nvidia documentation</see>
            </summary>
            <param name="handle"></param>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.GetAtomicsMode(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasAtomicsMode_t@)">
            <summary>
            This function queries the atomic mode of a specific cuBLAS context.
            Complete documentation on <see href="https://docs.nvidia.com/cuda/cublas/index.html#cublasgetatomicsmode">nvidia documentation</see>
            </summary>
            <param name="handle"></param>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Isamax(Hybridizer.Runtime.CUDAImports.cublasHandle_t,System.Int32,System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            This function finds the (smallest) index of the element of the maximum magnitude. 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Idamax(Hybridizer.Runtime.CUDAImports.cublasHandle_t,System.Int32,System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            This function finds the (smallest) index of the element of the maximum magnitude. 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Icamax(Hybridizer.Runtime.CUDAImports.cublasHandle_t,System.Int32,System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            This function finds the (smallest) index of the element of the maximum magnitude. 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Izamax(Hybridizer.Runtime.CUDAImports.cublasHandle_t,System.Int32,System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            This function finds the (smallest) index of the element of the maximum magnitude. 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Isamin(Hybridizer.Runtime.CUDAImports.cublasHandle_t,System.Int32,System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            This function finds the (smallest) index of the element of the minimum magnitude
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Idamin(Hybridizer.Runtime.CUDAImports.cublasHandle_t,System.Int32,System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            This function finds the (smallest) index of the element of the minimum magnitude
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Icamin(Hybridizer.Runtime.CUDAImports.cublasHandle_t,System.Int32,System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            This function finds the (smallest) index of the element of the minimum magnitude
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Izamin(Hybridizer.Runtime.CUDAImports.cublasHandle_t,System.Int32,System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            This function finds the (smallest) index of the element of the minimum magnitude
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Sasum(Hybridizer.Runtime.CUDAImports.cublasHandle_t,System.Int32,System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            This function computes the sum of the absolute values of the elements of vector x
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Dasum(Hybridizer.Runtime.CUDAImports.cublasHandle_t,System.Int32,System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            This function computes the sum of the absolute values of the elements of vector x
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Scasum(Hybridizer.Runtime.CUDAImports.cublasHandle_t,System.Int32,System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            This function computes the sum of the absolute values of the elements of vector x
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Dzasum(Hybridizer.Runtime.CUDAImports.cublasHandle_t,System.Int32,System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            This function computes the sum of the absolute values of the elements of vector x
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Saxpy(Hybridizer.Runtime.CUDAImports.cublasHandle_t,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.Int32)">
            <summary>
            This function multiplies the vector x by the scalar α and adds it to the vector y overwriting the latest vector with the result
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Daxpy(Hybridizer.Runtime.CUDAImports.cublasHandle_t,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.Int32)">
            <summary>
            This function multiplies the vector x by the scalar α and adds it to the vector y overwriting the latest vector with the result
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Caxpy(Hybridizer.Runtime.CUDAImports.cublasHandle_t,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.Int32)">
            <summary>
            This function multiplies the vector x by the scalar α and adds it to the vector y overwriting the latest vector with the result
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Zaxpy(Hybridizer.Runtime.CUDAImports.cublasHandle_t,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.Int32)">
            <summary>
            This function multiplies the vector x by the scalar α and adds it to the vector y overwriting the latest vector with the result
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Scopy(Hybridizer.Runtime.CUDAImports.cublasHandle_t,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.Int32)">
            <summary>
            This function copies the vector x into the vector y.
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Dcopy(Hybridizer.Runtime.CUDAImports.cublasHandle_t,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.Int32)">
            <summary>
            This function copies the vector x into the vector y.
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Ccopy(Hybridizer.Runtime.CUDAImports.cublasHandle_t,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.Int32)">
            <summary>
            This function copies the vector x into the vector y.
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Zcopy(Hybridizer.Runtime.CUDAImports.cublasHandle_t,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.Int32)">
            <summary>
            This function copies the vector x into the vector y.
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Sdot(Hybridizer.Runtime.CUDAImports.cublasHandle_t,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            This function computes the dot product of vectors x and y
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Ddot(Hybridizer.Runtime.CUDAImports.cublasHandle_t,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            This function computes the dot product of vectors x and y
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Cdotu(Hybridizer.Runtime.CUDAImports.cublasHandle_t,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            This function computes the dot product of vectors x and y
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Cdotc(Hybridizer.Runtime.CUDAImports.cublasHandle_t,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            This function computes the dot product of vectors x and y
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Zdotu(Hybridizer.Runtime.CUDAImports.cublasHandle_t,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            This function computes the dot product of vectors x and y
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Zdotc(Hybridizer.Runtime.CUDAImports.cublasHandle_t,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            This function computes the dot product of vectors x and y
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Snrm2(Hybridizer.Runtime.CUDAImports.cublasHandle_t,System.Int32,System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            This function computes the Euclidean norm of the vector x
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Dnrm2(Hybridizer.Runtime.CUDAImports.cublasHandle_t,System.Int32,System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            This function computes the Euclidean norm of the vector x
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Scnrm2(Hybridizer.Runtime.CUDAImports.cublasHandle_t,System.Int32,System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            This function computes the Euclidean norm of the vector x
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Dznrm2(Hybridizer.Runtime.CUDAImports.cublasHandle_t,System.Int32,System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            This function computes the Euclidean norm of the vector x
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Srot(Hybridizer.Runtime.CUDAImports.cublasHandle_t,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            This function applies Givens rotation matrix (c, s; -s, c)
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Drot(Hybridizer.Runtime.CUDAImports.cublasHandle_t,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            This function applies Givens rotation matrix (c, s; -s, c)
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Crot(Hybridizer.Runtime.CUDAImports.cublasHandle_t,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            This function applies Givens rotation matrix (c, s; -s, c)
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Csrot(Hybridizer.Runtime.CUDAImports.cublasHandle_t,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            This function applies Givens rotation matrix (c, s; -s, c)
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Zrot(Hybridizer.Runtime.CUDAImports.cublasHandle_t,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            This function applies Givens rotation matrix (c, s; -s, c)
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Zdrot(Hybridizer.Runtime.CUDAImports.cublasHandle_t,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            This function applies Givens rotation matrix (c, s; -s, c)
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Srotg(Hybridizer.Runtime.CUDAImports.cublasHandle_t,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            This function constructs the Givens rotation matrix (c, s; -s, c)
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Drotg(Hybridizer.Runtime.CUDAImports.cublasHandle_t,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            This function constructs the Givens rotation matrix (c, s; -s, c)
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Crotg(Hybridizer.Runtime.CUDAImports.cublasHandle_t,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            This function constructs the Givens rotation matrix (c, s; -s, c)
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Zrotg(Hybridizer.Runtime.CUDAImports.cublasHandle_t,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            This function constructs the Givens rotation matrix (c, s; -s, c)
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Srotm(Hybridizer.Runtime.CUDAImports.cublasHandle_t,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            This function applies the modified Givens transformation (h11, h12; h21, h22)
            Complete documentation on <see href="https://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-rotm">Nvidia documentation</see>
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Drotm(Hybridizer.Runtime.CUDAImports.cublasHandle_t,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            This function applies the modified Givens transformation (h11, h12; h21, h22)
            Complete documentation on <see href="https://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-rotm">Nvidia documentation</see>
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Srotmg(Hybridizer.Runtime.CUDAImports.cublasHandle_t,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            This function constructs the modified Givens transformation (h11, h12; h21, h22)
            Complete documentation on <see href="https://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-rotmg">Nvidia documentation</see>
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Drotmg(Hybridizer.Runtime.CUDAImports.cublasHandle_t,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            This function constructs the modified Givens transformation (h11, h12; h21, h22)
            Complete documentation on <see href="https://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-rotmg">Nvidia documentation</see>
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Sscal(Hybridizer.Runtime.CUDAImports.cublasHandle_t,System.Int32,System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            This function scales the vector x by the scalar α and overwrites it with the result
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Dscal(Hybridizer.Runtime.CUDAImports.cublasHandle_t,System.Int32,System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            This function scales the vector x by the scalar α and overwrites it with the result
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Cscal(Hybridizer.Runtime.CUDAImports.cublasHandle_t,System.Int32,System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            This function scales the vector x by the scalar α and overwrites it with the result
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Csscal(Hybridizer.Runtime.CUDAImports.cublasHandle_t,System.Int32,System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            This function scales the vector x by the scalar α and overwrites it with the result
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Zscal(Hybridizer.Runtime.CUDAImports.cublasHandle_t,System.Int32,System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            This function scales the vector x by the scalar α and overwrites it with the result
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Zdscal(Hybridizer.Runtime.CUDAImports.cublasHandle_t,System.Int32,System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            This function scales the vector x by the scalar α and overwrites it with the result
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Sswap(Hybridizer.Runtime.CUDAImports.cublasHandle_t,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.Int32)">
            <summary>
            This function interchanges the elements of vector x and y
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Dswap(Hybridizer.Runtime.CUDAImports.cublasHandle_t,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.Int32)">
            <summary>
            This function interchanges the elements of vector x and y
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Cswap(Hybridizer.Runtime.CUDAImports.cublasHandle_t,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.Int32)">
            <summary>
            This function interchanges the elements of vector x and y
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Zswap(Hybridizer.Runtime.CUDAImports.cublasHandle_t,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.Int32)">
            <summary>
            This function interchanges the elements of vector x and y
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Sgbmv(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasOperation_t,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            This function performs the banded matrix-vector multiplication y = α op(A ) x + β y
            Complete documentation on <see href="https://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-gbmv">Nvidia documentation</see>
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Dgbmv(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasOperation_t,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            This function performs the banded matrix-vector multiplication y = α op(A ) x + β y
            Complete documentation on <see href="https://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-gbmv">Nvidia documentation</see>
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Cgbmv(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasOperation_t,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            This function performs the banded matrix-vector multiplication y = α op(A ) x + β y
            Complete documentation on <see href="https://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-gbmv">Nvidia documentation</see>
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Zgbmv(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasOperation_t,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            This function performs the banded matrix-vector multiplication y = α op(A ) x + β y
            Complete documentation on <see href="https://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-gbmv">Nvidia documentation</see>
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Sgemv(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasOperation_t,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            This function performs the matrix-vector multiplication y = α op(A ) x + β y
            Complete documentation on <see href="https://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-gemv">Nvidia documentation</see>
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Dgemv(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasOperation_t,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            This function performs the matrix-vector multiplication y = α op(A ) x + β y
            Complete documentation on <see href="https://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-gemv">Nvidia documentation</see>
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Cgemv(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasOperation_t,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            This function performs the matrix-vector multiplication y = α op(A ) x + β y
            Complete documentation on <see href="https://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-gemv">Nvidia documentation</see>
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Zgemv(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasOperation_t,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            This function performs the matrix-vector multiplication y = α op(A ) x + β y
            Complete documentation on <see href="https://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-gemv">Nvidia documentation</see>
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Sger(Hybridizer.Runtime.CUDAImports.cublasHandle_t,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.Int32)">
            <summary>
            This function performs the rank-1 update A =  α x y^T + A if ger(),geru() is called  or  α x y^H + A if gerc() is called 
            Complete documentation on <see href="https://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-ger">Nvidia documentation</see>
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Dger(Hybridizer.Runtime.CUDAImports.cublasHandle_t,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.Int32)">
            <summary>
            This function performs the rank-1 update A =  α x y^T + A if ger(),geru() is called  or  α x y^H + A if gerc() is called 
            Complete documentation on <see href="https://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-ger">Nvidia documentation</see>
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Cgeru(Hybridizer.Runtime.CUDAImports.cublasHandle_t,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.Int32)">
            <summary>
            This function performs the rank-1 update A =  α x y^T + A if ger(),geru() is called  or  α x y^H + A if gerc() is called 
            Complete documentation on <see href="https://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-ger">Nvidia documentation</see>
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Cgerc(Hybridizer.Runtime.CUDAImports.cublasHandle_t,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.Int32)">
            <summary>
            This function performs the rank-1 update A =  α x y^T + A if ger(),geru() is called  or  α x y^H + A if gerc() is called 
            Complete documentation on <see href="https://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-ger">Nvidia documentation</see>
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Zgeru(Hybridizer.Runtime.CUDAImports.cublasHandle_t,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.Int32)">
            <summary>
            This function performs the rank-1 update A =  α x y^T + A if ger(),geru() is called  or  α x y^H + A if gerc() is called 
            Complete documentation on <see href="https://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-ger">Nvidia documentation</see>
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Zgerc(Hybridizer.Runtime.CUDAImports.cublasHandle_t,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.Int32)">
            <summary>
            This function performs the rank-1 update A =  α x y^T + A if ger(),geru() is called  or  α x y^H + A if gerc() is called 
            Complete documentation on <see href="https://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-ger">Nvidia documentation</see>
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Ssbmv(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasFillMode_t,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            This function performs the symmetric banded matrix-vector multiplication
            Complete documentation on <see href="https://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-sbmv">Nvidia documentation</see>
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Dsbmv(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasFillMode_t,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            This function performs the symmetric banded matrix-vector multiplication
            Complete documentation on <see href="https://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-sbmv">Nvidia documentation</see>
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Sspmv(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasFillMode_t,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            This function performs the symmetric packed matrix-vector multiplication y = α A x + β y
            Complete documentation on <see href="https://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-spmv">Nvidia documentation</see>
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Dspmv(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasFillMode_t,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            This function performs the symmetric packed matrix-vector multiplication y = α A x + β y
            Complete documentation on <see href="https://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-spmv">Nvidia documentation</see>
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Sspr(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasFillMode_t,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            This function performs the packed symmetric rank-1 update A = α x x^T + A
            Complete documentation on <see href="https://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-spr">Nvidia documentation</see>
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Dspr(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasFillMode_t,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            This function performs the packed symmetric rank-1 update A = α x x^T + A
            Complete documentation on <see href="https://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-spr">Nvidia documentation</see>
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Sspr2(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasFillMode_t,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            This function performs the packed symmetric rank-2 update A = α(x y^T + y x^T) + A
            Complete documentation on <see href="https://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-spr2">Nvidia documentation</see>
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Dspr2(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasFillMode_t,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            This function performs the packed symmetric rank-2 update A = α(x y^T + y x^T) + A
            Complete documentation on <see href="https://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-spr2">Nvidia documentation</see>
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Ssymv(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasFillMode_t,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            This function performs the symmetric matrix-vector multiplication. y = α A x + β y
            Complete documentation on <see href="https://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-symv">Nvidia documentation</see>
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Dsymv(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasFillMode_t,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            This function performs the symmetric matrix-vector multiplication. y = α A x + β y
            Complete documentation on <see href="https://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-symv">Nvidia documentation</see>
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Csymv(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasFillMode_t,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            This function performs the symmetric matrix-vector multiplication. y = α A x + β y
            Complete documentation on <see href="https://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-symv">Nvidia documentation</see>
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Zsymv(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasFillMode_t,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            This function performs the symmetric matrix-vector multiplication. y = α A x + β y
            Complete documentation on <see href="https://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-symv">Nvidia documentation</see>
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Ssyr(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasFillMode_t,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.Int32)">
            <summary>
            This function performs the symmetric rank-1 update A = α x x<sup>T</sup> + A
            Complete documentation on <see href="https://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-syr">Nvidia documentation</see>
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Dsyr(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasFillMode_t,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.Int32)">
            <summary>
            This function performs the symmetric rank-1 update A = α x x<sup>T</sup> + A
            Complete documentation on <see href="https://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-syr">Nvidia documentation</see>
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Csyr(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasFillMode_t,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.Int32)">
            <summary>
            This function performs the symmetric rank-1 update A = α x x<sup>T</sup> + A
            Complete documentation on <see href="https://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-syr">Nvidia documentation</see>
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Zsyr(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasFillMode_t,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.Int32)">
            <summary>
            This function performs the symmetric rank-1 update A = α x x<sup>T</sup> + A
            Complete documentation on <see href="https://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-syr">Nvidia documentation</see>
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Ssyr2(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasFillMode_t,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.Int32)">
            <summary>
            This function performs the symmetric rank-2 update A = α (x y<sup>T</sup> + y x <sup>T</sup>) + A
            Complete documentation on <see href="https://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-syr2">Nvidia documentation</see>
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Dsyr2(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasFillMode_t,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.Int32)">
            <summary>
            This function performs the symmetric rank-2 update A = α (x y<sup>T</sup> + y x <sup>T</sup>) + A
            Complete documentation on <see href="https://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-syr2">Nvidia documentation</see>
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Csyr2(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasFillMode_t,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.Int32)">
            <summary>
            This function performs the symmetric rank-2 update A = α (x y<sup>T</sup> + y x <sup>T</sup>) + A
            Complete documentation on <see href="https://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-syr2">Nvidia documentation</see>
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Zsyr2(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasFillMode_t,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.Int32)">
            <summary>
            This function performs the symmetric rank-2 update A = α (x y<sup>T</sup> + y x <sup>T</sup>) + A
            Complete documentation on <see href="https://docs.nvidia.com/cuda/cublas/index.html#cublas-lt-t-gt-syr2">Nvidia documentation</see>
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Stbmv(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasFillMode_t,Hybridizer.Runtime.CUDAImports.cublasOperation_t,Hybridizer.Runtime.CUDAImports.cublasDiagType_t,System.Int32,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.Int32)">
            <summary>
            This function performs the triangular banded matrix-vector multiplication x = op(A) x
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Dtbmv(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasFillMode_t,Hybridizer.Runtime.CUDAImports.cublasOperation_t,Hybridizer.Runtime.CUDAImports.cublasDiagType_t,System.Int32,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.Int32)">
            <summary>
            This function performs the triangular banded matrix-vector multiplication x = op(A) x
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Ctbmv(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasFillMode_t,Hybridizer.Runtime.CUDAImports.cublasOperation_t,Hybridizer.Runtime.CUDAImports.cublasDiagType_t,System.Int32,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.Int32)">
            <summary>
            This function performs the triangular banded matrix-vector multiplication x = op(A) x
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Ztbmv(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasFillMode_t,Hybridizer.Runtime.CUDAImports.cublasOperation_t,Hybridizer.Runtime.CUDAImports.cublasDiagType_t,System.Int32,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.Int32)">
            <summary>
            This function performs the triangular banded matrix-vector multiplication x = op(A) x
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Stbsv(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasFillMode_t,Hybridizer.Runtime.CUDAImports.cublasOperation_t,Hybridizer.Runtime.CUDAImports.cublasDiagType_t,System.Int32,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.Int32)">
            <summary>
            This function solves the triangular banded linear system with a single right-hand-side op(A) x = b
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Dtbsv(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasFillMode_t,Hybridizer.Runtime.CUDAImports.cublasOperation_t,Hybridizer.Runtime.CUDAImports.cublasDiagType_t,System.Int32,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.Int32)">
            <summary>
            This function solves the triangular banded linear system with a single right-hand-side op(A) x = b
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Ctbsv(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasFillMode_t,Hybridizer.Runtime.CUDAImports.cublasOperation_t,Hybridizer.Runtime.CUDAImports.cublasDiagType_t,System.Int32,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.Int32)">
            <summary>
            This function solves the triangular banded linear system with a single right-hand-side op(A) x = b
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Ztbsv(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasFillMode_t,Hybridizer.Runtime.CUDAImports.cublasOperation_t,Hybridizer.Runtime.CUDAImports.cublasDiagType_t,System.Int32,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.Int32)">
            <summary>
            This function solves the triangular banded linear system with a single right-hand-side op(A) x = b
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Stpmv(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasFillMode_t,Hybridizer.Runtime.CUDAImports.cublasOperation_t,Hybridizer.Runtime.CUDAImports.cublasDiagType_t,System.Int32,System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            This function performs the triangular packed matrix-vector multiplication x = op (A) x 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Dtpmv(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasFillMode_t,Hybridizer.Runtime.CUDAImports.cublasOperation_t,Hybridizer.Runtime.CUDAImports.cublasDiagType_t,System.Int32,System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            This function performs the triangular packed matrix-vector multiplication x = op (A) x 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Ctpmv(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasFillMode_t,Hybridizer.Runtime.CUDAImports.cublasOperation_t,Hybridizer.Runtime.CUDAImports.cublasDiagType_t,System.Int32,System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            This function performs the triangular packed matrix-vector multiplication x = op (A) x 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Ztpmv(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasFillMode_t,Hybridizer.Runtime.CUDAImports.cublasOperation_t,Hybridizer.Runtime.CUDAImports.cublasDiagType_t,System.Int32,System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            This function performs the triangular packed matrix-vector multiplication x = op (A) x 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Stpsv(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasFillMode_t,Hybridizer.Runtime.CUDAImports.cublasOperation_t,Hybridizer.Runtime.CUDAImports.cublasDiagType_t,System.Int32,System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            This function solves the packed triangular linear system with a single right-hand-side op(A) x = b
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Dtpsv(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasFillMode_t,Hybridizer.Runtime.CUDAImports.cublasOperation_t,Hybridizer.Runtime.CUDAImports.cublasDiagType_t,System.Int32,System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            This function solves the packed triangular linear system with a single right-hand-side op(A) x = b
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Ctpsv(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasFillMode_t,Hybridizer.Runtime.CUDAImports.cublasOperation_t,Hybridizer.Runtime.CUDAImports.cublasDiagType_t,System.Int32,System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            This function solves the packed triangular linear system with a single right-hand-side op(A) x = b
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Ztpsv(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasFillMode_t,Hybridizer.Runtime.CUDAImports.cublasOperation_t,Hybridizer.Runtime.CUDAImports.cublasDiagType_t,System.Int32,System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            This function solves the packed triangular linear system with a single right-hand-side op(A) x = b
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Strmv(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasFillMode_t,Hybridizer.Runtime.CUDAImports.cublasOperation_t,Hybridizer.Runtime.CUDAImports.cublasDiagType_t,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.Int32)">
            <summary>
            This function performs the triangular matrix-vector multiplication x = op(A) x
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Dtrmv(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasFillMode_t,Hybridizer.Runtime.CUDAImports.cublasOperation_t,Hybridizer.Runtime.CUDAImports.cublasDiagType_t,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.Int32)">
            <summary>
            This function performs the triangular matrix-vector multiplication x = op(A) x
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Ctrmv(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasFillMode_t,Hybridizer.Runtime.CUDAImports.cublasOperation_t,Hybridizer.Runtime.CUDAImports.cublasDiagType_t,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.Int32)">
            <summary>
            This function performs the triangular matrix-vector multiplication x = op(A) x
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Ztrmv(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasFillMode_t,Hybridizer.Runtime.CUDAImports.cublasOperation_t,Hybridizer.Runtime.CUDAImports.cublasDiagType_t,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.Int32)">
            <summary>
            This function performs the triangular matrix-vector multiplication x = op(A) x
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Strsv(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasFillMode_t,Hybridizer.Runtime.CUDAImports.cublasOperation_t,Hybridizer.Runtime.CUDAImports.cublasDiagType_t,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.Int32)">
            <summary>
            This function solves the triangular linear system with a single right-hand-side op(A) x = b
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Dtrsv(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasFillMode_t,Hybridizer.Runtime.CUDAImports.cublasOperation_t,Hybridizer.Runtime.CUDAImports.cublasDiagType_t,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.Int32)">
            <summary>
            This function solves the triangular linear system with a single right-hand-side op(A) x = b
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Ctrsv(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasFillMode_t,Hybridizer.Runtime.CUDAImports.cublasOperation_t,Hybridizer.Runtime.CUDAImports.cublasDiagType_t,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.Int32)">
            <summary>
            This function solves the triangular linear system with a single right-hand-side op(A) x = b
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Ztrsv(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasFillMode_t,Hybridizer.Runtime.CUDAImports.cublasOperation_t,Hybridizer.Runtime.CUDAImports.cublasDiagType_t,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.Int32)">
            <summary>
            This function solves the triangular linear system with a single right-hand-side op(A) x = b
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Chemv(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasFillMode_t,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            This function performs the Hermitian matrix-vector multiplication y = α A x + β y
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Zhemv(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasFillMode_t,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            This function performs the Hermitian matrix-vector multiplication y = α A x + β y
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Chbmv(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasFillMode_t,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            This function performs the Hermitian banded matrix-vector multiplication y = α A x + β y
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Zhbmv(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasFillMode_t,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            This function performs the Hermitian banded matrix-vector multiplication y = α A x + β y
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Chpmv(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasFillMode_t,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            This function performs the Hermitian packed matrix-vector multiplication y = α A x + β y
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Zhpmv(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasFillMode_t,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            This function performs the Hermitian packed matrix-vector multiplication y = α A x + β y
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Cher(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasFillMode_t,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.Int32)">
            <summary>
            This function performs the Hermitian rank-1 update A = α x x<sup>H</sup> + A
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Zher(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasFillMode_t,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.Int32)">
            <summary>
            This function performs the Hermitian rank-1 update A = α x x<sup>H</sup> + A
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Cher2(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasFillMode_t,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.Int32)">
            <summary>
            This function performs the Hermitian rank-2 update A = α x y<sup>H</sup> + conj(α) y x <sup>H</sup> + A
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Zher2(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasFillMode_t,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.Int32)">
            <summary>
            This function performs the Hermitian rank-2 update A = α x y<sup>H</sup> + conj(α) y x <sup>H</sup> + A
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Chpr(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasFillMode_t,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            This function performs the packed Hermitian rank-1 update A = α x x<sup>H</sup> + A
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Zhpr(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasFillMode_t,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            This function performs the packed Hermitian rank-1 update A = α x x<sup>H</sup> + A
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Chpr2(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasFillMode_t,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            This function performs the packed Hermitian rank-2 update A = α x y<sup>H</sup> + conj(α) y x <sup>H</sup> + A
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Zhpr2(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasFillMode_t,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            This function performs the packed Hermitian rank-2 update A = α x y<sup>H</sup> + conj(α) y x <sup>H</sup> + A
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Sgemm(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasOperation_t,Hybridizer.Runtime.CUDAImports.cublasOperation_t,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            This function performs the matrix-matrix multiplication C = α op(A ) op(B ) + β C
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Dgemm(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasOperation_t,Hybridizer.Runtime.CUDAImports.cublasOperation_t,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            This function performs the matrix-matrix multiplication C = α op(A ) op(B ) + β C
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Cgemm(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasOperation_t,Hybridizer.Runtime.CUDAImports.cublasOperation_t,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            This function performs the matrix-matrix multiplication C = α op(A ) op(B ) + β C
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Zgemm(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasOperation_t,Hybridizer.Runtime.CUDAImports.cublasOperation_t,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            This function performs the matrix-matrix multiplication C = α op(A ) op(B ) + β C
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Ssymm(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasSideMode_t,Hybridizer.Runtime.CUDAImports.cublasFillMode_t,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            This function performs the symmetric matrix-matrix multiplication C =  α A B + β C if  side == CUBLAS_SIDE_LEFT ;  α B A + β C if  side == CUBLAS_SIDE_RIGHT 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Dsymm(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasSideMode_t,Hybridizer.Runtime.CUDAImports.cublasFillMode_t,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            This function performs the symmetric matrix-matrix multiplication C =  α A B + β C if  side == CUBLAS_SIDE_LEFT ;  α B A + β C if  side == CUBLAS_SIDE_RIGHT 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Csymm(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasSideMode_t,Hybridizer.Runtime.CUDAImports.cublasFillMode_t,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            This function performs the symmetric matrix-matrix multiplication C =  α A B + β C if  side == CUBLAS_SIDE_LEFT ;  α B A + β C if  side == CUBLAS_SIDE_RIGHT 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Zsymm(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasSideMode_t,Hybridizer.Runtime.CUDAImports.cublasFillMode_t,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            This function performs the symmetric matrix-matrix multiplication C =  α A B + β C if  side == CUBLAS_SIDE_LEFT ;  α B A + β C if  side == CUBLAS_SIDE_RIGHT 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Ssyrk(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasFillMode_t,Hybridizer.Runtime.CUDAImports.cublasOperation_t,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            This function performs the symmetric rank- k update C = α op(A ) op(A )<sup>T</sup> + β C
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Dsyrk(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasFillMode_t,Hybridizer.Runtime.CUDAImports.cublasOperation_t,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            This function performs the symmetric rank- k update C = α op(A ) op(A )<sup>T</sup> + β C
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Csyrk(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasFillMode_t,Hybridizer.Runtime.CUDAImports.cublasOperation_t,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            This function performs the symmetric rank- k update C = α op(A ) op(A )<sup>T</sup> + β C
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Zsyrk(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasFillMode_t,Hybridizer.Runtime.CUDAImports.cublasOperation_t,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            This function performs the symmetric rank- k update C = α op(A ) op(A )<sup>T</sup> + β C
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Ssyr2k(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasFillMode_t,Hybridizer.Runtime.CUDAImports.cublasOperation_t,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            This function performs the symmetric rank- 2 k update  C = α ( op ( A ) op ( B )<sup>T</sup> + op ( B ) op ( A )<sup>T</sup> ) + β C 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Dsyr2k(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasFillMode_t,Hybridizer.Runtime.CUDAImports.cublasOperation_t,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            This function performs the symmetric rank- 2 k update  C = α ( op ( A ) op ( B )<sup>T</sup> + op ( B ) op ( A )<sup>T</sup> ) + β C 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Csyr2k(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasFillMode_t,Hybridizer.Runtime.CUDAImports.cublasOperation_t,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            This function performs the symmetric rank- 2 k update  C = α ( op ( A ) op ( B )<sup>T</sup> + op ( B ) op ( A )<sup>T</sup> ) + β C 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Zsyr2k(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasFillMode_t,Hybridizer.Runtime.CUDAImports.cublasOperation_t,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            This function performs the symmetric rank- 2 k update  C = α ( op ( A ) op ( B )<sup>T</sup> + op ( B ) op ( A )<sup>T</sup> ) + β C 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Strmm(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasSideMode_t,Hybridizer.Runtime.CUDAImports.cublasFillMode_t,Hybridizer.Runtime.CUDAImports.cublasOperation_t,Hybridizer.Runtime.CUDAImports.cublasDiagType_t,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.Int32)">
            <summary>
            This function performs the triangular matrix-matrix multiplication C =  α op ( A ) B if  side == CUBLAS_SIDE_LEFT  ;  α B op ( A ) if  side == CUBLAS_SIDE_RIGHT 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Dtrmm(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasSideMode_t,Hybridizer.Runtime.CUDAImports.cublasFillMode_t,Hybridizer.Runtime.CUDAImports.cublasOperation_t,Hybridizer.Runtime.CUDAImports.cublasDiagType_t,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.Int32)">
            <summary>
            This function performs the triangular matrix-matrix multiplication C =  α op ( A ) B if  side == CUBLAS_SIDE_LEFT  ;  α B op ( A ) if  side == CUBLAS_SIDE_RIGHT 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Ctrmm(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasSideMode_t,Hybridizer.Runtime.CUDAImports.cublasFillMode_t,Hybridizer.Runtime.CUDAImports.cublasOperation_t,Hybridizer.Runtime.CUDAImports.cublasDiagType_t,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.Int32)">
            <summary>
            This function performs the triangular matrix-matrix multiplication C =  α op ( A ) B if  side == CUBLAS_SIDE_LEFT  ;  α B op ( A ) if  side == CUBLAS_SIDE_RIGHT 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Ztrmm(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasSideMode_t,Hybridizer.Runtime.CUDAImports.cublasFillMode_t,Hybridizer.Runtime.CUDAImports.cublasOperation_t,Hybridizer.Runtime.CUDAImports.cublasDiagType_t,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.Int32)">
            <summary>
            This function performs the triangular matrix-matrix multiplication C =  α op ( A ) B if  side == CUBLAS_SIDE_LEFT  ;  α B op ( A ) if  side == CUBLAS_SIDE_RIGHT 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Strsm(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasSideMode_t,Hybridizer.Runtime.CUDAImports.cublasFillMode_t,Hybridizer.Runtime.CUDAImports.cublasOperation_t,Hybridizer.Runtime.CUDAImports.cublasDiagType_t,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.Int32)">
            <summary>
            This function solves the triangular linear system with multiple right-hand-sides :  op ( A ) X = α B if  side == CUBLAS_SIDE_LEFT ;  X op ( A ) = α B if  side == CUBLAS_SIDE_RIGHT 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Dtrsm(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasSideMode_t,Hybridizer.Runtime.CUDAImports.cublasFillMode_t,Hybridizer.Runtime.CUDAImports.cublasOperation_t,Hybridizer.Runtime.CUDAImports.cublasDiagType_t,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.Int32)">
            <summary>
            This function solves the triangular linear system with multiple right-hand-sides :  op ( A ) X = α B if  side == CUBLAS_SIDE_LEFT ;  X op ( A ) = α B if  side == CUBLAS_SIDE_RIGHT 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Ctrsm(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasSideMode_t,Hybridizer.Runtime.CUDAImports.cublasFillMode_t,Hybridizer.Runtime.CUDAImports.cublasOperation_t,Hybridizer.Runtime.CUDAImports.cublasDiagType_t,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.Int32)">
            <summary>
            This function solves the triangular linear system with multiple right-hand-sides :  op ( A ) X = α B if  side == CUBLAS_SIDE_LEFT ;  X op ( A ) = α B if  side == CUBLAS_SIDE_RIGHT 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Ztrsm(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasSideMode_t,Hybridizer.Runtime.CUDAImports.cublasFillMode_t,Hybridizer.Runtime.CUDAImports.cublasOperation_t,Hybridizer.Runtime.CUDAImports.cublasDiagType_t,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.Int32)">
            <summary>
            This function solves the triangular linear system with multiple right-hand-sides :  op ( A ) X = α B if  side == CUBLAS_SIDE_LEFT ;  X op ( A ) = α B if  side == CUBLAS_SIDE_RIGHT 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Chemm(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasSideMode_t,Hybridizer.Runtime.CUDAImports.cublasFillMode_t,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            This function performs the Hermitian matrix-matrix multiplication : C =  α A B + β C if  side == CUBLAS_SIDE_LEFT ;  α B A + β C if  side == CUBLAS_SIDE_RIGHT 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Zhemm(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasSideMode_t,Hybridizer.Runtime.CUDAImports.cublasFillMode_t,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            This function performs the Hermitian matrix-matrix multiplication : C =  α A B + β C if  side == CUBLAS_SIDE_LEFT ;  α B A + β C if  side == CUBLAS_SIDE_RIGHT 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Cherk(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasFillMode_t,Hybridizer.Runtime.CUDAImports.cublasOperation_t,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            This function performs the Hermitian rank-k update : C = α op ( A ) op ( A ) H + β C
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Zherk(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasFillMode_t,Hybridizer.Runtime.CUDAImports.cublasOperation_t,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            This function performs the Hermitian rank-k update : C = α op ( A ) op ( A ) H + β C
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Cher2k(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasFillMode_t,Hybridizer.Runtime.CUDAImports.cublasOperation_t,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            This function performs the Hermitian rank-2 k update  C = α op ( A ) op ( B )<sup>H</sup> + conj(α) op ( B ) op ( A )<sup>H</sup> + β C 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cublas.Zher2k(Hybridizer.Runtime.CUDAImports.cublasHandle_t,Hybridizer.Runtime.CUDAImports.cublasFillMode_t,Hybridizer.Runtime.CUDAImports.cublasOperation_t,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            This function performs the Hermitian rank-2 k update  C = α op ( A ) op ( B )<sup>H</sup> + conj(α) op ( B ) op ( A )<sup>H</sup> + β C 
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cudaDeviceProp">
            <summary>
            CUDA device properties
            Complete documentation <see href="https://docs.nvidia.com/cuda/cuda-runtime-api/structcudaDeviceProp.html">here</see>
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceProp.name">
            <summary>
            ASCII string identifying device
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceProp.uuid">
            <summary>
            16-byte unique identifier
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceProp.luid">
            <summary>
            8-byte locally unique identifier. Value is undefined on TCC and non-Windows platforms
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceProp.luidDeviceNodeMask">
            <summary>
            LUID device node mask. Value is undefined on TCC and non-Windows platforms
            </summary>                
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceProp.totalGlobalMem">
            <summary>
            Global memory available on device in bytes
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceProp.sharedMemPerBlock">
            <summary>
            Shared memory available per block in bytes
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceProp.regsPerBlock">
            <summary>
            32-bit registers available per block
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceProp.warpSize">
            <summary>
            Warp size in threads
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceProp.memPitch">
            <summary>
            Maximum pitch in bytes allowed by memory copies
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceProp.maxThreadsPerBlock">
            <summary>
            Maximum number of threads per block
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceProp.maxThreadsDim">
            <summary>
            Maximum size of each dimension of a block
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceProp.maxGridSize">
            <summary>
            Maximum size of each dimension of a grid
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceProp.clockRate">
            <summary>
            Clock frequency in kilohertz
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceProp.totalConstMem">
            <summary>
            Constant memory available on device in bytes
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceProp.major">
            <summary>
            Major compute capability
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceProp.minor">
            <summary>
            Minor compute capability
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceProp.textureAlignment">
            <summary>
            Alignment requirement for textures
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceProp.texturePitchAlignment">
            <summary>
            Pitch alignment requirement for texture references bound to pitched memory
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceProp.deviceOverlap">
            <summary>
            Device can concurrently copy memory and execute a kernel
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceProp.multiProcessorCount">
            <summary>
            Number of multiprocessors on device
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceProp.kernelExecTimeoutEnabled">
            <summary>
            Specified whether there is a run time limit on kernels
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceProp.integrated">
            <summary>
            Device is integrated as opposed to discrete
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceProp.canMapHostMemory">
            <summary>
            Device can map host memory with cudaHostAlloc/cudaHostGetDevicePointer
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceProp.computeMode">
            <summary>
            Compute mode (See ::cudaComputeMode)
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceProp.maxTexture1D">
            <summary>
            Maximum 1D texture size
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceProp.maxTexture1DLinear">
            <summary>
            Maximum size for 1D textures bound to linear memory
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceProp.maxTexture2D">
            <summary>
            Maximum 2D texture dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceProp.maxTexture2DLinear">
            <summary>
            Maximum 2D texture dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceProp.maxTexture2DGather">
            <summary>
            Maximum 2D texture dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceProp.maxTexture3D">
            <summary>
            Maximum 3D texture dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceProp.maxTextureCubemap">
            <summary>
            Maximum Cubemap texture dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceProp.maxTexture1DLayered">
            <summary>
            Maximum 1D layered texture dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceProp.maxTexture2DLayered">
            <summary>
            Maximum 2D layered texture dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceProp.maxTextureCubemapLayered">
            <summary>
            Maximum Cubemap layered texture dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceProp.maxSurface1D">
            <summary>
            Maximum 1D surface size
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceProp.maxSurface2D">
            <summary>
            Maximum 2D surface size
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceProp.maxSurface3D">
            <summary>
            Maximum 3D surface size
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceProp.maxSurface1DLayered">
            <summary>
            Maximum 1D layered surface size
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceProp.maxSurface2DLayered">
            <summary>
            Maximum 2D layered surface size
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceProp.maxSurfaceCubemap">
            <summary>
            Maximum
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceProp.maxSurfaceCubemapLayered">
            <summary>
            Maximum
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceProp.surfaceAlignment">
            <summary>
            Alignment requirements for surfaces
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceProp.concurrentKernels">
            <summary>
            Device can possibly execute multiple kernels concurrently
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceProp.ECCEnabled">
            <summary>
            Device has ECC support enabled
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceProp.pciBusID">
            <summary>
            PCI bus ID of the device
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceProp.pciDeviceID">
            <summary>
            PCI device ID of the device
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceProp.pciDomainID">
            <summary>
            PCI domain ID of the device
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceProp.tccDriver">
            <summary>
            1 if device is a Tesla device using TCC driver, 0 otherwise
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceProp.asyncEngineCount">
            <summary>
            Number of asynchronous engines
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceProp.unifiedAddressing">
            <summary>
            Device shares a unified address space with the host
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceProp.memoryClockRate">
            <summary>
            Peak memory clock frequency in kilohertz
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceProp.memoryBusWidth">
            <summary>
            Global memory bus width in bits
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceProp.l2CacheSize">
            <summary>
            Size of L2 cache in bytes
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceProp.maxThreadsPerMultiProcessor">
            <summary>
            Maximum resident threads per multiprocessor
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceProp.streamPrioritiesSupported">
            <summary>
            Device supports stream priorities
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceProp.globalL1CacheSupported">
            <summary>
            Device supports caching globals in L1
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceProp.localL1CacheSupported">
            <summary>
            Device supports caching locals in L1
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceProp.sharedMemPerMultiprocessor">
            <summary>
            Shared memory available per multiprocessor in bytes
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceProp.regsPerMultiprocessor">
            <summary>
            32-bit registers available per multiprocessor
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceProp.managedMemory">
            <summary>
            Device supports allocating managed memory on this system
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceProp.isMultiGpuBoard">
            <summary>
            Device is on a multi-GPU board
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceProp.multiGpuBoardGroupID">
            <summary>
            Unique identifier for a group of devices on the same multi-GPU board
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceProp.hostNativeAtomicSupported">
            8.0
            <summary>
            Link between the device and the host supports native atomic operations
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceProp.singleToDoublePrecisionPerfRatio">
            <summary>
            Ratio of single precision performance (in floating-point operations per second) to double precision performance
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceProp.pageableMemoryAccess">
            <summary>
            Device supports coherently accessing pageable memory without calling cudaHostRegister on it
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceProp.concurrentManagedAccess">
            <summary>
            Device can coherently access managed memory concurrently with the CPU
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceProp.computePreemptionSupported">
            9.0 - 9.1
            <summary>
            Device supports Compute Preemption
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceProp.canUseHostPointerForRegisteredMem">
            <summary>
            Device can access host registered memory at the same virtual address as the CPU
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceProp.cooperativeLaunch">
            <summary>
            Device supports launching cooperative kernels via ::cudaLaunchCooperativeKernel
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceProp.cooperativeMultiDeviceLaunch">
            <summary>
            Device can participate in cooperative kernels launched via ::cudaLaunchCooperativeKernelMultiDevice
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceProp.sharedMemPerBlockOptin">
            <summary>
            Per device maximum shared memory per block usable by special opt in
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceProp.pageableMemoryAccessUsesHostPageTables">
            <summary>
            Device accesses pageable memory via the host's page tables
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceProp.directManagedMemAccessFromHost">
            <summary>
            Host can directly access managed memory on the device without migration.
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.deviceFlags">
            <summary>
            CUDA device flags
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.deviceFlags.cudaDeviceScheduleAuto">
            <summary>
            Automatic scheduling
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.deviceFlags.cudaDeviceScheduleSpin">
            <summary>
            Spin default scheduling
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.deviceFlags.cudaDeviceScheduleYield">
            <summary>
            Yield default scheduling
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.deviceFlags.cudaDeviceScheduleBlockingSync">
            <summary>
            Use blocking synchronization
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.deviceFlags.cudaDeviceBlockingSync">
            <summary>
            Use blocking synchronization deprecated This flag was deprecated as of CUDA 4.0 and replaced with <see cref="F:Hybridizer.Runtime.CUDAImports.deviceFlags.cudaDeviceScheduleBlockingSync"></see>
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.deviceFlags.cudaDeviceScheduleMask">
            <summary>
            Device schedule flags mask
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.deviceFlags.cudaDeviceMapHost">
            <summary>
            Support mapped pinned allocations
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.deviceFlags.cudaDeviceLmemResizeToMax">
            <summary>
            Keep local memory allocation after launch
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.deviceFlags.cudaDeviceMask">
            <summary>
            Device flags mask
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cudaGraphicsRegisterFlags">
            <summary>
            CUDA Graphics register flags
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaGraphicsRegisterFlags.None">
            <summary>
            Default
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaGraphicsRegisterFlags.ReadOnly">
            <summary>
            CUDA will not write to this resource
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaGraphicsRegisterFlags.WriteDiscard">
            <summary>
            CUDA will only write to and will not read from this resource
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaGraphicsRegisterFlags.SurfaceLoadStore">
            <summary>
            CUDA will bind this resource to a surface reference
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaGraphicsRegisterFlags.TextureGather">
            <summary>
            CUDA will perform texture gather operations on this resource
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.GL_TEXTURE_MODE">
            <summary>
            texture modes for opengl
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.GL_TEXTURE_MODE.GL_TEXTURE_2D">
            <summary>
            2D texture
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cudaLimit">
            <summary>
            CUDA Limits
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaLimit.cudaLimitStackSize">
            <summary>
            GPU thread stack size
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaLimit.cudaLimitPrintfFifoSize">
            <summary>
            GPU printf/fprintf FIFO size
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaLimit.cudaLimitMallocHeapSize">
            <summary>
            GPU malloc heap size
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaLimit.cudaLimitDevRuntimeSyncDepth">
            <summary>
            GPU device runtime synchronize depth
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaLimit.cudaLimitDevRuntimePendingLaunchCount">
            <summary>
            GPU device runtime pending launch count
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaLimit.cudaLimitMaxL2FetchGranularity">
            <summary>
            A value between 0 and 128 that indicates the maximum fetch granularity of L2 (in Bytes). This is a hint
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cudaDeviceAttr">
            <summary>
            CUDA device attributes
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceAttr.cudaDevAttrMaxThreadsPerBlock">
            <summary>
             Maximum number of threads per block 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceAttr.cudaDevAttrMaxBlockDimX">
            <summary>
             Maximum block dimension X 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceAttr.cudaDevAttrMaxBlockDimY">
            <summary>
             Maximum block dimension Y 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceAttr.cudaDevAttrMaxBlockDimZ">
            <summary>
             Maximum block dimension Z 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceAttr.cudaDevAttrMaxGridDimX">
            <summary>
             Maximum grid dimension X 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceAttr.cudaDevAttrMaxGridDimY">
            <summary>
             Maximum grid dimension Y 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceAttr.cudaDevAttrMaxGridDimZ">
            <summary>
                     Maximum grid dimension Z 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceAttr.cudaDevAttrMaxSharedMemoryPerBlock">
            <summary>
                     Maximum shared memory available per block in bytes 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceAttr.cudaDevAttrTotalConstantMemory">
            <summary>
                     Memory available on device for __constant__ variables in a CUDA C kernel in bytes 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceAttr.cudaDevAttrWarpSize">
            <summary>
                     Warp size in threads 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceAttr.cudaDevAttrMaxPitch">
            <summary>
                     Maximum pitch in bytes allowed by memory copies 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceAttr.cudaDevAttrMaxRegistersPerBlock">
            <summary>
                     Maximum number of 32-bit registers available per block 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceAttr.cudaDevAttrClockRate">
            <summary>
                     Peak clock frequency in kilohertz 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceAttr.cudaDevAttrTextureAlignment">
            <summary>
                     Alignment requirement for textures 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceAttr.cudaDevAttrGpuOverlap">
            <summary>
                     Device can possibly copy memory and execute a kernel concurrently 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceAttr.cudaDevAttrMultiProcessorCount">
            <summary>
                     Number of multiprocessors on device 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceAttr.cudaDevAttrKernelExecTimeout">
            <summary>
                     Specifies whether there is a run time limit on kernels 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceAttr.cudaDevAttrIntegrated">
            <summary>
                     Device is integrated with host memory 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceAttr.cudaDevAttrCanMapHostMemory">
            <summary>
                     Device can map host memory into CUDA address space 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceAttr.cudaDevAttrComputeMode">
            <summary>
                     Compute mode (See cudaComputeMode for details) 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceAttr.cudaDevAttrMaxTexture1DWidth">
            <summary>
                     Maximum 1D texture width 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceAttr.cudaDevAttrMaxTexture2DWidth">
            <summary>
                     Maximum 2D texture width 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceAttr.cudaDevAttrMaxTexture2DHeight">
            <summary>
                     Maximum 2D texture height 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceAttr.cudaDevAttrMaxTexture3DWidth">
            <summary>
                     Maximum 3D texture width 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceAttr.cudaDevAttrMaxTexture3DHeight">
            <summary>
                    Maximum 3D texture height 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceAttr.cudaDevAttrMaxTexture3DDepth">
            <summary>
                     Maximum 3D texture depth 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceAttr.cudaDevAttrMaxTexture2DLayeredWidth">
            <summary>
                     Maximum 2D layered texture width 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceAttr.cudaDevAttrMaxTexture2DLayeredHeight">
            <summary>
                     Maximum 2D layered texture height 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceAttr.cudaDevAttrMaxTexture2DLayeredLayers">
            <summary>
                     Maximum layers in a 2D layered texture 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceAttr.cudaDevAttrSurfaceAlignment">
            <summary>
                     Alignment requirement for surfaces 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceAttr.cudaDevAttrConcurrentKernels">
            <summary>
                     Device can possibly execute multiple kernels concurrently 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceAttr.cudaDevAttrEccEnabled">
            <summary>
                     Device has ECC support enabled 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceAttr.cudaDevAttrPciBusId">
            <summary>
                     PCI bus ID of the device 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceAttr.cudaDevAttrPciDeviceId">
            <summary>
                     PCI device ID of the device 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceAttr.cudaDevAttrTccDriver">
            <summary>
                     Device is using TCC driver model 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceAttr.cudaDevAttrMemoryClockRate">
            <summary>
                     Peak memory clock frequency in kilohertz 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceAttr.cudaDevAttrGlobalMemoryBusWidth">
            <summary>
                     Global memory bus width in bits 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceAttr.cudaDevAttrL2CacheSize">
            <summary>
                     Size of L2 cache in bytes 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceAttr.cudaDevAttrMaxThreadsPerMultiProcessor">
            <summary>
                     Maximum resident threads per multiprocessor 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceAttr.cudaDevAttrAsyncEngineCount">
            <summary>
                     Number of asynchronous engines 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceAttr.cudaDevAttrUnifiedAddressing">
            <summary>
                     Device shares a unified address space with the host 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceAttr.cudaDevAttrMaxTexture1DLayeredWidth">
            <summary>
                     Maximum 1D layered texture width 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceAttr.cudaDevAttrMaxTexture1DLayeredLayers">
            <summary>
                     Maximum layers in a 1D layered texture 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceAttr.cudaDevAttrMaxTexture2DGatherWidth">
            <summary>
                     Maximum 2D texture width if cudaArrayTextureGather is set 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceAttr.cudaDevAttrMaxTexture2DGatherHeight">
            <summary>
                     Maximum 2D texture height if cudaArrayTextureGather is set 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceAttr.cudaDevAttrMaxTexture3DWidthAlt">
            <summary>
                     Alternate maximum 3D texture width 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceAttr.cudaDevAttrMaxTexture3DHeightAlt">
            <summary>
                    Alternate maximum 3D texture height 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceAttr.cudaDevAttrMaxTexture3DDepthAlt">
            <summary>
                     Alternate maximum 3D texture depth 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceAttr.cudaDevAttrPciDomainId">
            <summary>
                     PCI domain ID of the device 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceAttr.cudaDevAttrTexturePitchAlignment">
            <summary>
                     Pitch alignment requirement for textures 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceAttr.cudaDevAttrMaxTextureCubemapWidth">
            <summary>
                     Maximum cubemap texture width/height 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceAttr.cudaDevAttrMaxTextureCubemapLayeredWidth">
            <summary>
                     Maximum cubemap layered texture width/height 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceAttr.cudaDevAttrMaxTextureCubemapLayeredLayers">
            <summary>
                     Maximum layers in a cubemap layered texture 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceAttr.cudaDevAttrMaxSurface1DWidth">
            <summary>
                    Maximum 1D surface width 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceAttr.cudaDevAttrMaxSurface2DWidth">
            <summary>
                     Maximum 2D surface width 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceAttr.cudaDevAttrMaxSurface2DHeight">
            <summary>
                     Maximum 2D surface height 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceAttr.cudaDevAttrMaxSurface3DWidth">
            <summary>
                     Maximum 3D surface width 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceAttr.cudaDevAttrMaxSurface3DHeight">
            <summary>
                     Maximum 3D surface height 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceAttr.cudaDevAttrMaxSurface3DDepth">
            <summary>
                     Maximum 3D surface depth 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceAttr.cudaDevAttrMaxSurface1DLayeredWidth">
            <summary>
                     Maximum 1D layered surface width 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceAttr.cudaDevAttrMaxSurface1DLayeredLayers">
            <summary>
                    Maximum layers in a 1D layered surface 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceAttr.cudaDevAttrMaxSurface2DLayeredWidth">
            <summary>
                     Maximum 2D layered surface width 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceAttr.cudaDevAttrMaxSurface2DLayeredHeight">
            <summary>
                     Maximum 2D layered surface height 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceAttr.cudaDevAttrMaxSurface2DLayeredLayers">
            <summary>
                     Maximum layers in a 2D layered surface 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceAttr.cudaDevAttrMaxSurfaceCubemapWidth">
            <summary>
                     Maximum cubemap surface width 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceAttr.cudaDevAttrMaxSurfaceCubemapLayeredWidth">
            <summary>
                     Maximum cubemap layered surface width 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceAttr.cudaDevAttrMaxSurfaceCubemapLayeredLayers">
            <summary>
                     Maximum layers in a cubemap layered surface 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceAttr.cudaDevAttrMaxTexture1DLinearWidth">
            <summary>
                     Maximum 1D linear texture width 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceAttr.cudaDevAttrMaxTexture2DLinearWidth">
            <summary>
                     Maximum 2D linear texture width 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceAttr.cudaDevAttrMaxTexture2DLinearHeight">
            <summary>
                    Maximum 2D linear texture height 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceAttr.cudaDevAttrMaxTexture2DLinearPitch">
            <summary>
                     Maximum 2D linear texture pitch in bytes 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceAttr.cudaDevAttrMaxTexture2DMipmappedWidth">
            <summary>
                     Maximum mipmapped 2D texture width 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceAttr.cudaDevAttrMaxTexture2DMipmappedHeight">
            <summary>
                     Maximum mipmapped 2D texture height 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceAttr.cudaDevAttrComputeCapabilityMajor">
            <summary>
                     Major compute capability version number 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceAttr.cudaDevAttrComputeCapabilityMinor">
            <summary>
                     Minor compute capability version number 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceAttr.cudaDevAttrMaxTexture1DMipmappedWidth">
            <summary>
                     Maximum mipmapped 1D texture width 
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cudaSharedMemConfig">
            <summary>
            CUDA shared memory configuration 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaSharedMemConfig.cudaSharedMemBankSizeDefault">
            <summary></summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaSharedMemConfig.cudaSharedMemBankSizeFourByte">
            <summary></summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaSharedMemConfig.cudaSharedMemBankSizeEightByte">
            <summary></summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cudaDeviceP2PAttr">
            <summary>
            CUDA device P2P attributes 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceP2PAttr.cudaDevP2PAttrPerformanceRank">
            <summary>
            A relative value indicating the performance of the link between two devices 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceP2PAttr.cudaDevP2PAttrAccessSupported">
            <summary>
            Peer access is enabled 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaDeviceP2PAttr.cudaDevP2PAttrNativeAtomicSupported">
            <summary>
            Native atomic operation over the link supported 
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cudaIpcEventHandle_t">
            <summary>
            CUDA IPC event handle
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cudaIpcMemHandle_t">
            <summary>
            CUDA IPC memory handle
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cudaStreamCallback_t">
            <summary>
            Type of stream callback functions.
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cuda">
            <summary>
            CUDA runtime API wrapper
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cuda.ICudaMarshalling">
            <summary>
            ICuda simplified for marshalling only
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICudaMarshalling.Free(System.IntPtr)">
            <summary>
            Free memory allocated on device
            </summary>
            <remarks> <see href="http://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__MEMORY.html#group__CUDART__MEMORY"/></remarks>
            <param name="dev">Device pointer to free</param>
            <returns>cudaSuccess, cudaErrorInvalidDevicePointer, cudaErrorInitializationError</returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICudaMarshalling.HostRegister(System.IntPtr,Hybridizer.Runtime.CUDAImports.size_t,System.UInt32)">
            <summary>
            Register host memory onto the device
            </summary>
            <remarks> <see href="http://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__MEMORY.html#group__CUDART__MEMORY"/></remarks>
            <param name="ptr">Host pointer to memory to page-lock </param>
            <param name="size">Size in bytes of the address range to page-lock in bytes </param>
            <param name="flags">Flags for allocation request</param>
            <returns>cudaSuccess, cudaErrorInvalidValue, cudaErrorMemoryAllocation</returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICudaMarshalling.HostUnregister(System.IntPtr)">
            <summary>
            Unregister host memory
            </summary>
            <remarks> <see href="http://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__MEMORY.html#group__CUDART__MEMORY"/></remarks>
            <param name="ptr">Host pointer to memory to unregister</param>
            <returns>cudaSuccess, cudaErrorInvalidValue</returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICudaMarshalling.Malloc(System.IntPtr@,Hybridizer.Runtime.CUDAImports.size_t)">
            <summary>
            Allocate memory on the device
            </summary>
            <remarks> <see href="http://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__MEMORY.html#group__CUDART__MEMORY"/></remarks>
            <param name="dev">Pointer to allocated device memory</param>
            <param name="size">Requested allocation size in bytes</param>
            <returns>cudaSuccess, cudaErrorMemoryAllocation</returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICudaMarshalling.Memcpy(System.IntPtr,System.IntPtr,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.cudaMemcpyKind)">
            <summary>
            Copies data between host and device
            </summary>
            <remarks> <see href="http://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__MEMORY.html#group__CUDART__MEMORY"/></remarks>
            <param name="dest">Destination memory address </param>
            <param name="src">Source memory address </param>
            <param name="size">Size in bytes to copy </param>
            <param name="kind">Type of transfer</param>
            <returns>cudaSuccess, cudaErrorInvalidValue, cudaErrorInvalidDevicePointer, cudaErrorInvalidMemcpyDirection</returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICudaMarshalling.MemcpyAsync(System.IntPtr,System.IntPtr,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.cudaMemcpyKind,Hybridizer.Runtime.CUDAImports.cudaStream_t)">
            <summary>
            Copies data between host and device
            </summary>
            <remarks> <see href="http://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__MEMORY.html#group__CUDART__MEMORY"/></remarks>
            <param name="dest">Destination memory address </param>
            <param name="src">Source memory address </param>
            <param name="size">Size in bytes to copy </param>
            <param name="kind">Type of transfer</param>
            <param name="stream">Stream identifier</param>
            <returns>cudaSuccess, cudaErrorInvalidValue, cudaErrorInvalidDevicePointer, cudaErrorInvalidMemcpyDirection</returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICudaMarshalling.FreeHost(System.IntPtr)">
            <summary>
            Frees page-locked memory.
            </summary>
            <remarks> <see href="http://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__MEMORY.html#group__CUDART__MEMORY"/></remarks>
            <param name="ptr">Pointer to memory to free</param>
            <returns>cudaSuccess, cudaErrorInitializationError</returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICudaMarshalling.HostAlloc(System.IntPtr@,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.cudaHostAllocFlags)">
            <summary>
            Allocates page-locked memory on the host
            </summary>
            <remarks> <see href="http://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__MEMORY.html#group__CUDART__MEMORY"/></remarks>
            <param name="pHost">Device pointer to allocated memory </param>
            <param name="size">Requested allocation size in bytes </param>
            <param name="flags">Requested properties of allocated memory</param>
            <returns>cudaSuccess, cudaErrorMemoryAllocation</returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICudaMarshalling.GetLastError">
            <summary>
            Get last cuda error
            </summary>
            <remarks> <see href="http://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__ERROR.html#group__CUDART__ERROR"/></remarks>
            <returns>cudaSuccess, cudaErrorMissingConfiguration, cudaErrorMemoryAllocation, 
            cudaErrorInitializationError, cudaErrorLaunchFailure, cudaErrorLaunchTimeout, 
            cudaErrorLaunchOutOfResources, cudaErrorInvalidDeviceFunction, 
            cudaErrorInvalidConfiguration, cudaErrorInvalidDevice, cudaErrorInvalidValue, 
            cudaErrorInvalidPitchValue, cudaErrorInvalidSymbol, cudaErrorUnmapBufferObjectFailed, 
            cudaErrorInvalidHostPointer, cudaErrorInvalidDevicePointer, cudaErrorInvalidTexture, 
            cudaErrorInvalidTextureBinding, cudaErrorInvalidChannelDescriptor, 
            cudaErrorInvalidMemcpyDirection, cudaErrorInvalidFilterSetting, 
            cudaErrorInvalidNormSetting, cudaErrorUnknown, cudaErrorInvalidResourceHandle, 
            cudaErrorInsufficientDriver, cudaErrorSetOnActiveProcess, 
            cudaErrorStartupFailure, </returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICudaMarshalling.GetPeekAtLastError">
            <summary>
            Peek last cuda error
            </summary>
            <remarks> <see href="http://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__ERROR.html#group__CUDART__ERROR"/></remarks>
            <returns>cudaSuccess, cudaErrorMissingConfiguration, cudaErrorMemoryAllocation, 
            cudaErrorInitializationError, cudaErrorLaunchFailure, cudaErrorLaunchTimeout,
            cudaErrorLaunchOutOfResources, cudaErrorInvalidDeviceFunction,
            cudaErrorInvalidConfiguration, cudaErrorInvalidDevice, cudaErrorInvalidValue, 
            cudaErrorInvalidPitchValue, cudaErrorInvalidSymbol, cudaErrorUnmapBufferObjectFailed, 
            cudaErrorInvalidHostPointer, cudaErrorInvalidDevicePointer, cudaErrorInvalidTexture, 
            cudaErrorInvalidTextureBinding, cudaErrorInvalidChannelDescriptor, 
            cudaErrorInvalidMemcpyDirection, cudaErrorInvalidFilterSetting, 
            cudaErrorInvalidNormSetting, cudaErrorUnknown, cudaErrorInvalidResourceHandle, 
            cudaErrorInsufficientDriver, cudaErrorSetOnActiveProcess, 
            cudaErrorStartupFailure, </returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICudaMarshalling.GetErrorString(Hybridizer.Runtime.CUDAImports.cudaError_t)">
            <summary>
            Returns the description string for an error code
            </summary>
            <remarks> <see href="http://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__ERROR.html#group__CUDART__ERROR"/></remarks>
            <param name="err">Error code to convert to string</param>
            <returns>char* pointer to a NULL-terminated string, or NULL if the error code is not valid. </returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICudaMarshalling.GetErrorName(Hybridizer.Runtime.CUDAImports.cudaError_t)">
            <summary>
            Returns the string representation of an error code enum name
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICudaMarshalling.StreamCreate(Hybridizer.Runtime.CUDAImports.cudaStream_t@)">
            <summary>
            Create an asynchronous stream
            </summary>
            <remarks> <see href="http://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__STREAM.html#group__CUDART__STREAM"/></remarks>
            <param name="stream">Pointer to new stream identifier</param>
            <returns>cudaSuccess, cudaErrorInvalidValue</returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICudaMarshalling.StreamDestroy(Hybridizer.Runtime.CUDAImports.cudaStream_t)">
            <summary>
            Destroy cuda steam
            </summary>
            <remarks> <see href="http://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__STREAM.html#group__CUDART__STREAM"/></remarks>
            <param name="stream">Stream identifier</param>
            <returns>cudaSuccess, cudaErrorInvalidResourceHandle</returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICudaMarshalling.StreamSynchronize(Hybridizer.Runtime.CUDAImports.cudaStream_t)">
            <summary>
            Synchronize cuda steam
            </summary>
            <remarks> <see href="http://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__STREAM.html#group__CUDART__STREAM"/></remarks>
            <param name="stream">Stream identifier</param>
            <returns>cudaSuccess, cudaErrorInvalidResourceHandle</returns>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cuda.ICuda">
            <summary>
            interface wrapping all cuda versions
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.SetValidDevices(System.Int32[])">
            <summary>
             Set a list of devices that can be used for CUDA
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.ChooseDevice(System.Int32@,Hybridizer.Runtime.CUDAImports.cudaDeviceProp@)">
            <summary>
             Select compute-device which best matches criteria. 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.DeviceGetAttribute(System.Int32@,Hybridizer.Runtime.CUDAImports.cudaDeviceAttr,System.Int32)">
            <summary>
             Returns information about the device. 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.DeviceGetByPCIBusId(System.Int32@,System.String)">
            <summary>
             Returns a handle to a compute device. 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.DeviceGetCacheConfig(System.IntPtr)">
            <summary>
             Returns the preferred cache configuration for the current device. 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.DeviceGetLimit(Hybridizer.Runtime.CUDAImports.size_t@,Hybridizer.Runtime.CUDAImports.cudaLimit)">
            <summary>
             Returns resource limits. 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.DeviceGetPCIBusId(System.Text.StringBuilder,System.Int32,System.Int32)">
            <summary>
             Returns a PCI Bus Id string for the device. 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.DeviceGetSharedMemConfig(System.IntPtr)">
            <summary>
             Returns the shared memory configuration for the current device. 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.DeviceReset">
            <summary>
             Destroy all allocations and reset all state on the current device in the current process. 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.DeviceSetCacheConfig(Hybridizer.Runtime.CUDAImports.cudaFuncCache)">
            <summary>
             Sets the preferred cache configuration for the current device. 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.DeviceSetLimit(Hybridizer.Runtime.CUDAImports.cudaLimit,Hybridizer.Runtime.CUDAImports.size_t)">
            <summary>
             Set resource limits. 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.DeviceSetSharedMemConfig(Hybridizer.Runtime.CUDAImports.cudaSharedMemConfig)">
            <summary>
             Sets the shared memory configuration for the current device. 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.DeviceSynchronize">
            <summary>
             Wait for compute device to finish. 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.GetDevice(System.Int32@)">
            <summary>
             Returns which device is currently being used. 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.GetDeviceCount(System.Int32@)">
            <summary>
             Returns the number of compute-capable devices. 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.GetDeviceProperties(Hybridizer.Runtime.CUDAImports.cudaDeviceProp@,System.Int32)">
            <summary>
             Returns information about the compute-device. 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.IpcCloseMemHandle(System.IntPtr)">
            <summary>
             Close memory mapped with cudaIpcOpenMemHandle. 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.IpcGetEventHandle(Hybridizer.Runtime.CUDAImports.cudaIpcEventHandle_t@,Hybridizer.Runtime.CUDAImports.cudaEvent_t)">
            <summary>
             Gets an interprocess handle for a previously allocated event. 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.IpcGetMemHandle(Hybridizer.Runtime.CUDAImports.cudaIpcMemHandle_t@,System.IntPtr)">
            <summary>
              Gets an interprocess memory handle for an existing device memory allocation
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.IpcOpenEventHandle(Hybridizer.Runtime.CUDAImports.cudaEvent_t@,Hybridizer.Runtime.CUDAImports.cudaIpcEventHandle_t)">
            <summary>
             Opens an interprocess event handle for use in the current process. 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.IpcOpenMemHandle(System.IntPtr@,Hybridizer.Runtime.CUDAImports.cudaIpcMemHandle_t,System.UInt32)">
            <summary>
             Opens an interprocess memory handle exported from another process and returns a device pointer usable in the local process.
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.SetDevice(System.Int32)">
            <summary>
             Set device to be used for GPU executions. 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.SetDeviceFlags(Hybridizer.Runtime.CUDAImports.deviceFlags)">
            <summary>
             Sets flags to be used for device executions. 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.GetDeviceFlags(System.UInt32@)">
            <summary>
             Gets the flags for the current device
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.DeviceGetStreamPriorityRange(System.Int32@,System.Int32@)">
            <summary>
             Returns numerical values that correspond to the least and greatest stream priorities.
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.DeviceGetP2PAttribute(System.Int32@,Hybridizer.Runtime.CUDAImports.cudaDeviceP2PAttr,System.Int32,System.Int32)">
            <summary>
             Queries attributes of the link between two devices.
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.ThreadExit">
            <summary>
            Exit and clean up from CUDA launches
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.ThreadGetLimit(Hybridizer.Runtime.CUDAImports.size_t@,Hybridizer.Runtime.CUDAImports.cudaLimit)">
            <summary>
            Returns the preferred cache configuration for the current device.
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.ThreadSetLimit(Hybridizer.Runtime.CUDAImports.cudaLimit,Hybridizer.Runtime.CUDAImports.size_t)">
            <summary>
            Set resource limits
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.ThreadSynchronize">
            <summary>
             Wait for compute device to finish
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.StreamQuery(Hybridizer.Runtime.CUDAImports.cudaStream_t)">
            <summary>
            Queries an asynchronous stream for completion status
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.StreamGetFlags(Hybridizer.Runtime.CUDAImports.cudaStream_t,System.UInt32@)">
            <summary>
            Query the flags of a stream
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.StreamCreateWithFlags(Hybridizer.Runtime.CUDAImports.cudaStream_t@,System.UInt32)">
            <summary>
            Create an asynchronous stream
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.StreamAttachMemAsync(Hybridizer.Runtime.CUDAImports.cudaStream_t,System.IntPtr,Hybridizer.Runtime.CUDAImports.size_t,System.UInt32)">
            <summary>
            Attach memory to a stream asynchronously
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.StreamWaitEvent(Hybridizer.Runtime.CUDAImports.cudaStream_t,Hybridizer.Runtime.CUDAImports.cudaEvent_t,System.UInt32)">
            <summary>
            Make a compute stream wait on an event
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.StreamCreateWithPriority(Hybridizer.Runtime.CUDAImports.cudaStream_t@,System.UInt32,System.Int32)">
            <summary>
            Create an asynchronous stream with the specified priority
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.StreamGetPriority(Hybridizer.Runtime.CUDAImports.cudaStream_t,System.Int32@)">
            <summary>
            Query the priority of a stream
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.EventCreate(Hybridizer.Runtime.CUDAImports.cudaEvent_t@)">
            <summary>
            Creates an event object
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.EventCreateWithFlags(Hybridizer.Runtime.CUDAImports.cudaEvent_t@,Hybridizer.Runtime.CUDAImports.cudaEventFlags)">
            <summary>
            Creates an event object with the specified flags
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.EventDestroy(Hybridizer.Runtime.CUDAImports.cudaEvent_t)">
            <summary>
            Destroys an event object
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.EventElapsedTime(System.Single@,Hybridizer.Runtime.CUDAImports.cudaEvent_t,Hybridizer.Runtime.CUDAImports.cudaEvent_t)">
            <summary>
            Computes the elapsed time between events
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.EventQuery(Hybridizer.Runtime.CUDAImports.cudaEvent_t)">
            <summary>
            Queries an event's status
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.EventRecord(Hybridizer.Runtime.CUDAImports.cudaEvent_t,Hybridizer.Runtime.CUDAImports.cudaStream_t)">
            <summary>
            Records an event
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.EventSynchronize(Hybridizer.Runtime.CUDAImports.cudaEvent_t)">
            <summary>
            Waits for an event to complete
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.ConfigureCall(Hybridizer.Runtime.CUDAImports.dim3,Hybridizer.Runtime.CUDAImports.dim3,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.cudaStream_t)">
            <summary>
            Configure a device-launch
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.FuncGetAttributes(Hybridizer.Runtime.CUDAImports.cudaFuncAttributes@,System.String)">
            <summary>
            Find out attributes for a given function. 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.FuncSetCacheConfig(System.IntPtr,Hybridizer.Runtime.CUDAImports.cudaFuncCache)">
            <summary>
            Sets the preferred cache configuration for a device function. 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.Launch(System.String)">
            <summary>
            Launches a device function. 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.SetDoubleForDevice(System.Double@)">
            <summary>
            Converts a double argument to be executed on a device. 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.SetDoubleForHost(System.Double@)">
            <summary>
            Converts a double argument after execution on a device. 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.SetupArgument(System.IntPtr,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.size_t)">
            <summary>
            Configure a device launch. 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.LaunchKernel(System.IntPtr,Hybridizer.Runtime.CUDAImports.dim3,Hybridizer.Runtime.CUDAImports.dim3,System.IntPtr,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.cudaStream_t)">
            <summary>
            Launches a device function. 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.FuncSetSharedMemConfig(System.IntPtr,Hybridizer.Runtime.CUDAImports.cudaSharedMemConfig)">
            <summary>
            Sets the shared memory configuration for a device function. 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.FreeArray(Hybridizer.Runtime.CUDAImports.cudaArray_t)">
            <summary>
            Frees an array on the device
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.GetSymbolAddress(System.IntPtr@,System.String)">
            <summary>
            Finds the address associated with a CUDA symbol
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.GetSymbolSize(Hybridizer.Runtime.CUDAImports.size_t@,System.String)">
            <summary>
            Finds the size of the object associated with a CUDA symbol
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.HostGetDevicePointer(System.IntPtr@,System.IntPtr,Hybridizer.Runtime.CUDAImports.cudaGetDevicePointerFlags)">
            <summary>
            Passes back device pointer of mapped host memory allocated by cudaHostAlloc or registered by cudaHostRegister
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.HostGetFlags(Hybridizer.Runtime.CUDAImports.cudaHostAllocFlags@,System.IntPtr)">
            <summary>
            Passes back flags used to allocate pinned host memory allocated by cudaHostAlloc
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.Malloc3D(Hybridizer.Runtime.CUDAImports.cudaPitchedPtr@,Hybridizer.Runtime.CUDAImports.cudaExtent)">
            <summary>
            Allocates logical 1D, 2D, or 3D memory objects on the device
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.Malloc3DArray(Hybridizer.Runtime.CUDAImports.cudaArray_t@,Hybridizer.Runtime.CUDAImports.cudaChannelFormatDesc@,Hybridizer.Runtime.CUDAImports.cudaExtent,Hybridizer.Runtime.CUDAImports.cudaMallocArrayFlags)">
            <summary>
            Allocate an array on the device
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.MallocArray(Hybridizer.Runtime.CUDAImports.cudaArray_t@,Hybridizer.Runtime.CUDAImports.cudaChannelFormatDesc@,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.cudaMallocArrayFlags)">
            <summary>
            Allocate an array on the device
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.MallocHost(System.IntPtr@,Hybridizer.Runtime.CUDAImports.size_t)">
            <summary>
            Allocates page-locked memory on the host
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.MallocPitch(System.IntPtr@,Hybridizer.Runtime.CUDAImports.size_t@,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.size_t)">
            <summary>
            Allocates pitched memory on the device
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.Memcpy2D(System.IntPtr,Hybridizer.Runtime.CUDAImports.size_t,System.IntPtr,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.cudaMemcpyKind)">
            <summary>
            Copies data between host and device
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.Memcpy2DArrayToArray(Hybridizer.Runtime.CUDAImports.cudaArray_t,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.cudaArray_t,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.cudaMemcpyKind)">
            <summary>
            Copies data between host and device
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.Memcpy2DAsync(System.IntPtr,Hybridizer.Runtime.CUDAImports.size_t,System.IntPtr,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.cudaMemcpyKind,Hybridizer.Runtime.CUDAImports.cudaStream_t)">
            <summary>
            Copies data between host and device
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.Memcpy2DFromArray(System.IntPtr,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.cudaArray_t,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.cudaMemcpyKind)">
            <summary>
            Copies data between host and device
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.Memcpy2DFromArrayAsync(System.IntPtr,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.cudaArray_t,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.cudaMemcpyKind,Hybridizer.Runtime.CUDAImports.cudaStream_t)">
            <summary>
            Copies data between host and device
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.Memcpy2DToArray(Hybridizer.Runtime.CUDAImports.cudaArray_t,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.size_t,System.IntPtr,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.cudaMemcpyKind)">
            <summary>
            Copies data between host and device
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.Memcpy2DToArrayAsync(Hybridizer.Runtime.CUDAImports.cudaArray_t,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.size_t,System.IntPtr,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.cudaMemcpyKind,Hybridizer.Runtime.CUDAImports.cudaStream_t)">
            <summary>
            Copies data between host and device
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.Memcpy3D(Hybridizer.Runtime.CUDAImports.cudaMemcpy3DParms@)">
            <summary>
            Copies data between host and device
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.Memcpy3DAsync(Hybridizer.Runtime.CUDAImports.cudaMemcpy3DParms@,Hybridizer.Runtime.CUDAImports.cudaStream_t)">
            <summary>
            Copies data between host and device
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.MemcpyArrayToArray(Hybridizer.Runtime.CUDAImports.cudaArray_t,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.cudaArray_t,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.cudaMemcpyKind)">
            <summary>
            Copies data between host and device
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.MemcpyFromArray(System.IntPtr,Hybridizer.Runtime.CUDAImports.cudaArray_t,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.cudaMemcpyKind)">
            <summary>
            Copies data between host and device
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.MemcpyFromArrayAsync(System.IntPtr,Hybridizer.Runtime.CUDAImports.cudaArray_t,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.cudaMemcpyKind,Hybridizer.Runtime.CUDAImports.cudaStream_t)">
            <summary>
            Copies data between host and device
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.MemcpyFromSymbol(System.IntPtr,System.String,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.cudaMemcpyKind)">
            <summary>
            Copies data between host and device
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.MemcpyFromSymbolAsync(System.IntPtr,System.String,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.cudaMemcpyKind,Hybridizer.Runtime.CUDAImports.cudaStream_t)">
            <summary>
            Copies data between host and device
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.MemcpyToArray(Hybridizer.Runtime.CUDAImports.cudaArray_t,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.size_t,System.IntPtr,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.cudaMemcpyKind)">
            <summary>
            Copies data between host and device
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.MemcpyToArrayAsync(Hybridizer.Runtime.CUDAImports.cudaArray_t,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.size_t,System.IntPtr,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.cudaMemcpyKind,Hybridizer.Runtime.CUDAImports.cudaStream_t)">
            <summary>
            Copies data between host and device
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.MemcpyToSymbol(System.String,System.IntPtr,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.cudaMemcpyKind)">
            <summary>
            Copies data between host and device
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.MemcpyToSymbolAsync(System.String,System.IntPtr,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.cudaMemcpyKind,Hybridizer.Runtime.CUDAImports.cudaStream_t)">
            <summary>
            Copies data between host and device
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.MemGetInfo(Hybridizer.Runtime.CUDAImports.size_t@,Hybridizer.Runtime.CUDAImports.size_t@)">
            <summary>
            Gets free and total device memory
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.Memset(System.IntPtr,System.Int32,Hybridizer.Runtime.CUDAImports.size_t)">
            <summary>
            Initializes or sets device memory to a value
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.Memset2D(System.IntPtr,Hybridizer.Runtime.CUDAImports.size_t,System.Int32,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.size_t)">
            <summary>
            Initializes or sets device memory to a value
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.Memset3D(Hybridizer.Runtime.CUDAImports.cudaPitchedPtr,System.Int32,Hybridizer.Runtime.CUDAImports.cudaExtent)">
            <summary>
            Initializes or sets device memory to a value
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.ArrayGetInfo(Hybridizer.Runtime.CUDAImports.cudaChannelFormatDesc@,Hybridizer.Runtime.CUDAImports.cudaExtent@,System.UInt32@,Hybridizer.Runtime.CUDAImports.cudaArray_t)">
            <summary>
            Gets info about the specified cudaArray
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.FreeMipmappedArray(Hybridizer.Runtime.CUDAImports.cudaMipmappedArray_t)">
            <summary>
            Frees a mipmapped array on the device
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.GetMipmappedArrayLevel(Hybridizer.Runtime.CUDAImports.cudaArray_t@,Hybridizer.Runtime.CUDAImports.cudaMipmappedArray_const_t,System.UInt32)">
            <summary>
            Gets a mipmap level of a CUDA mipmapped array
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.MallocManaged(System.IntPtr@,Hybridizer.Runtime.CUDAImports.size_t,System.UInt32)">
            <summary>
             Allocates memory that will be automatically managed by the Unified Memory system
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.MallocMipmappedArray(Hybridizer.Runtime.CUDAImports.cudaMipmappedArray_t@,Hybridizer.Runtime.CUDAImports.cudaChannelFormatDesc@,Hybridizer.Runtime.CUDAImports.cudaExtent,System.UInt32,System.UInt32)">
            <summary>
            Allocate a mipmapped array on the device
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.MemAdvise(System.IntPtr,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.cudaMemmoryAdvise,System.Int32)">
            <summary>
            Advise about the usage of a given memory range
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.MemPrefetchAsync(System.IntPtr,Hybridizer.Runtime.CUDAImports.size_t,System.Int32,Hybridizer.Runtime.CUDAImports.cudaStream_t)">
            <summary>
            Prefetches memory to the specified destination device
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.MemPrefetchAsync(System.IntPtr,Hybridizer.Runtime.CUDAImports.size_t,System.Int32)">
            <summary>
            Prefetches memory to the specified destination device
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.Memcpy3DPeer(Hybridizer.Runtime.CUDAImports.cudaMemcpy3DPeerParms@)">
            <summary>
            Copies memory between devices
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.Memcpy3DPeerAsync(Hybridizer.Runtime.CUDAImports.cudaMemcpy3DPeerParms@,Hybridizer.Runtime.CUDAImports.cudaStream_t)">
            <summary>
            Copies memory between devices
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.MemcpyPeer(System.IntPtr,System.Int32,System.IntPtr,System.Int32,Hybridizer.Runtime.CUDAImports.size_t)">
            <summary>
            Copies memory between devices
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.MemcpyPeerAsync(System.IntPtr,System.Int32,System.IntPtr,System.Int32,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.cudaStream_t)">
            <summary>
            Copies memory between devices
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.Memset2DAsync(System.IntPtr,Hybridizer.Runtime.CUDAImports.size_t,System.Int32,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.cudaStream_t)">
            <summary>
            Copies memory between devices
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.Memset3DAsync(Hybridizer.Runtime.CUDAImports.cudaPitchedPtr,System.Int32,Hybridizer.Runtime.CUDAImports.cudaExtent,Hybridizer.Runtime.CUDAImports.cudaStream_t)">
            <summary>
            Copies memory between devices
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.MemsetAsync(System.IntPtr,System.Int32,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.cudaStream_t)">
            <summary>
            Copies memory between devices
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.CreateSurfaceObject(Hybridizer.Runtime.CUDAImports.cudaSurfaceObject_t@,Hybridizer.Runtime.CUDAImports.cudaResourceDesc@)">
            <summary>
            Creates a surface object
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.DestroySurfaceObject(Hybridizer.Runtime.CUDAImports.cudaSurfaceObject_t)">
            <summary>
            Destroys a surface object
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.GetSurfaceObjectResourceDesc(Hybridizer.Runtime.CUDAImports.cudaResourceDesc@,Hybridizer.Runtime.CUDAImports.cudaSurfaceObject_t)">
            <summary>
             Returns a surface object's resource descriptor
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.CreateTextureObject(Hybridizer.Runtime.CUDAImports.cudaTextureObject_t@,Hybridizer.Runtime.CUDAImports.cudaResourceDesc@,Hybridizer.Runtime.CUDAImports.cudaTextureDesc@,Hybridizer.Runtime.CUDAImports.cudaResourceViewDesc@)">
            <summary>
            Creates a texture object
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.CreateTextureObject(Hybridizer.Runtime.CUDAImports.cudaTextureObject_t@,Hybridizer.Runtime.CUDAImports.cudaResourceDesc@,Hybridizer.Runtime.CUDAImports.cudaTextureDesc@)">
            <summary>
            Creates a texture object
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.DestroyTextureObject(Hybridizer.Runtime.CUDAImports.cudaTextureObject_t)">
            <summary>
            Destroys a texture object
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.GetTextureObjectResourceDesc(Hybridizer.Runtime.CUDAImports.cudaResourceDesc@,Hybridizer.Runtime.CUDAImports.cudaTextureObject_t)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.GLRegisterBufferObject(System.UInt32)">
            <summary>
            Registers a buffer object for access by CUDA. 
            </summary>
            <param name="buffer">Buffer object ID to register</param>
            <see href="https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__OPENGL__DEPRECATED.html#group__CUDART__OPENGL__DEPRECATED_1gb835a92a340e999f4eaa55a8d57e122c">nvidia documentation</see>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.GraphicsGLRegisterBuffer(System.IntPtr@,System.UInt32,System.UInt32)">
            <summary>
            Registers an OpenGL buffer object. 
            </summary>
            <param name="pCudaResource"> Pointer to the returned object handle </param>
            <param name="buffer">name of buffer object to be registered</param>
            <param name="Flags">Register flags</param>
            <see href="https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__OPENGL.html#group__CUDART__OPENGL_1g0fd33bea77ca7b1e69d1619caf44214b">nvidia documentation</see>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.GraphicsUnregisterResource(System.IntPtr)">
            <summary>
            Unregisters a graphics resource for access by CUDA. 
            </summary>
            <param name="resource">Resource to unregister</param>
            <see href="https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__INTEROP.html#group__CUDART__INTEROP_1gc65d1f2900086747de1e57301d709940">nvidia documentation</see>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.GLUnregisterBufferObject(System.UInt32)">
            <summary>
            Unmaps a buffer object for access by CUDA. 
            </summary>
            <param name="buffer">Buffer object to unmap </param>
            <see href="https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__OPENGL__DEPRECATED.html#group__CUDART__OPENGL__DEPRECATED_1g5ce0566e8543a8c7677b619acfefd5b5">nvidia documentation</see>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.GraphicsResourceGetMappedPointer(System.IntPtr@,Hybridizer.Runtime.CUDAImports.size_t@,System.IntPtr)">
            <summary>
            Get an device pointer through which to access a mapped graphics resource. 
            </summary>
            <param name="devPtr"> Returned pointer through which resource may be accessed </param>
            <param name="size"> Returned size of the buffer accessible starting at *devPtr</param>
            <param name="resource">Mapped resource to access</param>
            <see href="https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__INTEROP.html#group__CUDART__INTEROP_1ga36881081c8deb4df25c256158e1ac99">nvidia documentation</see>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.GraphicsResourceSetMapFlags(System.IntPtr,System.UInt32)">
            <summary>
            Set usage flags for mapping a graphics resource. 
            </summary>
            <param name="resource">Registered resource to set flags for</param>
            <param name="flags"> Parameters for resource mapping</param>
            <see href="https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__INTEROP.html#group__CUDART__INTEROP_1g5f94a0043909fddc100ab5f0c2476b9f">nvidia documentation</see>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.GraphicsMapResources(System.Int32,System.IntPtr[],Hybridizer.Runtime.CUDAImports.cudaStream_t)">
            <summary>
            Map graphics resources for access by CUDA. 
            </summary>
            <param name="count"> Number of resources to map </param>
            <param name="resources">Resources to map for CUDA </param>
            <param name="stream">Stream for synchronization</param>
            <see href="https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__INTEROP.html#group__CUDART__INTEROP_1gad8fbe74d02adefb8e7efb4971ee6322">nvidia documentation</see>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.GraphicsUnmapResources(System.Int32,System.IntPtr[],Hybridizer.Runtime.CUDAImports.cudaStream_t)">
            <summary>
            Unmap graphics resources. 
            </summary>
            <param name="count"> Number of resources to map </param>
            <param name="resources">Resources to map for CUDA </param>
            <param name="stream">Stream for synchronization</param>
            <see href="https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__INTEROP.html#group__CUDART__INTEROP_1g11988ab4431b11ddb7cbde7aedb60491">nvidia documentation</see>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.GraphicsGLRegisterImage(System.IntPtr@,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Register an OpenGL texture or renderbuffer object.
            </summary>
            <param name="cudaGraphicsResource">Pointer to the returned object handle </param>
            <param name="image">name of texture or renderbuffer object to be registered</param>
            <param name="target">Identifies the type of object specified by image</param>
            <param name="flags">Register flags</param>
            <returns>cudaErrorInvalidDevice, cudaErrorInvalidValue, cudaErrorInvalidResourceHandle, cudaErrorUnknown</returns>
            <see href="https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__OPENGL.html#group__CUDART__OPENGL_1g80d12187ae7590807c7676697d9fe03d">nvidia documentation</see>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ICuda.GraphicsSubResourceGetMappedArray(Hybridizer.Runtime.CUDAImports.cudaArray_t@,System.IntPtr,System.UInt32,System.UInt32)">
            <summary>
            Get an array through which to access a subresource of a mapped graphics resource. 
            </summary>
            <param name="array">Returned array through which a subresource of resource may be accessed</param>
            <param name="resource"> Mapped resource to access </param>
            <param name="arrayIndex">Array index for array textures or cubemap face index as defined by cudaGraphicsCubeFace for cubemap textures for the subresource to access </param>
            <param name="mipLevel">Mipmap level for the subresource to access</param>
            <returns>cudaSuccess, cudaErrorInvalidValue, cudaErrorInvalidResourceHandle, cudaErrorUnknown</returns>
            <see href="https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__INTEROP.html#group__CUDART__INTEROP_1g0dd6b5f024dfdcff5c28a08ef9958031">nvidia documentation</see>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_55.name">
            <summary>
            
            </summary>
            <summary>
            ASCII string identifying device
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_55.totalGlobalMem">
            <summary>
            Global memory available on device in bytes
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_55.sharedMemPerBlock">
            <summary>
            Shared memory available per block in bytes
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_55.regsPerBlock">
            <summary>
            32-bit registers available per block
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_55.warpSize">
            <summary>
            Warp size in threads
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_55.memPitch">
            <summary>
            Maximum pitch in bytes allowed by memory copies
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_55.maxThreadsPerBlock">
            <summary>
            Maximum number of threads per block
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_55.maxThreadsDim">
            <summary>
            Maximum size of each dimension of a block
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_55.maxGridSize">
            <summary>
            Maximum size of each dimension of a grid
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_55.clockRate">
            <summary>
            Clock frequency in kilohertz
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_55.totalConstMem">
            <summary>
            Constant memory available on device in bytes
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_55.major">
            <summary>
            Major compute capability
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_55.minor">
            <summary>
            Minor compute capability
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_55.textureAlignment">
            <summary>
            Alignment requirement for textures
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_55.texturePitchAlignment">
            <summary>
            Pitch alignment requirement for texture references bound to pitched memory
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_55.deviceOverlap">
            <summary>
            Device can concurrently copy memory and execute a kernel
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_55.multiProcessorCount">
            <summary>
            Number of multiprocessors on device
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_55.kernelExecTimeoutEnabled">
            <summary>
            Specified whether there is a run time limit on kernels
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_55.integrated">
            <summary>
            Device is integrated as opposed to discrete
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_55.canMapHostMemory">
            <summary>
            Device can map host memory with cudaHostAlloc/cudaHostGetDevicePointer
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_55.computeMode">
            <summary>
            Compute mode (See ::cudaComputeMode)
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_55.maxTexture1D">
            <summary>
            Maximum 1D texture size
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_55.maxTexture2D">
            <summary>
            Maximum 2D texture dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_55.maxTexture2DLinear">
            <summary>
            Maximum 2D texture dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_55.maxTexture2DGather">
            <summary>
            Maximum 2D texture dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_55.maxTexture3D">
            <summary>
            Maximum 3D texture dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_55.maxTexture3DAlt">
            <summary>
            Maximum 3D texture dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_55.maxSurface1D">
            <summary>
            Maximum 1D surface size
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_55.maxSurface2D">
            <summary>
            Maximum 2D surface size
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_55.maxSurface3D">
            <summary>
            Maximum 3D surface size
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_55.maxSurface1DLayered">
            <summary>
            Maximum 1D layered surface size
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_55.maxSurface2DLayered">
            <summary>
            Maximum 2D layered surface size
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_55.maxSurfaceCubemap">
            <summary>
            Maximum
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_55.maxSurfaceCubemapLayered">
            <summary>
            Maximum
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_55.surfaceAlignment">
            <summary>
            Alignment requirements for surfaces
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_55.concurrentKernels">
            
             <summary>
             Device can possibly execute multiple kernels concurrently
             </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_55.ECCEnabled">
            <summary>
            Device has ECC support enabled
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_55.pciBusID">
            <summary>
            PCI bus ID of the device
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_55.pciDeviceID">
            <summary>
            PCI device ID of the device
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_60.name">
            <summary>
            ASCII string identifying device
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_60.totalGlobalMem">
            <summary>
            Global memory available on device in bytes
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_60.sharedMemPerBlock">
            <summary>
            Shared memory available per block in bytes
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_60.regsPerBlock">
            <summary>
            32-bit registers available per block
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_60.warpSize">
            <summary>
            Warp size in threads
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_60.memPitch">
            <summary>
            Maximum pitch in bytes allowed by memory copies
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_60.maxThreadsPerBlock">
            <summary>
            Maximum number of threads per block
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_60.maxThreadsDim">
            <summary>
            Maximum size of each dimension of a block
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_60.maxGridSize">
            <summary>
            Maximum size of each dimension of a grid
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_60.clockRate">
            <summary>
            Clock frequency in kilohertz
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_60.totalConstMem">
            <summary>
            Constant memory available on device in bytes
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_60.major">
            <summary>
            Major compute capability
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_60.minor">
            <summary>
            Minor compute capability
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_60.textureAlignment">
            <summary>
            Alignment requirement for textures
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_60.texturePitchAlignment">
            <summary>
            Pitch alignment requirement for texture references bound to pitched memory
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_60.deviceOverlap">
            <summary>
            Device can concurrently copy memory and execute a kernel. Deprecated. Use instead asyncEngineCount.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_60.multiProcessorCount">
            <summary>
            Number of multiprocessors on device
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_60.kernelExecTimeoutEnabled">
            <summary>
            Specified whether there is a run time limit on kernels
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_60.integrated">
            <summary>
            Device is integrated as opposed to discrete
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_60.canMapHostMemory">
            <summary>
            Device can map host memory with cudaHostAlloc/cudaHostGetDevicePointer
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_60.computeMode">
            <summary>
            Compute mode (See ::cudaComputeMode)
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_60.maxTexture1D">
            <summary>
            Maximum 1D texture size
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_60.maxTexture1DMipmap">
            <summary>
            Maximum 1D mipmapped texture size
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_60.maxTexture1DLinear">
            <summary>
            Maximum size for 1D textures bound to linear memory
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_60.maxTexture2D">
            <summary>
            Maximum 2D texture dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_60.maxTexture2DMipmap">
            <summary>
            Maximum 2D mipmapped texture dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_60.maxTexture2DLinear">
            <summary>
            Maximum dimensions (width, height, pitch) for 2D textures bound to pitched memory
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_60.maxTexture2DGather">
            <summary>
            Maximum 2D texture dimensions if texture gather operations have to be performed
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_60.maxTexture3D">
            <summary>
            Maximum 3D texture dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_60.maxTexture3DAlt">
            <summary>
            Maximum alternate 3D texture dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_60.maxTextureCubemap">
            <summary>
            Maximum Cubemap texture dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_60.maxTexture1DLayered">
            <summary>
            Maximum 1D layered texture dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_60.maxTexture2DLayered">
            <summary>
            Maximum 2D layered texture dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_60.maxTextureCubemapLayered">
            <summary>
            Maximum Cubemap layered texture dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_60.maxSurface1D">
            <summary>
            Maximum 1D surface size
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_60.maxSurface2D">
            <summary>
            Maximum 2D surface dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_60.maxSurface3D">
            <summary>
            Maximum 3D surface dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_60.maxSurface1DLayered">
            <summary>
            Maximum 1D layered surface dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_60.maxSurface2DLayered">
            <summary>
            Maximum 2D layered surface dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_60.maxSurfaceCubemap">
            <summary>
            Maximum Cubemap surface dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_60.maxSurfaceCubemapLayered">
            <summary>
            Maximum Cubemap layered surface dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_60.surfaceAlignment">
            <summary>
            Alignment requirements for surfaces
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_60.concurrentKernels">
            <summary>
            Device can possibly execute multiple kernels concurrently
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_60.ECCEnabled">
            <summary>
            Device has ECC support enabled
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_60.pciBusID">
            <summary>
            PCI bus ID of the device
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_60.pciDeviceID">
            <summary>
            PCI device ID of the device
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_60.pciDomainID">
            <summary>
            PCI domain ID of the device
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_60.tccDriver">
            <summary>
            1 if device is a Tesla device using TCC driver, 0 otherwise
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_60.asyncEngineCount">
            <summary>
            Number of asynchronous engines
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_60.unifiedAddressing">
            <summary>
            Device shares a unified address space with the host
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_60.memoryClockRate">
            <summary>
            Peak memory clock frequency in kilohertz
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_60.memoryBusWidth">
            <summary>
            Global memory bus width in bits
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_60.l2CacheSize">
            <summary>
            Size of L2 cache in bytes
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_60.maxThreadsPerMultiProcessor">
            <summary>
            Maximum resident threads per multiprocessor
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_60.streamPrioritiesSupported">
            <summary>
            Device supports stream priorities
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_60.globalL1CacheSupported">
            <summary>
            Device supports caching globals in L1
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_60.localL1CacheSupported">
            <summary>
            Device supports caching locals in L1
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_60.sharedMemPerMultiprocessor">
            <summary>
            Shared memory available per multiprocessor in bytes
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_60.regsPerMultiprocessor">
            <summary>
            32-bit registers available per multiprocessor
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_60.managedMemory">
            <summary>
            Device supports allocating managed memory on this system
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_60.isMultiGpuBoard">
            <summary>
            Device is on a multi-GPU board
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_60.multiGpuBoardGroupID">
            <summary>
            Unique identifier for a group of devices on the same multi-GPU board
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_65.name">
            <summary>
            ASCII string identifying device
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_65.totalGlobalMem">
            <summary>
            Global memory available on device in bytes
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_65.sharedMemPerBlock">
            <summary>
            Shared memory available per block in bytes
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_65.regsPerBlock">
            <summary>
            32-bit registers available per block
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_65.warpSize">
            <summary>
            Warp size in threads
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_65.memPitch">
            <summary>
            Maximum pitch in bytes allowed by memory copies
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_65.maxThreadsPerBlock">
            <summary>
            Maximum number of threads per block
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_65.maxThreadsDim">
            <summary>
            Maximum size of each dimension of a block
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_65.maxGridSize">
            <summary>
            Maximum size of each dimension of a grid
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_65.clockRate">
            <summary>
            Clock frequency in kilohertz
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_65.totalConstMem">
            <summary>
            Constant memory available on device in bytes
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_65.major">
            <summary>
            Major compute capability
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_65.minor">
            <summary>
            Minor compute capability
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_65.textureAlignment">
            <summary>
            Alignment requirement for textures
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_65.texturePitchAlignment">
            <summary>
            Pitch alignment requirement for texture references bound to pitched memory
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_65.deviceOverlap">
            <summary>
            Device can concurrently copy memory and execute a kernel. Deprecated. Use instead asyncEngineCount.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_65.multiProcessorCount">
            <summary>
            Number of multiprocessors on device
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_65.kernelExecTimeoutEnabled">
            <summary>
            Specified whether there is a run time limit on kernels
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_65.integrated">
            <summary>
            Device is integrated as opposed to discrete
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_65.canMapHostMemory">
            <summary>
            Device can map host memory with cudaHostAlloc/cudaHostGetDevicePointer
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_65.computeMode">
            <summary>
            Compute mode (See ::cudaComputeMode)
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_65.maxTexture1D">
            <summary>
            Maximum 1D texture size
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_65.maxTexture1DMipmap">
            <summary>
            Maximum 1D mipmapped texture size
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_65.maxTexture1DLinear">
            <summary>
            Maximum size for 1D textures bound to linear memory
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_65.maxTexture2D">
            <summary>
            Maximum 2D texture dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_65.maxTexture2DMipmap">
            <summary>
            Maximum 2D mipmapped texture dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_65.maxTexture2DLinear">
            <summary>
            Maximum dimensions (width, height, pitch) for 2D textures bound to pitched memory
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_65.maxTexture2DGather">
            <summary>
            Maximum 2D texture dimensions if texture gather operations have to be performed
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_65.maxTexture3D">
            <summary>
            Maximum 3D texture dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_65.maxTexture3DAlt">
            <summary>
            Maximum alternate 3D texture dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_65.maxTextureCubemap">
            <summary>
            Maximum Cubemap texture dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_65.maxTexture1DLayered">
            <summary>
            Maximum 1D layered texture dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_65.maxTexture2DLayered">
            <summary>
            Maximum 2D layered texture dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_65.maxTextureCubemapLayered">
            <summary>
            Maximum Cubemap layered texture dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_65.maxSurface1D">
            <summary>
            Maximum 1D surface size
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_65.maxSurface2D">
            <summary>
            Maximum 2D surface dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_65.maxSurface3D">
            <summary>
            Maximum 3D surface dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_65.maxSurface1DLayered">
            <summary>
            Maximum 1D layered surface dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_65.maxSurface2DLayered">
            <summary>
            Maximum 2D layered surface dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_65.maxSurfaceCubemap">
            <summary>
            Maximum Cubemap surface dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_65.maxSurfaceCubemapLayered">
            <summary>
            Maximum Cubemap layered surface dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_65.surfaceAlignment">
            <summary>
            Alignment requirements for surfaces
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_65.concurrentKernels">
            <summary>
            Device can possibly execute multiple kernels concurrently
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_65.ECCEnabled">
            <summary>
            Device has ECC support enabled
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_65.pciBusID">
            <summary>
            PCI bus ID of the device
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_65.pciDeviceID">
            <summary>
            PCI device ID of the device
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_65.pciDomainID">
            <summary>
            PCI domain ID of the device
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_65.tccDriver">
            <summary>
            1 if device is a Tesla device using TCC driver, 0 otherwise
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_65.asyncEngineCount">
            <summary>
            Number of asynchronous engines
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_65.unifiedAddressing">
            <summary>
            Device shares a unified address space with the host
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_65.memoryClockRate">
            <summary>
            Peak memory clock frequency in kilohertz
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_65.memoryBusWidth">
            <summary>
            Global memory bus width in bits
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_65.l2CacheSize">
            <summary>
            Size of L2 cache in bytes
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_65.maxThreadsPerMultiProcessor">
            <summary>
            Maximum resident threads per multiprocessor
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_65.streamPrioritiesSupported">
            <summary>
            Device supports stream priorities
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_65.globalL1CacheSupported">
            <summary>
            Device supports caching globals in L1
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_65.localL1CacheSupported">
            <summary>
            Device supports caching locals in L1
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_65.sharedMemPerMultiprocessor">
            <summary>
            Shared memory available per multiprocessor in bytes
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_65.regsPerMultiprocessor">
            <summary>
            32-bit registers available per multiprocessor
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_65.managedMemory">
            <summary>
            Device supports allocating managed memory on this system
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_65.isMultiGpuBoard">
            <summary>
            Device is on a multi-GPU board
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_65.multiGpuBoardGroupID">
            <summary>
            Unique identifier for a group of devices on the same multi-GPU board
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_70.name">
            <summary>
            ASCII string identifying device
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_70.totalGlobalMem">
            <summary>
            Global memory available on device in bytes
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_70.sharedMemPerBlock">
            <summary>
            Shared memory available per block in bytes
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_70.regsPerBlock">
            <summary>
            32-bit registers available per block
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_70.warpSize">
            <summary>
            Warp size in threads
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_70.memPitch">
            <summary>
            Maximum pitch in bytes allowed by memory copies
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_70.maxThreadsPerBlock">
            <summary>
            Maximum number of threads per block
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_70.maxThreadsDim">
            <summary>
            Maximum size of each dimension of a block
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_70.maxGridSize">
            <summary>
            Maximum size of each dimension of a grid
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_70.clockRate">
            <summary>
            Clock frequency in kilohertz
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_70.totalConstMem">
            <summary>
            Constant memory available on device in bytes
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_70.major">
            <summary>
            Major compute capability
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_70.minor">
            <summary>
            Minor compute capability
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_70.textureAlignment">
            <summary>
            Alignment requirement for textures
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_70.texturePitchAlignment">
            <summary>
            Pitch alignment requirement for texture references bound to pitched memory
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_70.deviceOverlap">
            <summary>
            Device can concurrently copy memory and execute a kernel. Deprecated. Use instead asyncEngineCount.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_70.multiProcessorCount">
            <summary>
            Number of multiprocessors on device
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_70.kernelExecTimeoutEnabled">
            <summary>
            Specified whether there is a run time limit on kernels
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_70.integrated">
            <summary>
            Device is integrated as opposed to discrete
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_70.canMapHostMemory">
            <summary>
            Device can map host memory with cudaHostAlloc/cudaHostGetDevicePointer
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_70.computeMode">
            <summary>
            Compute mode (See ::cudaComputeMode)
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_70.maxTexture1D">
            <summary>
            Maximum 1D texture size
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_70.maxTexture1DMipmap">
            <summary>
            Maximum 1D mipmapped texture size
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_70.maxTexture1DLinear">
            <summary>
            Maximum size for 1D textures bound to linear memory
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_70.maxTexture2D">
            <summary>
            Maximum 2D texture dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_70.maxTexture2DMipmap">
            <summary>
            Maximum 2D mipmapped texture dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_70.maxTexture2DLinear">
            <summary>
            Maximum dimensions (width, height, pitch) for 2D textures bound to pitched memory
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_70.maxTexture2DGather">
            <summary>
            Maximum 2D texture dimensions if texture gather operations have to be performed
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_70.maxTexture3D">
            <summary>
            Maximum 3D texture dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_70.maxTexture3DAlt">
            <summary>
            Maximum alternate 3D texture dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_70.maxTextureCubemap">
            <summary>
            Maximum Cubemap texture dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_70.maxTexture1DLayered">
            <summary>
            Maximum 1D layered texture dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_70.maxTexture2DLayered">
            <summary>
            Maximum 2D layered texture dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_70.maxTextureCubemapLayered">
            <summary>
            Maximum Cubemap layered texture dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_70.maxSurface1D">
            <summary>
            Maximum 1D surface size
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_70.maxSurface2D">
            <summary>
            Maximum 2D surface dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_70.maxSurface3D">
            <summary>
            Maximum 3D surface dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_70.maxSurface1DLayered">
            <summary>
            Maximum 1D layered surface dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_70.maxSurface2DLayered">
            <summary>
            Maximum 2D layered surface dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_70.maxSurfaceCubemap">
            <summary>
            Maximum Cubemap surface dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_70.maxSurfaceCubemapLayered">
            <summary>
            Maximum Cubemap layered surface dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_70.surfaceAlignment">
            <summary>
            Alignment requirements for surfaces
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_70.concurrentKernels">
            <summary>
            Device can possibly execute multiple kernels concurrently
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_70.ECCEnabled">
            <summary>
            Device has ECC support enabled
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_70.pciBusID">
            <summary>
            PCI bus ID of the device
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_70.pciDeviceID">
            <summary>
            PCI device ID of the device
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_70.pciDomainID">
            <summary>
            PCI domain ID of the device
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_70.tccDriver">
            <summary>
            1 if device is a Tesla device using TCC driver, 0 otherwise
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_70.asyncEngineCount">
            <summary>
            Number of asynchronous engines
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_70.unifiedAddressing">
            <summary>
            Device shares a unified address space with the host
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_70.memoryClockRate">
            <summary>
            Peak memory clock frequency in kilohertz
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_70.memoryBusWidth">
            <summary>
            Global memory bus width in bits
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_70.l2CacheSize">
            <summary>
            Size of L2 cache in bytes
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_70.maxThreadsPerMultiProcessor">
            <summary>
            Maximum resident threads per multiprocessor
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_70.streamPrioritiesSupported">
            <summary>
            Device supports stream priorities
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_70.globalL1CacheSupported">
            <summary>
            Device supports caching globals in L1
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_70.localL1CacheSupported">
            <summary>
            Device supports caching locals in L1
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_70.sharedMemPerMultiprocessor">
            <summary>
            Shared memory available per multiprocessor in bytes
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_70.regsPerMultiprocessor">
            <summary>
            32-bit registers available per multiprocessor
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_70.managedMemory">
            <summary>
            Device supports allocating managed memory on this system
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_70.isMultiGpuBoard">
            <summary>
            Device is on a multi-GPU board
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_70.multiGpuBoardGroupID">
            <summary>
            Unique identifier for a group of devices on the same multi-GPU board
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_80.name">
            <summary>
            ASCII string identifying device
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_80.totalGlobalMem">
            <summary>
            Global memory available on device in bytes
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_80.sharedMemPerBlock">
            <summary>
            Shared memory available per block in bytes
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_80.regsPerBlock">
            <summary>
            32-bit registers available per block
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_80.warpSize">
            <summary>
            Warp size in threads
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_80.memPitch">
            <summary>
            Maximum pitch in bytes allowed by memory copies
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_80.maxThreadsPerBlock">
            <summary>
            Maximum number of threads per block
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_80.maxThreadsDim">
            <summary>
            Maximum size of each dimension of a block
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_80.maxGridSize">
            <summary>
            Maximum size of each dimension of a grid
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_80.clockRate">
            <summary>
            Clock frequency in kilohertz
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_80.totalConstMem">
            <summary>
            Constant memory available on device in bytes
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_80.major">
            <summary>
            Major compute capability
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_80.minor">
            <summary>
            Minor compute capability
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_80.textureAlignment">
            <summary>
            Alignment requirement for textures
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_80.texturePitchAlignment">
            <summary>
            Pitch alignment requirement for texture references bound to pitched memory
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_80.deviceOverlap">
            <summary>
            Device can concurrently copy memory and execute a kernel. Deprecated. Use instead asyncEngineCount.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_80.multiProcessorCount">
            <summary>
            Number of multiprocessors on device
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_80.kernelExecTimeoutEnabled">
            <summary>
            Specified whether there is a run time limit on kernels
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_80.integrated">
            <summary>
            Device is integrated as opposed to discrete
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_80.canMapHostMemory">
            <summary>
            Device can map host memory with cudaHostAlloc/cudaHostGetDevicePointer
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_80.computeMode">
            <summary>
            Compute mode (See ::cudaComputeMode)
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_80.maxTexture1D">
            <summary>
            Maximum 1D texture size
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_80.maxTexture1DMipmap">
            <summary>
            Maximum 1D mipmapped texture size
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_80.maxTexture1DLinear">
            <summary>
            Maximum size for 1D textures bound to linear memory
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_80.maxTexture2D">
            <summary>
            Maximum 2D texture dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_80.maxTexture2DMipmap">
            <summary>
            Maximum 2D mipmapped texture dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_80.maxTexture2DLinear">
            <summary>
            Maximum dimensions (width, height, pitch) for 2D textures bound to pitched memory
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_80.maxTexture2DGather">
            <summary>
            Maximum 2D texture dimensions if texture gather operations have to be performed
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_80.maxTexture3D">
            <summary>
            Maximum 3D texture dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_80.maxTexture3DAlt">
            <summary>
            Maximum alternate 3D texture dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_80.maxTextureCubemap">
            <summary>
            Maximum Cubemap texture dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_80.maxTexture1DLayered">
            <summary>
            Maximum 1D layered texture dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_80.maxTexture2DLayered">
            <summary>
            Maximum 2D layered texture dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_80.maxTextureCubemapLayered">
            <summary>
            Maximum Cubemap layered texture dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_80.maxSurface1D">
            <summary>
            Maximum 1D surface size
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_80.maxSurface2D">
            <summary>
            Maximum 2D surface dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_80.maxSurface3D">
            <summary>
            Maximum 3D surface dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_80.maxSurface1DLayered">
            <summary>
            Maximum 1D layered surface dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_80.maxSurface2DLayered">
            <summary>
            Maximum 2D layered surface dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_80.maxSurfaceCubemap">
            <summary>
            Maximum Cubemap surface dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_80.maxSurfaceCubemapLayered">
            <summary>
            Maximum Cubemap layered surface dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_80.surfaceAlignment">
            <summary>
            Alignment requirements for surfaces
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_80.concurrentKernels">
            <summary>
            Device can possibly execute multiple kernels concurrently
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_80.ECCEnabled">
            <summary>
            Device has ECC support enabled
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_80.pciBusID">
            <summary>
            PCI bus ID of the device
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_80.pciDeviceID">
            <summary>
            PCI device ID of the device
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_80.pciDomainID">
            <summary>
            PCI domain ID of the device
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_80.tccDriver">
            <summary>
            1 if device is a Tesla device using TCC driver, 0 otherwise
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_80.asyncEngineCount">
            <summary>
            Number of asynchronous engines
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_80.unifiedAddressing">
            <summary>
            Device shares a unified address space with the host
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_80.memoryClockRate">
            <summary>
            Peak memory clock frequency in kilohertz
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_80.memoryBusWidth">
            <summary>
            Global memory bus width in bits
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_80.l2CacheSize">
            <summary>
            Size of L2 cache in bytes
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_80.maxThreadsPerMultiProcessor">
            <summary>
            Maximum resident threads per multiprocessor
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_80.streamPrioritiesSupported">
            <summary>
            Device supports stream priorities
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_80.globalL1CacheSupported">
            <summary>
            Device supports caching globals in L1
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_80.localL1CacheSupported">
            <summary>
            Device supports caching locals in L1
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_80.sharedMemPerMultiprocessor">
            <summary>
            Shared memory available per multiprocessor in bytes
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_80.regsPerMultiprocessor">
            <summary>
            32-bit registers available per multiprocessor
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_80.managedMemory">
            <summary>
            Device supports allocating managed memory on this system
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_80.isMultiGpuBoard">
            <summary>
            Device is on a multi-GPU board
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_80.multiGpuBoardGroupID">
            <summary>
            Unique identifier for a group of devices on the same multi-GPU board
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_80.hostNativeAtomicSupported">
            <summary>
            Link between the device and the host supports native atomic operations
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_80.singleToDoublePrecisionPerfRatio">
            <summary>
            Ratio of single precision performance (in floating-point operations per second) to double precision performance
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_80.pageableMemoryAccess">
            <summary>
            Device supports coherently accessing pageable memory without calling cudaHostRegister on it
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_80.concurrentManagedAccess">
            <summary>
            Device can coherently access managed memory concurrently with the CPU
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_90.name">
            <summary>
            ASCII string identifying device
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_90.totalGlobalMem">
            <summary>
            Global memory available on device in bytes
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_90.sharedMemPerBlock">
            <summary>
            Shared memory available per block in bytes
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_90.regsPerBlock">
            <summary>
            32-bit registers available per block
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_90.warpSize">
            <summary>
            Warp size in threads
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_90.memPitch">
            <summary>
            Maximum pitch in bytes allowed by memory copies
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_90.maxThreadsPerBlock">
            <summary>
            Maximum number of threads per block
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_90.maxThreadsDim">
            <summary>
            Maximum size of each dimension of a block
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_90.maxGridSize">
            <summary>
            Maximum size of each dimension of a grid
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_90.clockRate">
            <summary>
            Clock frequency in kilohertz
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_90.totalConstMem">
            <summary>
            Constant memory available on device in bytes
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_90.major">
            <summary>
            Major compute capability
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_90.minor">
            <summary>
            Minor compute capability
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_90.textureAlignment">
            <summary>
            Alignment requirement for textures
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_90.texturePitchAlignment">
            <summary>
            Pitch alignment requirement for texture references bound to pitched memory
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_90.deviceOverlap">
            <summary>
            Device can concurrently copy memory and execute a kernel. Deprecated. Use instead asyncEngineCount.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_90.multiProcessorCount">
            <summary>
            Number of multiprocessors on device
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_90.kernelExecTimeoutEnabled">
            <summary>
            Specified whether there is a run time limit on kernels
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_90.integrated">
            <summary>
            Device is integrated as opposed to discrete
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_90.canMapHostMemory">
            <summary>
            Device can map host memory with cudaHostAlloc/cudaHostGetDevicePointer
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_90.computeMode">
            <summary>
            Compute mode (See ::cudaComputeMode)
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_90.maxTexture1D">
            <summary>
            Maximum 1D texture size
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_90.maxTexture1DMipmap">
            <summary>
            Maximum 1D mipmapped texture size
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_90.maxTexture1DLinear">
            <summary>
            Maximum size for 1D textures bound to linear memory
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_90.maxTexture2D">
            <summary>
            Maximum 2D texture dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_90.maxTexture2DMipmap">
            <summary>
            Maximum 2D mipmapped texture dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_90.maxTexture2DLinear">
            <summary>
            Maximum dimensions (width, height, pitch) for 2D textures bound to pitched memory
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_90.maxTexture2DGather">
            <summary>
            Maximum 2D texture dimensions if texture gather operations have to be performed
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_90.maxTexture3D">
            <summary>
            Maximum 3D texture dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_90.maxTexture3DAlt">
            <summary>
            Maximum alternate 3D texture dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_90.maxTextureCubemap">
            <summary>
            Maximum Cubemap texture dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_90.maxTexture1DLayered">
            <summary>
            Maximum 1D layered texture dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_90.maxTexture2DLayered">
            <summary>
            Maximum 2D layered texture dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_90.maxTextureCubemapLayered">
            <summary>
            Maximum Cubemap layered texture dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_90.maxSurface1D">
            <summary>
            Maximum 1D surface size
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_90.maxSurface2D">
            <summary>
            Maximum 2D surface dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_90.maxSurface3D">
            <summary>
            Maximum 3D surface dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_90.maxSurface1DLayered">
            <summary>
            Maximum 1D layered surface dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_90.maxSurface2DLayered">
            <summary>
            Maximum 2D layered surface dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_90.maxSurfaceCubemap">
            <summary>
            Maximum Cubemap surface dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_90.maxSurfaceCubemapLayered">
            <summary>
            Maximum Cubemap layered surface dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_90.surfaceAlignment">
            <summary>
            Alignment requirements for surfaces
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_90.concurrentKernels">
            <summary>
            Device can possibly execute multiple kernels concurrently
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_90.ECCEnabled">
            <summary>
            Device has ECC support enabled
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_90.pciBusID">
            <summary>
            PCI bus ID of the device
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_90.pciDeviceID">
            <summary>
            PCI device ID of the device
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_90.pciDomainID">
            <summary>
            PCI domain ID of the device
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_90.tccDriver">
            <summary>
            1 if device is a Tesla device using TCC driver, 0 otherwise
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_90.asyncEngineCount">
            <summary>
            Number of asynchronous engines
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_90.unifiedAddressing">
            <summary>
            Device shares a unified address space with the host
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_90.memoryClockRate">
            <summary>
            Peak memory clock frequency in kilohertz
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_90.memoryBusWidth">
            <summary>
            Global memory bus width in bits
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_90.l2CacheSize">
            <summary>
            Size of L2 cache in bytes
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_90.maxThreadsPerMultiProcessor">
            <summary>
            Maximum resident threads per multiprocessor
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_90.streamPrioritiesSupported">
            <summary>
            Device supports stream priorities
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_90.globalL1CacheSupported">
            <summary>
            Device supports caching globals in L1
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_90.localL1CacheSupported">
            <summary>
            Device supports caching locals in L1
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_90.sharedMemPerMultiprocessor">
            <summary>
            Shared memory available per multiprocessor in bytes
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_90.regsPerMultiprocessor">
            <summary>
            32-bit registers available per multiprocessor
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_90.managedMemory">
            <summary>
            Device supports allocating managed memory on this system
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_90.isMultiGpuBoard">
            <summary>
            Device is on a multi-GPU board
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_90.multiGpuBoardGroupID">
            <summary>
            Unique identifier for a group of devices on the same multi-GPU board
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_90.hostNativeAtomicSupported">
            <summary>
            Link between the device and the host supports native atomic operations
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_90.singleToDoublePrecisionPerfRatio">
            <summary>
            Ratio of single precision performance (in floating-point operations per second) to double precision performance
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_90.pageableMemoryAccess">
            <summary>
            Device supports coherently accessing pageable memory without calling cudaHostRegister on it
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_90.concurrentManagedAccess">
            <summary>
            Device can coherently access managed memory concurrently with the CPU
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_90.computePreemptionSupported">
            <summary>
            Device supports Compute Preemption
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_90.canUseHostPointerForRegisteredMem">
            <summary>
            Device can access host registered memory at the same virtual address as the CPU
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_90.cooperativeLaunch">
            <summary>
            Device supports launching cooperative kernels via ::cudaLaunchCooperativeKernel
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_90.cooperativeMultiDeviceLaunch">
            <summary>
            Device can participate in cooperative kernels launched via ::cudaLaunchCooperativeKernelMultiDevice
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_90.sharedMemPerBlockOptin">
            <summary>
            Per device maximum shared memory per block usable by special opt in
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_91.name">
            <summary>
            ASCII string identifying device
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_91.totalGlobalMem">
            <summary>
            Global memory available on device in bytes
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_91.sharedMemPerBlock">
            <summary>
            Shared memory available per block in bytes
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_91.regsPerBlock">
            <summary>
            32-bit registers available per block
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_91.warpSize">
            <summary>
            Warp size in threads
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_91.memPitch">
            <summary>
            Maximum pitch in bytes allowed by memory copies
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_91.maxThreadsPerBlock">
            <summary>
            Maximum number of threads per block
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_91.maxThreadsDim">
            <summary>
            Maximum size of each dimension of a block
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_91.maxGridSize">
            <summary>
            Maximum size of each dimension of a grid
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_91.clockRate">
            <summary>
            Clock frequency in kilohertz
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_91.totalConstMem">
            <summary>
            Constant memory available on device in bytes
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_91.major">
            <summary>
            Major compute capability
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_91.minor">
            <summary>
            Minor compute capability
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_91.textureAlignment">
            <summary>
            Alignment requirement for textures
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_91.texturePitchAlignment">
            <summary>
            Pitch alignment requirement for texture references bound to pitched memory
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_91.deviceOverlap">
            <summary>
            Device can concurrently copy memory and execute a kernel. Deprecated. Use instead asyncEngineCount.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_91.multiProcessorCount">
            <summary>
            Number of multiprocessors on device
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_91.kernelExecTimeoutEnabled">
            <summary>
            Specified whether there is a run time limit on kernels
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_91.integrated">
            <summary>
            Device is integrated as opposed to discrete
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_91.canMapHostMemory">
            <summary>
            Device can map host memory with cudaHostAlloc/cudaHostGetDevicePointer
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_91.computeMode">
            <summary>
            Compute mode (See ::cudaComputeMode)
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_91.maxTexture1D">
            <summary>
            Maximum 1D texture size
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_91.maxTexture1DMipmap">
            <summary>
            Maximum 1D mipmapped texture size
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_91.maxTexture1DLinear">
            <summary>
            Maximum size for 1D textures bound to linear memory
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_91.maxTexture2D">
            <summary>
            Maximum 2D texture dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_91.maxTexture2DMipmap">
            <summary>
            Maximum 2D mipmapped texture dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_91.maxTexture2DLinear">
            <summary>
            Maximum dimensions (width, height, pitch) for 2D textures bound to pitched memory
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_91.maxTexture2DGather">
            <summary>
            Maximum 2D texture dimensions if texture gather operations have to be performed
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_91.maxTexture3D">
            <summary>
            Maximum 3D texture dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_91.maxTexture3DAlt">
            <summary>
            Maximum alternate 3D texture dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_91.maxTextureCubemap">
            <summary>
            Maximum Cubemap texture dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_91.maxTexture1DLayered">
            <summary>
            Maximum 1D layered texture dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_91.maxTexture2DLayered">
            <summary>
            Maximum 2D layered texture dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_91.maxTextureCubemapLayered">
            <summary>
            Maximum Cubemap layered texture dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_91.maxSurface1D">
            <summary>
            Maximum 1D surface size
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_91.maxSurface2D">
            <summary>
            Maximum 2D surface dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_91.maxSurface3D">
            <summary>
            Maximum 3D surface dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_91.maxSurface1DLayered">
            <summary>
            Maximum 1D layered surface dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_91.maxSurface2DLayered">
            <summary>
            Maximum 2D layered surface dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_91.maxSurfaceCubemap">
            <summary>
            Maximum Cubemap surface dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_91.maxSurfaceCubemapLayered">
            <summary>
            Maximum Cubemap layered surface dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_91.surfaceAlignment">
            <summary>
            Alignment requirements for surfaces
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_91.concurrentKernels">
            <summary>
            Device can possibly execute multiple kernels concurrently
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_91.ECCEnabled">
            <summary>
            Device has ECC support enabled
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_91.pciBusID">
            <summary>
            PCI bus ID of the device
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_91.pciDeviceID">
            <summary>
            PCI device ID of the device
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_91.pciDomainID">
            <summary>
            PCI domain ID of the device
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_91.tccDriver">
            <summary>
            1 if device is a Tesla device using TCC driver, 0 otherwise
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_91.asyncEngineCount">
            <summary>
            Number of asynchronous engines
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_91.unifiedAddressing">
            <summary>
            Device shares a unified address space with the host
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_91.memoryClockRate">
            <summary>
            Peak memory clock frequency in kilohertz
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_91.memoryBusWidth">
            <summary>
            Global memory bus width in bits
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_91.l2CacheSize">
            <summary>
            Size of L2 cache in bytes
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_91.maxThreadsPerMultiProcessor">
            <summary>
            Maximum resident threads per multiprocessor
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_91.streamPrioritiesSupported">
            <summary>
            Device supports stream priorities
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_91.globalL1CacheSupported">
            <summary>
            Device supports caching globals in L1
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_91.localL1CacheSupported">
            <summary>
            Device supports caching locals in L1
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_91.sharedMemPerMultiprocessor">
            <summary>
            Shared memory available per multiprocessor in bytes
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_91.regsPerMultiprocessor">
            <summary>
            32-bit registers available per multiprocessor
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_91.managedMemory">
            <summary>
            Device supports allocating managed memory on this system
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_91.isMultiGpuBoard">
            <summary>
            Device is on a multi-GPU board
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_91.multiGpuBoardGroupID">
            <summary>
            Unique identifier for a group of devices on the same multi-GPU board
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_91.hostNativeAtomicSupported">
            <summary>
            Link between the device and the host supports native atomic operations
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_91.singleToDoublePrecisionPerfRatio">
            <summary>
            Ratio of single precision performance (in floating-point operations per second) to double precision performance
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_91.pageableMemoryAccess">
            <summary>
            Device supports coherently accessing pageable memory without calling cudaHostRegister on it
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_91.concurrentManagedAccess">
            <summary>
            Device can coherently access managed memory concurrently with the CPU
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_91.computePreemptionSupported">
            <summary>
            Device supports Compute Preemption
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_91.canUseHostPointerForRegisteredMem">
            <summary>
            Device can access host registered memory at the same virtual address as the CPU
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_91.cooperativeLaunch">
            <summary>
            Device supports launching cooperative kernels via ::cudaLaunchCooperativeKernel
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_91.cooperativeMultiDeviceLaunch">
            <summary>
            Device can participate in cooperative kernels launched via ::cudaLaunchCooperativeKernelMultiDevice
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_91.sharedMemPerBlockOptin">
            <summary>
            Per device maximum shared memory per block usable by special opt in
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_92.name">
            <summary>
            ASCII string identifying device
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_92.totalGlobalMem">
            <summary>
            Global memory available on device in bytes
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_92.sharedMemPerBlock">
            <summary>
            Shared memory available per block in bytes
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_92.regsPerBlock">
            <summary>
            32-bit registers available per block
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_92.warpSize">
            <summary>
            Warp size in threads
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_92.memPitch">
            <summary>
            Maximum pitch in bytes allowed by memory copies
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_92.maxThreadsPerBlock">
            <summary>
            Maximum number of threads per block
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_92.maxThreadsDim">
            <summary>
            Maximum size of each dimension of a block
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_92.maxGridSize">
            <summary>
            Maximum size of each dimension of a grid
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_92.clockRate">
            <summary>
            Clock frequency in kilohertz
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_92.totalConstMem">
            <summary>
            Constant memory available on device in bytes
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_92.major">
            <summary>
            Major compute capability
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_92.minor">
            <summary>
            Minor compute capability
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_92.textureAlignment">
            <summary>
            Alignment requirement for textures
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_92.texturePitchAlignment">
            <summary>
            Pitch alignment requirement for texture references bound to pitched memory
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_92.deviceOverlap">
            <summary>
            Device can concurrently copy memory and execute a kernel. Deprecated. Use instead asyncEngineCount.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_92.multiProcessorCount">
            <summary>
            Number of multiprocessors on device
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_92.kernelExecTimeoutEnabled">
            <summary>
            Specified whether there is a run time limit on kernels
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_92.integrated">
            <summary>
            Device is integrated as opposed to discrete
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_92.canMapHostMemory">
            <summary>
            Device can map host memory with cudaHostAlloc/cudaHostGetDevicePointer
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_92.computeMode">
            <summary>
            Compute mode (See ::cudaComputeMode)
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_92.maxTexture1D">
            <summary>
            Maximum 1D texture size
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_92.maxTexture1DMipmap">
            <summary>
            Maximum 1D mipmapped texture size
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_92.maxTexture1DLinear">
            <summary>
            Maximum size for 1D textures bound to linear memory
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_92.maxTexture2D">
            <summary>
            Maximum 2D texture dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_92.maxTexture2DMipmap">
            <summary>
            Maximum 2D mipmapped texture dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_92.maxTexture2DLinear">
            <summary>
            Maximum dimensions (width, height, pitch) for 2D textures bound to pitched memory
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_92.maxTexture2DGather">
            <summary>
            Maximum 2D texture dimensions if texture gather operations have to be performed
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_92.maxTexture3D">
            <summary>
            Maximum 3D texture dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_92.maxTexture3DAlt">
            <summary>
            Maximum alternate 3D texture dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_92.maxTextureCubemap">
            <summary>
            Maximum Cubemap texture dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_92.maxTexture1DLayered">
            <summary>
            Maximum 1D layered texture dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_92.maxTexture2DLayered">
            <summary>
            Maximum 2D layered texture dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_92.maxTextureCubemapLayered">
            <summary>
            Maximum Cubemap layered texture dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_92.maxSurface1D">
            <summary>
            Maximum 1D surface size
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_92.maxSurface2D">
            <summary>
            Maximum 2D surface dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_92.maxSurface3D">
            <summary>
            Maximum 3D surface dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_92.maxSurface1DLayered">
            <summary>
            Maximum 1D layered surface dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_92.maxSurface2DLayered">
            <summary>
            Maximum 2D layered surface dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_92.maxSurfaceCubemap">
            <summary>
            Maximum Cubemap surface dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_92.maxSurfaceCubemapLayered">
            <summary>
            Maximum Cubemap layered surface dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_92.surfaceAlignment">
            <summary>
            Alignment requirements for surfaces
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_92.concurrentKernels">
            <summary>
            Device can possibly execute multiple kernels concurrently
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_92.ECCEnabled">
            <summary>
            Device has ECC support enabled
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_92.pciBusID">
            <summary>
            PCI bus ID of the device
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_92.pciDeviceID">
            <summary>
            PCI device ID of the device
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_92.pciDomainID">
            <summary>
            PCI domain ID of the device
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_92.tccDriver">
            <summary>
            1 if device is a Tesla device using TCC driver, 0 otherwise
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_92.asyncEngineCount">
            <summary>
            Number of asynchronous engines
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_92.unifiedAddressing">
            <summary>
            Device shares a unified address space with the host
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_92.memoryClockRate">
            <summary>
            Peak memory clock frequency in kilohertz
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_92.memoryBusWidth">
            <summary>
            Global memory bus width in bits
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_92.l2CacheSize">
            <summary>
            Size of L2 cache in bytes
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_92.maxThreadsPerMultiProcessor">
            <summary>
            Maximum resident threads per multiprocessor
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_92.streamPrioritiesSupported">
            <summary>
            Device supports stream priorities
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_92.globalL1CacheSupported">
            <summary>
            Device supports caching globals in L1
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_92.localL1CacheSupported">
            <summary>
            Device supports caching locals in L1
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_92.sharedMemPerMultiprocessor">
            <summary>
            Shared memory available per multiprocessor in bytes
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_92.regsPerMultiprocessor">
            <summary>
            32-bit registers available per multiprocessor
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_92.managedMemory">
            <summary>
            Device supports allocating managed memory on this system
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_92.isMultiGpuBoard">
            <summary>
            Device is on a multi-GPU board
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_92.multiGpuBoardGroupID">
            <summary>
            Unique identifier for a group of devices on the same multi-GPU board
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_92.hostNativeAtomicSupported">
            <summary>
            Link between the device and the host supports native atomic operations
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_92.singleToDoublePrecisionPerfRatio">
            <summary>
            Ratio of single precision performance (in floating-point operations per second) to double precision performance
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_92.pageableMemoryAccess">
            <summary>
            Device supports coherently accessing pageable memory without calling cudaHostRegister on it
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_92.concurrentManagedAccess">
            <summary>
            Device can coherently access managed memory concurrently with the CPU
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_92.computePreemptionSupported">
            <summary>
            Device supports Compute Preemption
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_92.canUseHostPointerForRegisteredMem">
            <summary>
            Device can access host registered memory at the same virtual address as the CPU
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_92.cooperativeLaunch">
            <summary>
            Device supports launching cooperative kernels via ::cudaLaunchCooperativeKernel
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_92.cooperativeMultiDeviceLaunch">
            <summary>
            Device can participate in cooperative kernels launched via ::cudaLaunchCooperativeKernelMultiDevice
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_92.sharedMemPerBlockOptin">
            <summary>
            Per device maximum shared memory per block usable by special opt in
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_92.pageableMemoryAccessUsesHostPageTables">
            <summary>
            Device accesses pageable memory via the host's page tables
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.cudaDeviceProp_92.directManagedMemAccessFromHost">
            <summary>
            Host can directly access managed memory on the device without migration
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.CpuDeviceId">
            <summary>
            Device id that represents the CPU
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuda.InvalidDeviceId">
            <summary>
            Device id that represents an invalid device
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.cuda.instance">
            <summary>
            current instance
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.GetCudaVersion">
            <summary>
            returns the cuda runtime version
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.SetValidDevices(System.Int32[])">
            <summary>
            Set a list of devices that can be used for CUDA
            </summary>
            <param name="devs"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ChooseDevice(System.Int32@,Hybridizer.Runtime.CUDAImports.cudaDeviceProp@)">
            <summary>
            Select compute-device which best matches criteria. Select compute-device which best matches criteria. 
            </summary>
            <param name="device"></param>
            <param name="prop"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.DeviceGetAttribute(System.Int32@,Hybridizer.Runtime.CUDAImports.cudaDeviceAttr,System.Int32)">
            <summary>
            Returns information about the device. 
            </summary>
            <param name="value"></param>
            <param name="attr"></param>
            <param name="device"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.DeviceGetByPCIBusId(System.Int32@,System.String)">
            <summary>
            Returns a handle to a compute device. 
            </summary>
            <param name="device"></param>
            <param name="pciBusId"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.DeviceGetCacheConfig(System.IntPtr)">
            <summary>
            Returns the preferred cache configuration for the current device. 
            </summary>
            <param name="pCacheConfig"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.DeviceGetLimit(Hybridizer.Runtime.CUDAImports.size_t@,Hybridizer.Runtime.CUDAImports.cudaLimit)">
            <summary>
            Returns resource limits. 
            </summary>
            <param name="pValue"></param>
            <param name="limit"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.DeviceGetPCIBusId(System.Text.StringBuilder,System.Int32,System.Int32)">
            <summary>
            Returns a PCI Bus Id string for the device. 
            </summary>
            <param name="pciBusId"></param>
            <param name="len"></param>
            <param name="device"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.DeviceGetSharedMemConfig(System.IntPtr)">
            <summary>
            Returns the shared memory configuration for the current device. 
            </summary>
            <param name="pConfig"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.DeviceReset">
            <summary>
            Destroy all allocations and reset all state on the current device in the current process. 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.DeviceSetCacheConfig(Hybridizer.Runtime.CUDAImports.cudaFuncCache)">
            <summary>
            Sets the preferred cache configuration for the current device. 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.DeviceSetLimit(Hybridizer.Runtime.CUDAImports.cudaLimit,Hybridizer.Runtime.CUDAImports.size_t)">
            <summary>
            Set resource limits.
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.DeviceSetSharedMemConfig(Hybridizer.Runtime.CUDAImports.cudaSharedMemConfig)">
            <summary>
            Sets the shared memory configuration for the current device. 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.DeviceSynchronize">
            <summary>
            Wait for compute device to finish. 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.GetDevice(System.Int32@)">
            <summary>
            Returns which device is currently being used. 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.GetDeviceCount(System.Int32@)">
            <summary>
            Returns the number of compute-capable devices.
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.GetDeviceProperties(Hybridizer.Runtime.CUDAImports.cudaDeviceProp@,System.Int32)">
            <summary>
            Returns information about the compute-device. 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.IpcCloseMemHandle(System.IntPtr)">
            <summary>
            Close memory mapped with <see cref="M:Hybridizer.Runtime.CUDAImports.cuda.IpcOpenMemHandle(System.IntPtr@,Hybridizer.Runtime.CUDAImports.cudaIpcMemHandle_t,System.UInt32)"></see>
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.IpcGetEventHandle(Hybridizer.Runtime.CUDAImports.cudaIpcEventHandle_t@,Hybridizer.Runtime.CUDAImports.cudaEvent_t)">
            <summary>
            Gets an interprocess handle for a previously allocated event. 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.IpcGetMemHandle(Hybridizer.Runtime.CUDAImports.cudaIpcMemHandle_t@,System.IntPtr)">
            <summary>
            Gets an interprocess memory handle for an existing device memory allocation
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.IpcOpenEventHandle(Hybridizer.Runtime.CUDAImports.cudaEvent_t@,Hybridizer.Runtime.CUDAImports.cudaIpcEventHandle_t)">
            <summary>
            Opens an interprocess event handle for use in the current process. 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.IpcOpenMemHandle(System.IntPtr@,Hybridizer.Runtime.CUDAImports.cudaIpcMemHandle_t,System.UInt32)">
            <summary>
            Opens an interprocess memory handle exported from another process and returns a device pointer usable in the local process.
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.SetDevice(System.Int32)">
            <summary>
            Set device to be used for GPU executions. 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.SetDeviceFlags(Hybridizer.Runtime.CUDAImports.deviceFlags)">
            <summary>
            Sets flags to be used for device executions. 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.DeviceGetP2PAttribute(System.Int32@,Hybridizer.Runtime.CUDAImports.cudaDeviceP2PAttr,System.Int32,System.Int32)">
            <summary>
            Queries attributes of the link between two devices.
            </summary>
            <param name="value">Returned value of the requested attribute </param>
            <param name="attr"></param>
            <param name="srcDevice">The source device of the target link. </param>
            <param name="dstDevice">The destination device of the target link.</param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.DeviceGetStreamPriorityRange(System.Int32@,System.Int32@)">
            <summary>
            Returns numerical values that correspond to the least and greatest stream priorities. 
            
            Returns in *leastPriority and *greatestPriority the numerical values that correspond to the least and 
            greatest stream priorities respectively. Stream priorities follow a convention where lower numbers imply 
            greater priorities. The range of meaningful stream priorities is given by [*greatestPriority, *leastPriority].
            If the user attempts to create a stream with a priority value that is outside the the meaningful range as
            specified by this API, the priority is automatically clamped down or up to either *leastPriority or
            *greatestPriority respectively. See cudaStreamCreateWithPriority for details on creating a priority stream.
            A NULL may be passed in for *leastPriority or *greatestPriority if the value is not desired. 
            
            This function will return '0' in both *leastPriority and *greatestPriority if the current context's device 
            does not support stream priorities (see cudaDeviceGetAttribute). 
            </summary>
            <param name="leastPriority">Pointer to an int in which the numerical value for least stream priority is returned </param>
            <param name="greatestPriority">Pointer to an int in which the numerical value for greatest stream priority is returned</param>
            
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.GetDeviceFlags(System.UInt32@)">
            <summary>
            Gets the flags for the current device. 
            </summary>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.GetErrorName(Hybridizer.Runtime.CUDAImports.cudaError_t)">
            <summary>
            Returns the string representation of an error code enum name
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.GetErrorString(Hybridizer.Runtime.CUDAImports.cudaError_t)">
            <summary>
            Returns the description string for an error code
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.GetLastError">
            <summary>
            Returns the last error from a runtime call
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.GetPeekAtLastError">
            <summary>
            Returns the last error from a runtime call
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ThreadExit">
            <summary>
            Exit and clean up from CUDA launches
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ThreadGetLimit(Hybridizer.Runtime.CUDAImports.size_t@,Hybridizer.Runtime.CUDAImports.cudaLimit)">
            <summary>
            Returns resource limits
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ThreadSetLimit(Hybridizer.Runtime.CUDAImports.cudaLimit,Hybridizer.Runtime.CUDAImports.size_t)">
            <summary>
            Set resource limits
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ThreadSynchronize">
            <summary>
            Wait for compute device to finish
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.StreamCreate(Hybridizer.Runtime.CUDAImports.cudaStream_t@)">
            <summary>
            Create an asynchronous stream
            </summary>
            <remarks> <see href="http://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__STREAM.html#group__CUDART__STREAM"/></remarks>
            <param name="stream">Pointer to new stream identifier</param>
            <returns>cudaSuccess, cudaErrorInvalidValue</returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.StreamDestroy(Hybridizer.Runtime.CUDAImports.cudaStream_t)">
            <summary>
            Destroy cuda steam
            </summary>
            <remarks> <see href="http://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__STREAM.html#group__CUDART__STREAM"/></remarks>
            <param name="stream">Stream identifier</param>
            <returns>cudaSuccess, cudaErrorInvalidResourceHandle</returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.StreamQuery(Hybridizer.Runtime.CUDAImports.cudaStream_t)">
            <summary>
            Queries an asynchronous stream for completion status
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.StreamSynchronize(Hybridizer.Runtime.CUDAImports.cudaStream_t)">
            <summary>
            Synchronize cuda steam
            </summary>
            <remarks> <see href="http://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__STREAM.html#group__CUDART__STREAM"/></remarks>
            <param name="stream">Stream identifier</param>
            <returns>cudaSuccess, cudaErrorInvalidResourceHandle</returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.StreamAttachMemAsync(Hybridizer.Runtime.CUDAImports.cudaStream_t,System.IntPtr,Hybridizer.Runtime.CUDAImports.size_t,System.UInt32)">
            <summary>
            Attach memory to a stream asynchronously
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.StreamCreateWithFlags(Hybridizer.Runtime.CUDAImports.cudaStream_t@,System.UInt32)">
            <summary>
            Create an asynchronous stream
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.StreamCreateWithPriority(Hybridizer.Runtime.CUDAImports.cudaStream_t@,System.UInt32,System.Int32)">
            <summary>
            Create an asynchronous stream with the specified priority
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.StreamGetFlags(Hybridizer.Runtime.CUDAImports.cudaStream_t,System.UInt32@)">
            <summary>
            Query the flags of a stream
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.StreamWaitEvent(Hybridizer.Runtime.CUDAImports.cudaStream_t,Hybridizer.Runtime.CUDAImports.cudaEvent_t,System.UInt32)">
            <summary>
            Make a compute stream wait on an event
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.StreamGetPriority(Hybridizer.Runtime.CUDAImports.cudaStream_t,System.Int32@)">
            <summary>
            Query the priority of a stream
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.EventCreate(Hybridizer.Runtime.CUDAImports.cudaEvent_t@)">
            <summary>
            Creates an event object
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.EventCreateWithFlags(Hybridizer.Runtime.CUDAImports.cudaEvent_t@,Hybridizer.Runtime.CUDAImports.cudaEventFlags)">
            <summary>
            Creates an event object with the specified flags
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.EventDestroy(Hybridizer.Runtime.CUDAImports.cudaEvent_t)">
            <summary>
            Destroys an event object
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.EventElapsedTime(System.Single@,Hybridizer.Runtime.CUDAImports.cudaEvent_t,Hybridizer.Runtime.CUDAImports.cudaEvent_t)">
            <summary>
            Computes the elapsed time between events
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.EventQuery(Hybridizer.Runtime.CUDAImports.cudaEvent_t)">
            <summary>
            Queries an event's status
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.EventRecord(Hybridizer.Runtime.CUDAImports.cudaEvent_t,Hybridizer.Runtime.CUDAImports.cudaStream_t)">
            <summary>
            Records an event
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.EventSynchronize(Hybridizer.Runtime.CUDAImports.cudaEvent_t)">
            <summary>
            Waits for an event to complete
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ConfigureCall(Hybridizer.Runtime.CUDAImports.dim3,Hybridizer.Runtime.CUDAImports.dim3,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.cudaStream_t)">
            <summary>
            Configure a device-launch
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.Launch(System.String)">
            <summary>
            Launches a device function. 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.SetupArgument(System.IntPtr,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.size_t)">
            <summary>
            Configure a device launch. 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.FuncGetAttributes(Hybridizer.Runtime.CUDAImports.cudaFuncAttributes@,System.String)">
            <summary>
            Find out attributes for a given function. 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.FuncSetCacheConfig(System.IntPtr,Hybridizer.Runtime.CUDAImports.cudaFuncCache)">
            <summary>
            Sets the preferred cache configuration for a device function. 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.FuncSetSharedMemConfig(System.IntPtr,Hybridizer.Runtime.CUDAImports.cudaSharedMemConfig)">
            <summary>
            Sets the shared memory configuration for a device function. 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.SetDoubleForDevice(System.Double@)">
            <summary>
            Converts a double argument after execution on a device. 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.SetDoubleForHost(System.Double@)">
            <summary>
            Configure a device launch. 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.LaunchKernel(System.IntPtr,Hybridizer.Runtime.CUDAImports.dim3,Hybridizer.Runtime.CUDAImports.dim3,System.IntPtr,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.cudaStream_t)">
            <summary>
            Launches a device function. 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.ArrayGetInfo(Hybridizer.Runtime.CUDAImports.cudaChannelFormatDesc@,Hybridizer.Runtime.CUDAImports.cudaExtent@,System.UInt32@,Hybridizer.Runtime.CUDAImports.cudaArray_t)">
            <summary>
            Gets info about the specified cudaArray
            </summary>
            <param name="desc">Returned array type </param>
            <param name="extent">Returned array shape. 2D arrays will have depth of zero </param>
            <param name="flags">Returned array flags </param>
            <param name="array">The cudaArray to get info for</param>
            <returns>cudaSuccess, cudaErrorInvalidValue</returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.Free(System.IntPtr)">
            <summary>
            Frees memory on the device
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.FreeArray(Hybridizer.Runtime.CUDAImports.cudaArray_t)">
            <summary>
            Frees an array on the device
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.FreeHost(System.IntPtr)">
            <summary>
             Frees page-locked memory
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.FreeMipmappedArray(Hybridizer.Runtime.CUDAImports.cudaMipmappedArray_t)">
            <summary>
            Frees a mipmapped array on the device
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.GetMipmappedArrayLevel(Hybridizer.Runtime.CUDAImports.cudaArray_t@,Hybridizer.Runtime.CUDAImports.cudaMipmappedArray_const_t,System.UInt32)">
            <summary>
            Gets a mipmap level of a CUDA mipmapped array
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.GetSymbolAddress(System.IntPtr@,System.String)">
            <summary>
            Finds the address associated with a CUDA symbol
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.GetSymbolSize(Hybridizer.Runtime.CUDAImports.size_t@,System.String)">
            <summary>
            Finds the size of the object associated with a CUDA symbol
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.HostAlloc(System.IntPtr@,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.cudaHostAllocFlags)">
            <summary>
            Allocates page-locked memory on the host
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.HostGetDevicePointer(System.IntPtr@,System.IntPtr,Hybridizer.Runtime.CUDAImports.cudaGetDevicePointerFlags)">
            <summary>
            asses back device pointer of mapped host memory allocated by cudaHostAlloc or registered by cudaHostRegister
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.HostGetFlags(Hybridizer.Runtime.CUDAImports.cudaHostAllocFlags@,System.IntPtr)">
            <summary>
            Passes back flags used to allocate pinned host memory allocated by cudaHostAlloc
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.HostRegister(System.IntPtr,Hybridizer.Runtime.CUDAImports.size_t,System.UInt32)">
            <summary>
            Registers an existing host memory range for use by CUDA
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.HostUnregister(System.IntPtr)">
            <summary>
            Unregisters a memory range that was registered with cudaHostRegister
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.Malloc(System.IntPtr@,Hybridizer.Runtime.CUDAImports.size_t)">
            <summary>
            Allocates memory on the device
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.Malloc3D(Hybridizer.Runtime.CUDAImports.cudaPitchedPtr@,Hybridizer.Runtime.CUDAImports.cudaExtent)">
            <summary>
            Allocates memory on the device
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.Malloc3DArray(Hybridizer.Runtime.CUDAImports.cudaArray_t@,Hybridizer.Runtime.CUDAImports.cudaChannelFormatDesc@,Hybridizer.Runtime.CUDAImports.cudaExtent,Hybridizer.Runtime.CUDAImports.cudaMallocArrayFlags)">
            <summary>
            Allocates memory on the device
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.MallocArray(Hybridizer.Runtime.CUDAImports.cudaArray_t@,Hybridizer.Runtime.CUDAImports.cudaChannelFormatDesc@,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.cudaMallocArrayFlags)">
            <summary>
            Allocates memory on the device
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.MallocHost(System.IntPtr@,Hybridizer.Runtime.CUDAImports.size_t)">
            <summary>
            Allocates page-locked memory on the host
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.MallocManaged(System.IntPtr@,Hybridizer.Runtime.CUDAImports.size_t,System.UInt32)">
            <summary>
            Allocates memory that will be automatically managed by the Unified Memory system
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.MallocMipmappedArray(Hybridizer.Runtime.CUDAImports.cudaMipmappedArray_t@,Hybridizer.Runtime.CUDAImports.cudaChannelFormatDesc@,Hybridizer.Runtime.CUDAImports.cudaExtent,System.UInt32,System.UInt32)">
            <summary>
            Allocate a mipmapped array on the device
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.MallocPitch(System.IntPtr@,Hybridizer.Runtime.CUDAImports.size_t@,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.size_t)">
            <summary>
            Allocates pitched memory on the device
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.MemAdvise(System.IntPtr,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.cudaMemmoryAdvise,System.Int32)">
            <summary>
             Advise about the usage of a given memory range
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.MemGetInfo(Hybridizer.Runtime.CUDAImports.size_t@,Hybridizer.Runtime.CUDAImports.size_t@)">
            <summary>
            Gets free and total device memory
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.MemPrefetchAsync(System.IntPtr,Hybridizer.Runtime.CUDAImports.size_t,System.Int32,Hybridizer.Runtime.CUDAImports.cudaStream_t)">
            <summary>
             Prefetches memory to the specified destination device
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.Memcpy(System.IntPtr,System.IntPtr,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.cudaMemcpyKind)">
            <summary>
            Copies data between host and device
            <param name="dest">destination pointer</param>
            <param name="kind">direction of memcopy</param>
            <param name="size">number of bytes to copy</param>
            <param name="src">source pointer</param>
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.Memcpy2D(System.IntPtr,Hybridizer.Runtime.CUDAImports.size_t,System.IntPtr,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.cudaMemcpyKind)">
            <summary>
            Copies data between host and device
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.Memcpy2DArrayToArray(Hybridizer.Runtime.CUDAImports.cudaArray_t,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.cudaArray_t,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.cudaMemcpyKind)">
            <summary>
            Copies data between host and device
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.Memcpy2DAsync(System.IntPtr,Hybridizer.Runtime.CUDAImports.size_t,System.IntPtr,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.cudaMemcpyKind,Hybridizer.Runtime.CUDAImports.cudaStream_t)">
            <summary>
            Copies data between host and device
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.Memcpy2DFromArray(System.IntPtr,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.cudaArray_t,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.cudaMemcpyKind)">
            <summary>
            Copies data between host and device
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.Memcpy2DFromArrayAsync(System.IntPtr,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.cudaArray_t,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.cudaMemcpyKind,Hybridizer.Runtime.CUDAImports.cudaStream_t)">
            <summary>
            Copies data between host and device
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.Memcpy2DToArray(Hybridizer.Runtime.CUDAImports.cudaArray_t,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.size_t,System.IntPtr,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.cudaMemcpyKind)">
            <summary>
            Copies data between host and device
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.Memcpy2DToArrayAsync(Hybridizer.Runtime.CUDAImports.cudaArray_t,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.size_t,System.IntPtr,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.cudaMemcpyKind,Hybridizer.Runtime.CUDAImports.cudaStream_t)">
            <summary>
            Copies data between host and device
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.Memcpy3D(Hybridizer.Runtime.CUDAImports.cudaMemcpy3DParms@)">
            <summary>
            Copies data between host and device
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.Memcpy3DAsync(Hybridizer.Runtime.CUDAImports.cudaMemcpy3DParms@,Hybridizer.Runtime.CUDAImports.cudaStream_t)">
            <summary>
            Copies data between host and device
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.Memcpy3DPeer(Hybridizer.Runtime.CUDAImports.cudaMemcpy3DPeerParms@)">
            <summary>
            Copies memory between devices
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.Memcpy3DPeerAsync(Hybridizer.Runtime.CUDAImports.cudaMemcpy3DPeerParms@,Hybridizer.Runtime.CUDAImports.cudaStream_t)">
            <summary>
            Copies memory between devices
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.MemcpyArrayToArray(Hybridizer.Runtime.CUDAImports.cudaArray_t,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.cudaArray_t,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.cudaMemcpyKind)">
            <summary>
            Copies data between host and device
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.MemcpyAsync(System.IntPtr,System.IntPtr,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.cudaMemcpyKind,Hybridizer.Runtime.CUDAImports.cudaStream_t)">
            <summary>
            Copies data between host and device
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.MemcpyFromArray(System.IntPtr,Hybridizer.Runtime.CUDAImports.cudaArray_t,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.cudaMemcpyKind)">
            <summary>
            Copies data between host and device
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.MemcpyFromArrayAsync(System.IntPtr,Hybridizer.Runtime.CUDAImports.cudaArray_t,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.cudaMemcpyKind,Hybridizer.Runtime.CUDAImports.cudaStream_t)">
            <summary>
            Copies data between host and device
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.MemcpyFromSymbol(System.IntPtr,System.String,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.cudaMemcpyKind)">
            <summary>
            Copies data from the given symbol on the device
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.MemcpyFromSymbolAsync(System.IntPtr,System.String,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.cudaMemcpyKind,Hybridizer.Runtime.CUDAImports.cudaStream_t)">
            <summary>
            Copies data from the given symbol on the device
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.MemcpyPeer(System.IntPtr,System.Int32,System.IntPtr,System.Int32,Hybridizer.Runtime.CUDAImports.size_t)">
            <summary>
            Copies memory between devices
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.MemcpyPeerAsync(System.IntPtr,System.Int32,System.IntPtr,System.Int32,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.cudaStream_t)">
            <summary>
            Copies memory between devices
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.MemcpyToArray(Hybridizer.Runtime.CUDAImports.cudaArray_t,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.size_t,System.IntPtr,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.cudaMemcpyKind)">
            <summary>
            Copies data between host and device
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.MemcpyToArrayAsync(Hybridizer.Runtime.CUDAImports.cudaArray_t,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.size_t,System.IntPtr,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.cudaMemcpyKind,Hybridizer.Runtime.CUDAImports.cudaStream_t)">
            <summary>
            Copies data between host and device
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.MemcpyToSymbol(System.String,System.IntPtr,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.cudaMemcpyKind)">
            <summary>
            Copies data to the given symbol on the device
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.MemcpyToSymbolAsync(System.String,System.IntPtr,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.cudaMemcpyKind,Hybridizer.Runtime.CUDAImports.cudaStream_t)">
            <summary>
            Copies data to the given symbol on the device
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.Memset(System.IntPtr,System.Int32,Hybridizer.Runtime.CUDAImports.size_t)">
            <summary>
            Initializes or sets device memory to a value
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.Memset2D(System.IntPtr,Hybridizer.Runtime.CUDAImports.size_t,System.Int32,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.size_t)">
            <summary>
            Initializes or sets device memory to a value
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.Memset2DAsync(System.IntPtr,Hybridizer.Runtime.CUDAImports.size_t,System.Int32,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.cudaStream_t)">
            <summary>
            Initializes or sets device memory to a value
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.Memset3D(Hybridizer.Runtime.CUDAImports.cudaPitchedPtr,System.Int32,Hybridizer.Runtime.CUDAImports.cudaExtent)">
            <summary>
            Initializes or sets device memory to a value
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.Memset3DAsync(Hybridizer.Runtime.CUDAImports.cudaPitchedPtr,System.Int32,Hybridizer.Runtime.CUDAImports.cudaExtent,Hybridizer.Runtime.CUDAImports.cudaStream_t)">
            <summary>
            Initializes or sets device memory to a value
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.MemsetAsync(System.IntPtr,System.Int32,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.cudaStream_t)">
            <summary>
            Initializes or sets device memory to a value
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.CreateSurfaceObject(Hybridizer.Runtime.CUDAImports.cudaSurfaceObject_t@,Hybridizer.Runtime.CUDAImports.cudaResourceDesc@)">
            <summary>
            Creates a surface object and returns it in pSurfObject. pResDesc describes the data to perform
            surface load/stores on. cudaResourceDesc::resType must be cudaResourceTypeArray and 
            cudaResourceDesc::res::array::array must be set to a valid CUDA array handle. 
            
            Surface objects are only supported on devices of compute capability 3.0 or higher.Additionally,
            a surface object is an opaque value, and, as such, should only be accessed through CUDA API
            calls. 
            
            See <see href="http://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__SURFACE__OBJECT.html#group__CUDART__SURFACE__OBJECT">nvidia documentation</see> 
            </summary>
            <param name="surface">Surface object to create </param>
            <param name="resDesc">Resource descriptor</param>
            <returns>cudaSuccess, cudaErrorInvalidValue</returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.DestroySurfaceObject(Hybridizer.Runtime.CUDAImports.cudaSurfaceObject_t)">
            <summary>
            Destroys the surface object specified by surfObject. 
            
            See <see href="http://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__SURFACE__OBJECT.html#group__CUDART__SURFACE__OBJECT">nvidia documentation</see> 
            </summary>
            <param name="surface">Surface object to destroy</param>
            <returns>cudaSuccess, cudaErrorInvalidValue</returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.GetSurfaceObjectResourceDesc(Hybridizer.Runtime.CUDAImports.cudaResourceDesc@,Hybridizer.Runtime.CUDAImports.cudaSurfaceObject_t)">
            <summary>
            Returns a surface object's resource descriptor Returns the resource descriptor for the surface
            object specified by surfObject. 
            </summary>
            <param name="resDesc">Resource descriptor </param>
            <param name="surface">Surface object</param>
            <returns>cudaSuccess, cudaErrorInvalidValue</returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.CreateTextureObject(Hybridizer.Runtime.CUDAImports.cudaTextureObject_t@,Hybridizer.Runtime.CUDAImports.cudaResourceDesc@,Hybridizer.Runtime.CUDAImports.cudaTextureDesc@,Hybridizer.Runtime.CUDAImports.cudaResourceViewDesc@)">
            <summary>
            Creates a texture object and returns it in pTexObject. pResDesc describes the data to texture
            from. pTexDesc describes how the data should be sampled. pResViewDesc is an optional argument
            that specifies an alternate format for the data described by pResDesc, and also describes the
            subresource region to restrict access to when texturing. pResViewDesc can only be specified if
            the type of resource is a CUDA array or a CUDA mipmapped array. 
            
            Texture objects are only supported on devices of compute capability 3.0 or higher.Additionally,
            a texture object is an opaque value, and, as such, should only be accessed through CUDA API
            calls. 
            
            See <see href="http://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TEXTURE__OBJECT.html#group__CUDART__TEXTURE__OBJECT">nvidia documentation</see>
            </summary>
            <param name="texture">Texture object to create </param>
            <param name="resDesc">Resource descriptor </param>
            <param name="texDesc">Texture descriptor </param>
            <param name="ResViewDesc">Resource view descriptor</param>
            <returns>cudaSuccess, cudaErrorInvalidValue</returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.CreateTextureObject(Hybridizer.Runtime.CUDAImports.cudaTextureObject_t@,Hybridizer.Runtime.CUDAImports.cudaResourceDesc@,Hybridizer.Runtime.CUDAImports.cudaTextureDesc@)">
            <summary>
            Creates a texture object and returns it in pTexObject. pResDesc describes the data to texture
            from. pTexDesc describes how the data should be sampled. pResViewDesc is an optional argument
            that specifies an alternate format for the data described by pResDesc, and also describes the
            subresource region to restrict access to when texturing. pResViewDesc can only be specified if
            the type of resource is a CUDA array or a CUDA mipmapped array. 
            
            Texture objects are only supported on devices of compute capability 3.0 or higher.Additionally,
            a texture object is an opaque value, and, as such, should only be accessed through CUDA API
            calls. 
            
            See <see href="http://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TEXTURE__OBJECT.html#group__CUDART__TEXTURE__OBJECT">nvidia documentation</see>
            </summary>
            <param name="texture">Texture object to create </param>
            <param name="resDesc">Resource descriptor </param>
            <param name="texDesc">Texture descriptor </param>
            <returns>cudaSuccess, cudaErrorInvalidValue</returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.DestroyTextureObject(Hybridizer.Runtime.CUDAImports.cudaTextureObject_t)">
            <summary>
            Destroys the texture object specified by texObject. 
            
            See <see href="http://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TEXTURE__OBJECT.html#group__CUDART__TEXTURE__OBJECT">nvidia documentation</see>
            </summary>
            <param name="texture">Texture object to destroy</param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.GetTextureObjectResourceDesc(Hybridizer.Runtime.CUDAImports.cudaResourceDesc@,Hybridizer.Runtime.CUDAImports.cudaTextureObject_t)">
            <summary>
            Returns the resource descriptor for the texture object specified by texObject. 
            See <see href="http://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TEXTURE__OBJECT.html#group__CUDART__TEXTURE__OBJECT">nvidia documentation</see>
            </summary>
            <param name="resDesc">Resource descriptor </param>
            <param name="texture">Texture object</param>
            <returns>cudaSuccess, cudaErrorInvalidValue</returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.GLRegisterBufferObject(System.UInt32)">
            <summary>
            Registers a buffer object for access by CUDA. 
            </summary>
            <param name="buffer">Buffer object ID to register</param>
            <see href="https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__OPENGL__DEPRECATED.html#group__CUDART__OPENGL__DEPRECATED_1gb835a92a340e999f4eaa55a8d57e122c">nvidia documentation</see>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.GraphicsGLRegisterBuffer(System.IntPtr@,System.UInt32,System.UInt32)">
            <summary>
            Registers an OpenGL buffer object. 
            </summary>
            <param name="pCudaResource"> Pointer to the returned object handle </param>
            <param name="buffer">name of buffer object to be registered</param>
            <param name="Flags">Register flags</param>
            <see href="https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__OPENGL.html#group__CUDART__OPENGL_1g0fd33bea77ca7b1e69d1619caf44214b">nvidia documentation</see>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.GraphicsUnregisterResource(System.IntPtr)">
            <summary>
            Unregisters a graphics resource for access by CUDA. 
            </summary>
            <param name="resource">Resource to unregister</param>
            <see href="https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__INTEROP.html#group__CUDART__INTEROP_1gc65d1f2900086747de1e57301d709940">nvidia documentation</see>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.GLUnregisterBufferObject(System.UInt32)">
            <summary>
            Unmaps a buffer object for access by CUDA. 
            </summary>
            <param name="buffer">Buffer object to unmap </param>
            <see href="https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__OPENGL__DEPRECATED.html#group__CUDART__OPENGL__DEPRECATED_1g5ce0566e8543a8c7677b619acfefd5b5">nvidia documentation</see>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.GraphicsResourceGetMappedPointer(System.IntPtr@,Hybridizer.Runtime.CUDAImports.size_t@,System.IntPtr)">
            <summary>
            Get an device pointer through which to access a mapped graphics resource. 
            </summary>
            <param name="devPtr"> Returned pointer through which resource may be accessed </param>
            <param name="size"> Returned size of the buffer accessible starting at *devPtr</param>
            <param name="resource">Mapped resource to access</param>
            <see href="https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__INTEROP.html#group__CUDART__INTEROP_1ga36881081c8deb4df25c256158e1ac99">nvidia documentation</see>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.GraphicsResourceSetMapFlags(System.IntPtr,System.UInt32)">
            <summary>
            Set usage flags for mapping a graphics resource. 
            </summary>
            <param name="resource">Registered resource to set flags for</param>
            <param name="flags"> Parameters for resource mapping</param>
            <see href="https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__INTEROP.html#group__CUDART__INTEROP_1g5f94a0043909fddc100ab5f0c2476b9f">nvidia documentation</see>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.GraphicsMapResources(System.Int32,System.IntPtr[],Hybridizer.Runtime.CUDAImports.cudaStream_t)">
            <summary>
            Map graphics resources for access by CUDA. 
            </summary>
            <param name="count"> Number of resources to map </param>
            <param name="resources">Resources to map for CUDA </param>
            <param name="stream">Stream for synchronization</param>
            <see href="https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__INTEROP.html#group__CUDART__INTEROP_1gad8fbe74d02adefb8e7efb4971ee6322">nvidia documentation</see>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.GraphicsUnmapResources(System.Int32,System.IntPtr[],Hybridizer.Runtime.CUDAImports.cudaStream_t)">
            <summary>
            Unmap graphics resources. 
            </summary>
            <param name="count"> Number of resources to map </param>
            <param name="resources">Resources to map for CUDA </param>
            <param name="stream">Stream for synchronization</param>
            <see href="https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__INTEROP.html#group__CUDART__INTEROP_1g11988ab4431b11ddb7cbde7aedb60491">nvidia documentation</see>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.GraphicsGLRegisterImage(System.IntPtr@,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Register an OpenGL texture or renderbuffer object.
            </summary>
            <param name="cudaGraphicsResource">Pointer to the returned object handle </param>
            <param name="image">name of texture or renderbuffer object to be registered</param>
            <param name="target">Identifies the type of object specified by image</param>
            <param name="flags">Register flags</param>
            <returns>cudaErrorInvalidDevice, cudaErrorInvalidValue, cudaErrorInvalidResourceHandle, cudaErrorUnknown</returns>
            <see href="https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__OPENGL.html#group__CUDART__OPENGL_1g80d12187ae7590807c7676697d9fe03d">nvidia documentation</see>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.GraphicsSubResourceGetMappedArray(Hybridizer.Runtime.CUDAImports.cudaArray_t@,System.IntPtr,System.UInt32,System.UInt32)">
            <summary>
            Get an array through which to access a subresource of a mapped graphics resource. 
            </summary>
            <param name="array">Returned array through which a subresource of resource may be accessed</param>
            <param name="resource"> Mapped resource to access </param>
            <param name="arrayIndex">Array index for array textures or cubemap face index as defined by cudaGraphicsCubeFace for cubemap textures for the subresource to access </param>
            <param name="mipLevel">Mipmap level for the subresource to access</param>
            <returns>cudaSuccess, cudaErrorInvalidValue, cudaErrorInvalidResourceHandle, cudaErrorUnknown</returns>
            <see href="https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__INTEROP.html#group__CUDART__INTEROP_1g0dd6b5f024dfdcff5c28a08ef9958031">nvidia documentation</see>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cuda.IsCudaAvailable">
            <summary>
            Check if CUDA is available
            </summary>        
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.half">
            <summary>
            Half (16 bits) precision floating point type
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.half.__float2half(System.Single)">
            <summary>
            Converts float number to half precision in round-to-nearest mode and
            returns \p half with converted value.
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.half.__half2float(System.UInt16)">
            <summary>
            converts 
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.half.#ctor(System.Single)">
            <summary>
            constructor from float32
            </summary>
            <param name="a"></param>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.half.float2half(System.Single)">
            <summary>
            mapping of intrinsic function float2half
            </summary>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.half.op_Implicit(Hybridizer.Runtime.CUDAImports.half)~System.Single">
            <summary>
            conversion back to float32
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.half.op_Implicit(Hybridizer.Runtime.CUDAImports.half)~System.UInt16">
            <summary>
            conversion back to ushort
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.half.op_Implicit(System.UInt16)~Hybridizer.Runtime.CUDAImports.half">
            <summary>
            conversion from ushort
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.half.IsInfinite">
            <summary>
            Returns -1 iff \p a is equal to negative infinity, 1 iff \p a is
            equal to positive infinity and 0 otherwise.
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.half.IsNan">
            <summary>
            NaN detection
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.half2.__float2half2_rn(System.Single)">
            <summary>
            Converts input to half precision in round-to-nearest mode and
            populates both halves of \p half2 with converted value.
            </summary>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.half2.__floats2half2_rn(System.Single,System.Single)">
            <summary>
            Converts both input floats to half precision in round-to-nearest mode and
            combines the results into one \p half2 number. Low 16 bits of the return
            value correspond to the input \p a, high 16 bits correspond to the input \p
            b.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.half2.__float22half2_rn(Hybridizer.Runtime.CUDAImports.float2)">
            <summary>
            Converts both components of float2 to half precision in round-to-nearest mode
            and combines the results into one \p half2 number. Low 16 bits of the return
            value correspond to \p a.x and high 16 bits of the return value correspond to
            \p a.y.
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.half2.__half22float2(System.UInt32)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.half2.__half2half2(System.UInt16)">
            <summary>
            Returns \p half2 number with both halves equal to the input \p a \p half
            number.
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.half2.__lowhigh2highlow(System.UInt32)">
            <summary>
            Swaps both halves of the \p half2 input and returns a new \p half2 number
            with swapped halves.
            </summary>
            <param name="a"></param>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.half2.__halves2half2(System.UInt16,System.UInt16)">
            <summary>
            Combines two input \p half number \p a and \p b into one \p half2 number.
            Input \p a is stored in low 16 bits of the return value, input \p b is stored
            in high 16 bits of the return value.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.half2.__lows2half2(Hybridizer.Runtime.CUDAImports.half2,Hybridizer.Runtime.CUDAImports.half2)">
            <summary>
            Extracts low 16 bits from each of the two \p half2 inputs and combines into
            one \p half2 number. Low 16 bits from input \p a is stored in low 16 bits of
            the return value, low 16 bits from input \p b is stored in high 16 bits of
            the return value.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.half2.__highs2half2(Hybridizer.Runtime.CUDAImports.half2,Hybridizer.Runtime.CUDAImports.half2)">
            <summary>
            Extracts high 16 bits from each of the two \p half2 inputs and combines into
            one \p half2 number. High 16 bits from input \p a is stored in low 16 bits of
            the return value, high 16 bits from input \p b is stored in high 16 bits of
            the return value.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.half2.__low2half2(Hybridizer.Runtime.CUDAImports.half2)">
            <summary>
            Extracts low 16 bits from \p half2 input \p a and returns a new \p half2
            number which has both halves equal to the extracted bits.
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.half2.__high2half2(Hybridizer.Runtime.CUDAImports.half2)">
            <summary>
             Extracts high 16 bits from \p half2 input \p a and returns a new \p half2
            number which has both halves equal to the extracted bits.
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.half2.__heq2(Hybridizer.Runtime.CUDAImports.half2,Hybridizer.Runtime.CUDAImports.half2)">
            <summary>
            Performs \p half2 vector if-equal comparison of inputs \p a and \p b.
            The corresponding \p half results are set to 1.0 for true, or 0.0 for false.
            NaN inputs generate false results.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.half2.__hne2(Hybridizer.Runtime.CUDAImports.half2,Hybridizer.Runtime.CUDAImports.half2)">
            <summary>
            Performs \p half2 vector not-equal comparison of inputs \p a and \p b.
            The corresponding \p half results are set to 1.0 for true, or 0.0 for false.
            NaN inputs generate false results.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.half2.__hle2(Hybridizer.Runtime.CUDAImports.half2,Hybridizer.Runtime.CUDAImports.half2)">
            <summary>
            Performs \p half2 vector less-equal comparison of inputs \p a and \p b.
            The corresponding \p half results are set to 1.0 for true, or 0.0 for false.
            NaN inputs generate false results.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.half2.__hge2(Hybridizer.Runtime.CUDAImports.half2,Hybridizer.Runtime.CUDAImports.half2)">
            <summary>
            Performs \p half2 vector greater-equal comparison of inputs \p a and \p b.
            The corresponding \p half results are set to 1.0 for true, or 0.0 for false.
            NaN inputs generate false results.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.half2.__hlt2(Hybridizer.Runtime.CUDAImports.half2,Hybridizer.Runtime.CUDAImports.half2)">
            <summary>
            Performs \p half2 vector less-than comparison of inputs \p a and \p b.
            The corresponding \p half results are set to 1.0 for true, or 0.0 for false.
            NaN inputs generate false results.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.half2.__hgt2(Hybridizer.Runtime.CUDAImports.half2,Hybridizer.Runtime.CUDAImports.half2)">
            <summary>
            Performs \p half2 vector greater-than comparison of inputs \p a and \p b.
            The corresponding \p half results are set to 1.0 for true, or 0.0 for false.
            NaN inputs generate false results.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.half2.__hequ2(Hybridizer.Runtime.CUDAImports.half2,Hybridizer.Runtime.CUDAImports.half2)">
            <summary>
            Performs \p half2 vector if-equal comparison of inputs \p a and \p b.
            The corresponding \p half results are set to 1.0 for true, or 0.0 for false.
            NaN inputs generate true results.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.half2.__hneu2(Hybridizer.Runtime.CUDAImports.half2,Hybridizer.Runtime.CUDAImports.half2)">
            <summary>
            Performs \p half2 vector not-equal comparison of inputs \p a and \p b.
            The corresponding \p half results are set to 1.0 for true, or 0.0 for false.
            NaN inputs generate true results.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.half2.__hleu2(Hybridizer.Runtime.CUDAImports.half2,Hybridizer.Runtime.CUDAImports.half2)">
            <summary>
            Performs \p half2 vector less-equal comparison of inputs \p a and \p b.
            The corresponding \p half results are set to 1.0 for true, or 0.0 for false.
            NaN inputs generate true results.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.half2.__hgeu2(Hybridizer.Runtime.CUDAImports.half2,Hybridizer.Runtime.CUDAImports.half2)">
            <summary>
            Performs \p half2 vector greater-equal comparison of inputs \p a and \p b.
            The corresponding \p half results are set to 1.0 for true, or 0.0 for false.
            NaN inputs generate true results.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.half2.__hltu2(Hybridizer.Runtime.CUDAImports.half2,Hybridizer.Runtime.CUDAImports.half2)">
            <summary>
            Performs \p half2 vector less-than comparison of inputs \p a and \p b.
            The corresponding \p half results are set to 1.0 for true, or 0.0 for false.
            NaN inputs generate true results.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.half2.__hgtu2(Hybridizer.Runtime.CUDAImports.half2,Hybridizer.Runtime.CUDAImports.half2)">
            <summary>
            Performs \p half2 vector greater-than comparison of inputs \p a and \p b.
            The corresponding \p half results are set to 1.0 for true, or 0.0 for false.
            NaN inputs generate true results.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.half2.__hisnan2(Hybridizer.Runtime.CUDAImports.half2,Hybridizer.Runtime.CUDAImports.half2)">
            <summary>
            Determine whether each half of input \p half2 number \p a is a NaN.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns>Returns \p half2 which has the corresponding \p half results set to
            1.0 for true, or 0.0 for false.</returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.half2.__hadd2_sat(Hybridizer.Runtime.CUDAImports.half2,Hybridizer.Runtime.CUDAImports.half2)">
            <summary>
            Performs \p half2 vector add of inputs \p a and \p b, in round-to-nearest mode,
            and clamps the results to range [0.0, 1.0]. NaN results are flushed to +0.0.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.half2.__hsub2_sat(Hybridizer.Runtime.CUDAImports.half2,Hybridizer.Runtime.CUDAImports.half2)">
            <summary>
            Subtracts \p half2 input vector \p b from input vector \p a in round-to-nearest
            mode,
            and clamps the results to range [0.0, 1.0]. NaN results are flushed to +0.0.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.half2.__hmul2_sat(Hybridizer.Runtime.CUDAImports.half2,Hybridizer.Runtime.CUDAImports.half2)">
            <summary>
            Performs \p half2 vector multiplication of inputs \p a and \p b, in
            round-to-nearest mode, and clamps the results to range [0.0, 1.0]. NaN
            results are flushed to +0.0.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.half2.__hfma2(Hybridizer.Runtime.CUDAImports.half2,Hybridizer.Runtime.CUDAImports.half2,Hybridizer.Runtime.CUDAImports.half2)">
            <summary>
            Performs \p half2 vector multiply on inputs \p a and \p b,
            then performs a \p half2 vector add of the result with \p c,
            rounding the result once in round-to-nearest mode.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.half2.__hfma2_sat(Hybridizer.Runtime.CUDAImports.half2,Hybridizer.Runtime.CUDAImports.half2,Hybridizer.Runtime.CUDAImports.half2)">
            <summary>
            Performs \p half2 vector multiply on inputs \p a and \p b,
            then performs a \p half2 vector add of the result with \p c,
            rounding the result once in round-to-nearest mode, and clamps the results to
            range [0.0, 1.0]. NaN results are flushed to +0.0.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.half2.__hneg2(Hybridizer.Runtime.CUDAImports.half2)">
            <summary>
            Negates both halves of the input \p half2 number \p a and returns the result.
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.dim3">
            <summary>
            dimension structure.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.dim3.x">
            <summary>
            components
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.dim3.y">
            <summary>
            components
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.dim3.z">
            <summary>
            components
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.dim3.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Assignment constructor
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.size_t">
            <summary>
            $size\_t$ type has different bit-size storage depending on architecture.
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.size_t.#ctor(System.Int32)">
            <summary>
            constructor from 32 bits signed integer
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.size_t.#ctor(System.UInt32)">
            <summary>
            constructor from 32 bits sunigned integer
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.size_t.#ctor(System.Int64)">
            <summary>
            constructor from 64 bits signed integer
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.size_t.op_Implicit(System.Int32)~Hybridizer.Runtime.CUDAImports.size_t">
            <summary>
            implicit conversion operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.size_t.op_Implicit(System.UInt32)~Hybridizer.Runtime.CUDAImports.size_t">
            <summary>
            implicit conversion operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.size_t.op_Implicit(System.Int64)~Hybridizer.Runtime.CUDAImports.size_t">
            <summary>
            implicit conversion operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.size_t.op_Explicit(Hybridizer.Runtime.CUDAImports.size_t)~System.Int32">
            <summary>
            explicit conversion operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.size_t.op_Explicit(Hybridizer.Runtime.CUDAImports.size_t)~System.UInt32">
            <summary>
            explicit conversion operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.size_t.op_Explicit(Hybridizer.Runtime.CUDAImports.size_t)~System.Int64">
            <summary>
            explicit conversion operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.size_t.op_Explicit(Hybridizer.Runtime.CUDAImports.size_t)~System.UInt64">
            <summary>
            explicit conversion operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.size_t.ToString">
            <summary>
            Print contents of size\_t as a 64 bits integer
            </summary>
            <returns></returns>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cudaStream_t">
            <summary>
            CUDA stream
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cudaStream_t.#ctor(System.IntPtr)">
            <summary>
            constructor from native pointer
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaStream_t.NO_STREAM">
            <summary>
            void stream
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cudaStream_t.ToString">
            <summary>
            string representation
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cudaStream_t.Equals(Hybridizer.Runtime.CUDAImports.cudaStream_t)">
            <summary>
            equals operator (with other stream)
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cudaStream_t.Equals(System.Object)">
            <summary>
            equals operator (with object)
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cudaStream_t.GetHashCode">
            <summary>
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cudaError_t">
            <summary>
            cuda error codes
            <see href="https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1gf599e5b8b829ce7db0f5216928f6ecb6"/>
            <see href="https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1g3f51e3575c2178246db0a94a430e0038"/>
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaError_t.cudaSuccess">
            <summary>
            The API call returned with no errors. In the case of query calls, this can also mean 
            that the operation being queried is complete (see cudaEventQuery() and 
            cudaStreamQuery()). 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaError_t.cudaErrorMissingConfiguration">
            <summary>
            The device function being invoked (usually via cudaLaunch()) was not previously configured 
            via the cudaConfigureCall() function. 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaError_t.cudaErrorMemoryAllocation">
            <summary>
            The API call failed because it was unable to allocate enough memory to 
            perform the requested operation. 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaError_t.cudaErrorInitializationError">
            <summary>
            The API call failed because the CUDA driver and runtime could not be initialized. 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaError_t.cudaErrorLaunchFailure">
            <summary>
            An exception occurred on the device while executing a kernel. Common causes 
            include dereferencing an invalid device pointer and accessing out of bounds 
            shared memory. The device cannot be used until cudaThreadExit() is called. 
            All existing device memory allocations are invalid and must be reconstructed if 
            the program is to continue using CUDA. 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaError_t.cudaErrorPriorLaunchFailure">
            <summary>
            Deprecated
            
            This error return is deprecated as of CUDA 3.1. Device emulation mode was removed
            with the CUDA 3.1 release. 
            
            This indicated that a previous kernel launch failed. This was previously used for 
            device emulation of kernel launches. 
            
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaError_t.cudaErrorLaunchTimeout">
            <summary>
            This indicates that the device kernel took too long to execute. This can only occur
            if timeouts are enabled - see the device property kernelExecTimeoutEnabled for more
            information. The device cannot be used until cudaThreadExit() is called. All existing
            device memory allocations are invalid and must be reconstructed if the program is to
            continue using CUDA. 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaError_t.cudaErrorLaunchOutOfResources">
            <summary>
            This indicates that a launch did not occur because it did not have appropriate 
            resources. Although this error is similar to cudaErrorInvalidConfiguration, this 
            error usually indicates that the user has attempted to pass too many arguments to
            the device kernel, or the kernel launch specifies too many threads for the kernel's
            register count. 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaError_t.cudaErrorInvalidDeviceFunction">
            <summary>
            The requested device function does not exist or is not compiled for the proper
            device architecture. 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaError_t.cudaErrorInvalidConfiguration">
            <summary>
            This indicates that a kernel launch is requesting resources that can never 
            be satisfied by the current device. Requesting more shared memory per block
            than the device supports will trigger this error, as will requesting too many 
            threads or blocks. See cudaDeviceProp for more device limitations. 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaError_t.cudaErrorInvalidDevice">
            <summary>
            This indicates that the device ordinal supplied by the user does not 
            correspond to a valid CUDA device. 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaError_t.cudaErrorInvalidValue">
            <summary>
            This indicates that one or more of the parameters passed to the API call
            is not within an acceptable range of values. 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaError_t.cudaErrorInvalidPitchValue">
            <summary>
            This indicates that one or more of the pitch-related parameters passed 
            to the API call is not within the acceptable range for pitch. 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaError_t.cudaErrorInvalidSymbol">
            <summary>
            This indicates that the symbol name/identifier passed to the API call
            is not a valid name or identifier.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaError_t.cudaErrorMapBufferObjectFailed">
            <summary>
            This indicates that the buffer object could not be mapped.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaError_t.cudaErrorUnmapBufferObjectFailed">
            <summary>
            This indicates that the buffer object could not be unmapped.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaError_t.cudaErrorInvalidHostPointer">
            <summary>
            This indicates that at least one host pointer passed to the API call is
            not a valid host pointer.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaError_t.cudaErrorInvalidDevicePointer">
            <summary>
            This indicates that at least one device pointer passed to the API call is
            not a valid device pointer.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaError_t.cudaErrorInvalidTexture">
            <summary>
            This indicates that the texture passed to the API call is not a valid
            texture.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaError_t.cudaErrorInvalidTextureBinding">
            <summary>
            This indicates that the texture binding is not valid. This occurs if you
            call ::cudaGetTextureAlignmentOffset() with an unbound texture.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaError_t.cudaErrorInvalidChannelDescriptor">
            <summary>
            This indicates that the channel descriptor passed to the API call is not
            valid. This occurs if the format is not one of the formats specified by
            ::cudaChannelFormatKind, or if one of the dimensions is invalid.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaError_t.cudaErrorInvalidMemcpyDirection">
            <summary>
            This indicates that the direction of the memcpy passed to the API call is
            not one of the types specified by ::cudaMemcpyKind.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaError_t.cudaErrorAddressOfConstant">
            <summary>
            This indicated that the user has taken the address of a constant variable,
            which was forbidden up until the CUDA 3.1 release.
            This error return is deprecated as of CUDA 3.1. Variables in constant
            memory may now have their address taken by the runtime via
            ::cudaGetSymbolAddress().
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaError_t.cudaErrorTextureFetchFailed">
            <summary>
            This indicated that a texture fetch was not able to be performed.
            This was previously used for device emulation of texture operations.
            This error return is deprecated as of CUDA 3.1. Device emulation mode was
            removed with the CUDA 3.1 release.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaError_t.cudaErrorTextureNotBound">
            <summary>
            This indicated that a texture was not bound for access.
            This was previously used for device emulation of texture operations.
            This error return is deprecated as of CUDA 3.1. Device emulation mode was
            removed with the CUDA 3.1 release.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaError_t.cudaErrorSynchronizationError">
            <summary>
            This indicated that a synchronization operation had failed.
            This was previously used for some device emulation functions.
            This error return is deprecated as of CUDA 3.1. Device emulation mode was
            removed with the CUDA 3.1 release.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaError_t.cudaErrorInvalidFilterSetting">
            <summary>
            This indicates that a non-float texture was being accessed with linear
            filtering. This is not supported by CUDA.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaError_t.cudaErrorInvalidNormSetting">
            <summary>
            This indicates that an attempt was made to read a non-float texture as a
            normalized float. This is not supported by CUDA.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaError_t.cudaErrorMixedDeviceExecution">
            <summary>
            Mixing of device and device emulation code was not allowed.
            This error return is deprecated as of CUDA 3.1. Device emulation mode was
            removed with the CUDA 3.1 release.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaError_t.cudaErrorCudartUnloading">
            <summary>
            This indicates that a CUDA Runtime API call cannot be executed because
            it is being called during process shut down, at a point in time after
            CUDA driver has been unloaded.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaError_t.cudaErrorUnknown">
            <summary>
            This indicates that an unknown internal error has occurred.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaError_t.cudaErrorNotYetImplemented">
            <summary>
            This indicates that the API call is not yet implemented. Production
            releases of CUDA will never return this error.
            This error return is deprecated as of CUDA 4.1.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaError_t.cudaErrorMemoryValueTooLarge">
            <summary>
            This indicated that an emulated device pointer exceeded the 32-bit address
            range.
            This error return is deprecated as of CUDA 3.1. Device emulation mode was
            removed with the CUDA 3.1 release.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaError_t.cudaErrorInvalidResourceHandle">
            <summary>
            This indicates that a resource handle passed to the API call was not
            valid. Resource handles are opaque types like ::cudaStream_t and
            ::cudaEvent_t.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaError_t.cudaErrorNotReady">
            <summary>
            This indicates that asynchronous operations issued previously have not
            completed yet. This result is not actually an error, but must be indicated
            differently than ::cudaSuccess (which indicates completion). Calls that
            may return this value include ::cudaEventQuery() and ::cudaStreamQuery().
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaError_t.cudaErrorInsufficientDriver">
            <summary>
            This indicates that the installed NVIDIA CUDA driver is older than the
            CUDA runtime library. This is not a supported configuration. Users should
            install an updated NVIDIA display driver to allow the application to run.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaError_t.cudaErrorSetOnActiveProcess">
            <summary>
            This indicates that the user has called ::cudaSetValidDevices(),
            ::cudaSetDeviceFlags(), ::cudaD3D9SetDirect3DDevice(),
            ::cudaD3D10SetDirect3DDevice, ::cudaD3D11SetDirect3DDevice(), or
            ::cudaVDPAUSetVDPAUDevice() after initializing the CUDA runtime by
            calling non-device management operations (allocating memory and
            launching kernels are examples of non-device management operations).
            This error can also be returned if using runtime/driver
            interoperability and there is an existing ::CUcontext active on the
            host thread.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaError_t.cudaErrorInvalidSurface">
            <summary>
            This indicates that the surface passed to the API call is not a valid
            surface.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaError_t.cudaErrorNoDevice">
            <summary>
            This indicates that no CUDA-capable devices were detected by the installed
            CUDA driver.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaError_t.cudaErrorECCUncorrectable">
            <summary>
            This indicates that an uncorrectable ECC error was detected during
            execution.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaError_t.cudaErrorSharedObjectSymbolNotFound">
            <summary>
            This indicates that a link to a shared object failed to resolve.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaError_t.cudaErrorSharedObjectInitFailed">
            <summary>
            This indicates that initialization of a shared object failed.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaError_t.cudaErrorUnsupportedLimit">
            <summary>
            This indicates that the ::cudaLimit passed to the API call is not
            supported by the active device.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaError_t.cudaErrorDuplicateVariableName">
            <summary>
            This indicates that multiple global or constant variables (across separate
            CUDA source files in the application) share the same string name.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaError_t.cudaErrorDuplicateTextureName">
            <summary>
            This indicates that multiple textures (across separate CUDA source
            files in the application) share the same string name.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaError_t.cudaErrorDuplicateSurfaceName">
            <summary>
            This indicates that multiple surfaces (across separate CUDA source
            files in the application) share the same string name.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaError_t.cudaErrorDevicesUnavailable">
            <summary>
            This indicates that all CUDA devices are busy or unavailable at the current
            time. Devices are often busy/unavailable due to use of
            ::cudaComputeModeExclusive, ::cudaComputeModeProhibited or when long
            running CUDA kernels have filled up the GPU and are blocking new work
            from starting. They can also be unavailable due to memory constraints
            on a device that already has active CUDA work being performed.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaError_t.cudaErrorInvalidKernelImage">
            <summary>
            This indicates that the device kernel image is invalid.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaError_t.cudaErrorNoKernelImageForDevice">
            <summary>
            This indicates that there is no kernel image available that is suitable
            for the device. This can occur when a user specifies code generation
            options for a particular CUDA source file that do not include the
            corresponding device configuration.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaError_t.cudaErrorIncompatibleDriverContext">
            <summary>
            This indicates that the current context is not compatible with this
            the CUDA Runtime. This can only occur if you are using CUDA
            Runtime/Driver interoperability and have created an existing Driver
            context using the driver API. The Driver context may be incompatible
            either because the Driver context was created using an older version 
            of the API, because the Runtime API call expects a primary driver 
            context and the Driver context is not primary, or because the Driver 
            context has been destroyed. Please see \ref CUDART_DRIVER "Interactions 
            with the CUDA Driver API" for more information.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaError_t.cudaErrorPeerAccessAlreadyEnabled">
            <summary>
            This error indicates that a call to ::cudaDeviceEnablePeerAccess() is
            trying to re-enable peer addressing on from a context which has already
            had peer addressing enabled.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaError_t.cudaErrorPeerAccessNotEnabled">
            <summary>
            This error indicates that ::cudaDeviceDisablePeerAccess() is trying to 
            disable peer addressing which has not been enabled yet via 
            ::cudaDeviceEnablePeerAccess().
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaError_t.cudaErrorDeviceAlreadyInUse">
            <summary>
            This indicates that a call tried to access an exclusive-thread device that 
            is already in use by a different thread.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaError_t.cudaErrorProfilerDisabled">
            <summary>
            This indicates profiler is not initialized for this run. This can
            happen when the application is running with external profiling tools
            like visual profiler.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaError_t.cudaErrorProfilerNotInitialized">
            <summary>
            This error return is deprecated as of CUDA 5.0. It is no longer an error
            to attempt to enable/disable the profiling via ::cudaProfilerStart or
            ::cudaProfilerStop without initialization.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaError_t.cudaErrorProfilerAlreadyStarted">
            <summary>
            This error return is deprecated as of CUDA 5.0. It is no longer an error
            to call cudaProfilerStart() when profiling is already enabled.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaError_t.cudaErrorProfilerAlreadyStopped">
            <summary>
            This error return is deprecated as of CUDA 5.0. It is no longer an error
            to call cudaProfilerStop() when profiling is already disabled.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaError_t.cudaErrorAssert">
            <summary>
            An assert triggered in device code during kernel execution. The device
            cannot be used again until ::cudaThreadExit() is called. All existing 
            allocations are invalid and must be reconstructed if the program is to
            continue using CUDA. 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaError_t.cudaErrorTooManyPeers">
            <summary>
            This error indicates that the hardware resources required to enable
            peer access have been exhausted for one or more of the devices 
            passed to ::cudaEnablePeerAccess().
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaError_t.cudaErrorHostMemoryAlreadyRegistered">
            <summary>
            This error indicates that the memory range passed to ::cudaHostRegister()
            has already been registered.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaError_t.cudaErrorHostMemoryNotRegistered">
            <summary>
            This error indicates that the pointer passed to ::cudaHostUnregister()
            does not correspond to any currently registered memory region.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaError_t.cudaErrorOperatingSystem">
            <summary>
            This error indicates that an OS call failed.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaError_t.cudaErrorPeerAccessUnsupported">
            <summary>
            This error indicates that P2P access is not supported across the given
            devices.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaError_t.cudaErrorLaunchMaxDepthExceeded">
            <summary>
            This error indicates that a device runtime grid launch did not occur 
            because the depth of the child grid would exceed the maximum supported
            number of nested grid launches. 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaError_t.cudaErrorLaunchFileScopedTex">
            <summary>
            This error indicates that a grid launch did not occur because the kernel 
            uses file-scoped textures which are unsupported by the device runtime. 
            Kernels launched via the device runtime only support textures created with 
            the Texture Object API's.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaError_t.cudaErrorLaunchFileScopedSurf">
            <summary>
            This error indicates that a grid launch did not occur because the kernel 
            uses file-scoped surfaces which are unsupported by the device runtime.
            Kernels launched via the device runtime only support surfaces created with
            the Surface Object API's.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaError_t.cudaErrorSyncDepthExceeded">
            <summary>
            This error indicates that a call to ::cudaDeviceSynchronize made from
            the device runtime failed because the call was made at grid depth greater
            than than either the default (2 levels of grids) or user specified device 
            limit ::cudaLimitDevRuntimeSyncDepth. To be able to synchronize on 
            launched grids at a greater depth successfully, the maximum nested 
            depth at which ::cudaDeviceSynchronize will be called must be specified 
            with the ::cudaLimitDevRuntimeSyncDepth limit to the ::cudaDeviceSetLimit
            api before the host-side launch of a kernel using the device runtime. 
            Keep in mind that additional levels of sync depth require the runtime 
            to reserve large amounts of device memory that cannot be used for 
            user allocations.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaError_t.cudaErrorLaunchPendingCountExceeded">
            <summary>
            This error indicates that a device runtime grid launch failed because
            the launch would exceed the limit ::cudaLimitDevRuntimePendingLaunchCount.
            For this launch to proceed successfully, ::cudaDeviceSetLimit must be
            called to set the ::cudaLimitDevRuntimePendingLaunchCount to be higher 
            than the upper bound of outstanding launches that can be issued to the
            device runtime. Keep in mind that raising the limit of pending device
            runtime launches will require the runtime to reserve device memory that
            cannot be used for user allocations.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaError_t.cudaErrorNotPermitted">
            <summary>
            This error indicates the attempted operation is not permitted.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaError_t.cudaErrorNotSupported">
            <summary>
            This error indicates the attempted operation is not supported
            on the current system or device.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaError_t.cudaErrorHardwareStackError">
            <summary>
            Device encountered an error in the call stack during kernel execution,
            possibly due to stack corruption or exceeding the stack size limit.
            This leaves the process in an inconsistent state and any further CUDA work
            will return the same error. To continue using CUDA, the process must be terminated
            and relaunched.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaError_t.cudaErrorIllegalInstruction">
            <summary>
            The device encountered an illegal instruction during kernel execution
            This leaves the process in an inconsistent state and any further CUDA work
            will return the same error. To continue using CUDA, the process must be terminated
            and relaunched.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaError_t.cudaErrorMisalignedAddress">
            <summary>
            The device encountered a load or store instruction
            on a memory address which is not aligned.
            This leaves the process in an inconsistent state and any further CUDA work
            will return the same error. To continue using CUDA, the process must be terminated
            and relaunched.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaError_t.cudaErrorInvalidAddressSpace">
            <summary>
            While executing a kernel, the device encountered an instruction
            which can only operate on memory locations in certain address spaces
            (global, shared, or local), but was supplied a memory address not
            belonging to an allowed address space.
            This leaves the process in an inconsistent state and any further CUDA work
            will return the same error. To continue using CUDA, the process must be terminated
            and relaunched.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaError_t.cudaErrorInvalidPc">
            <summary>
            The device encountered an invalid program counter.
            This leaves the process in an inconsistent state and any further CUDA work
            will return the same error. To continue using CUDA, the process must be terminated
            and relaunched.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaError_t.cudaErrorIllegalAddress">
            <summary>
            The device encountered a load or store instruction on an invalid memory address.
            This leaves the process in an inconsistent state and any further CUDA work
            will return the same error. To continue using CUDA, the process must be terminated
            and relaunched.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaError_t.cudaErrorInvalidPtx">
            <summary>
            A PTX compilation failed. The runtime may fall back to compiling PTX if
            an application does not contain a suitable binary for the current device.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaError_t.cudaErrorInvalidGraphicsContext">
            <summary>
            This indicates an error with the OpenGL or DirectX context.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaError_t.cudaErrorNvlinkUncorrectable">
            <summary>
            This indicates that an uncorrectable NVLink error was detected during the
            execution.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaError_t.cudaErrorJitCompilerNotFound">
            <summary>
            This indicates that the PTX JIT compiler library was not found. The JIT Compiler
            library is used for PTX compilation. The runtime may fall back to compiling PTX
            if an application does not contain a suitable binary for the current device.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaError_t.cudaErrorCooperativeLaunchTooLarge">
            <summary>
            This error indicates that the number of blocks launched per grid for a kernel that was
            launched via either ::cudaLaunchCooperativeKernel or ::cudaLaunchCooperativeKernelMultiDevice
            exceeds the maximum number of blocks as allowed by ::cudaOccupancyMaxActiveBlocksPerMultiprocessor
            or ::cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags times the number of multiprocessors
            as specified by the device attribute ::cudaDevAttrMultiProcessorCount.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaError_t.cudaErrorStartupFailure">
            <summary>
            This indicates an internal startup failure in the CUDA runtime.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaError_t.cudaErrorStreamCaptureUnsupported">
            <summary>
            The operation is not permitted when the stream is capturing.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaError_t.cudaErrorStreamCaptureInvalidated">
            <summary>
            The current capture sequence on the stream has been invalidated due to
            a previous error.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaError_t.cudaErrorStreamCaptureMerge">
            <summary>
            The operation would have resulted in a merge of two independent capture
            sequences.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaError_t.cudaErrorStreamCaptureUnmatched">
            <summary>
            The capture was not initiated in this stream.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaError_t.cudaErrorStreamCaptureUnjoined">
            <summary>
            The capture sequence contains a fork that was not joined to the primary
            stream.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaError_t.cudaErrorStreamCaptureIsolation">
            <summary>
            A dependency would have been created which crosses the capture sequence
            boundary. Only implicit in-stream ordering dependencies are allowed to
            cross the boundary.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaError_t.cudaErrorStreamCaptureImplicit">
            <summary>
            The operation would have resulted in a disallowed implicit dependency on
            a current capture sequence from cudaStreamLegacy.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaError_t.cudaErrorCapturedEvent">
            <summary>
            The operation is not permitted on an event which was last recorded in a
            capturing stream.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaError_t.cudaErrorApiFailureBase">
            <summary>
            Any unhandled CUDA driver error is added to this value and returned via
            the runtime. Production releases of CUDA should not return such errors.
            This error return is deprecated as of CUDA 4.1.
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cudaMemcpyKind">
            <summary>
            Defines the way in which copy is done
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaMemcpyKind.cudaMemcpyHostToHost">
            <summary>
            Host   -> Host
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaMemcpyKind.cudaMemcpyHostToDevice">
            <summary>
            Host   -> Device
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaMemcpyKind.cudaMemcpyDeviceToHost">
            <summary>
            Device -> Host
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaMemcpyKind.cudaMemcpyDeviceToDevice">
            <summary>
            Device -> Device
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cudaArray_t">
            <summary>
            CUDA Array
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cudaMemcpy3DPeerParms">
            <summary>
            CUDA 3D cross-device memory copying parameters
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaMemcpy3DPeerParms.srcArray">
            <summary>
            Source memory address
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaMemcpy3DPeerParms.srcPos">
            <summary>
            Source position offset
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaMemcpy3DPeerParms.srcPtr">
            <summary>
            Pitched source memory address
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaMemcpy3DPeerParms.srcDevice">
            <summary>
            Source device
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaMemcpy3DPeerParms.dstArray">
            <summary>
            Destination memory address
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaMemcpy3DPeerParms.dstPos">
            <summary>
            Destination position offset
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaMemcpy3DPeerParms.dstPtr">
            <summary>
            Pitched destination memory address
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaMemcpy3DPeerParms.dstDevice">
            <summary>
            Destination device
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaMemcpy3DPeerParms.extent">
            <summary>
            Requested memory copy size
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cudaHostAllocFlags">
            <summary>
            host allocation flags
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaHostAllocFlags.cudaHostAllocDefault">
            <summary>
            Default page-locked allocation flag
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaHostAllocFlags.cudaHostAllocPortable">
            <summary>
            Pinned memory accessible by all CUDA contexts
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaHostAllocFlags.cudaHostAllocMapped">
            <summary>
            Map allocation into device space
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaHostAllocFlags.cudaHostAllocWriteCombined">
            <summary>
            Write-combined memory
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cudaGetDevicePointerFlags">
            <summary>
            get device pointer flags
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaGetDevicePointerFlags.cudaReserved">
            <summary> </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cudaPitchedPtr">
            <summary>
            CUDA Pitched memory pointer
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaPitchedPtr.ptr">
            <summary>
            Pointer to allocated memory 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaPitchedPtr.pitch">
            <summary>
            Pitch of allocated memory in bytes
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaPitchedPtr.xsize">
            <summary>
            Logical width of allocation in elements
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaPitchedPtr.ysize">
            <summary>
            Logical height of allocation in elements 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cudaPitchedPtr.#ctor(System.IntPtr,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.size_t)">
            <summary>
            constructor
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cudaExtent">
            <summary>
            CUDA extent
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaExtent.width">
            <summary>
            Width in elements when referring to array memory, in bytes when referring to linear memory 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaExtent.height">
            <summary>
            Height in elements
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaExtent.depth">
            <summary>
            Depth in elements 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cudaExtent.#ctor(Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.size_t,Hybridizer.Runtime.CUDAImports.size_t)">
            <summary> </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cudaSurfaceObject_t">
            <summary>
            An opaque value that represents a CUDA Surface object
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cudaTextureObject_t">
            <summary>
            An opaque value that represents a CUDA texture object
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cudaTextureAddressMode">
            <summary>
            CUDA texture address modes
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaTextureAddressMode.cudaAddressModeWrap">
            <summary>
            Wrapping address mode
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaTextureAddressMode.cudaAddressModeClamp">
            <summary>
            Clamp to edge address mode
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaTextureAddressMode.cudaAddressModeMirror">
            <summary>
            Mirror address mode
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaTextureAddressMode.cudaAddressModeBorder">
            <summary>
            Border address mode
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cudaTextureFilterMode">
            <summary>
            CUDA texture filter modes
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaTextureFilterMode.cudaFilterModePoint">
            <summary>
            Point filter mode
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaTextureFilterMode.cudaFilterModeLinear">
            <summary>
            Linear filter mode
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cudaTextureReadMode">
            <summary>
            CUDA texture read modes
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaTextureReadMode.cudaReadModeElementType">
            <summary>
            Read texture as specified element type
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaTextureReadMode.cudaReadModeNormalizedFloat">
            <summary>
            Read texture as normalized float
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cudaTextureDesc">
            <summary>
            CUDA texture descriptor
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaTextureDesc.addressMode">
            <summary>
            Texture address mode for up to 3 dimensions
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaTextureDesc.filterMode">
            <summary>
            Texture filter mode
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaTextureDesc.readMode">
            <summary>
            Texture read mode
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaTextureDesc.sRGB">
            <summary>
            Perform sRGB->linear conversion during texture read
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaTextureDesc.borderColor">
            <summary>
            Texture Border Color
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaTextureDesc.normalizedCoords">
            <summary>
            Indicates whether texture reads are normalized or not
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaTextureDesc.maxAnisotropy">
            <summary>
            Limit to the anisotropy ratio
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaTextureDesc.mipmapFilterMode">
            <summary>
            Mipmap filter mode
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaTextureDesc.mipmapLevelBias">
            <summary>
            Offset applied to the supplied mipmap level
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaTextureDesc.minMipmapLevelClamp">
            <summary>
            Lower end of the mipmap level range to clamp access to
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaTextureDesc.maxMipmapLevelClamp">
            <summary>
            Upper end of the mipmap level range to clamp access to
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cudaResourceViewFormat">
            <summary>
             CUDA texture resource view formats
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaResourceViewFormat.cudaResViewFormatNone">
            <summary>
            No resource view format (use underlying resource format)
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaResourceViewFormat.cudaResViewFormatUnsignedChar1">
            <summary>
            1 channel unsigned 8-bit integers
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaResourceViewFormat.cudaResViewFormatUnsignedChar2">
            <summary>
            2 channel unsigned 8-bit integers
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaResourceViewFormat.cudaResViewFormatUnsignedChar4">
            <summary>
            4 channel unsigned 8-bit integers
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaResourceViewFormat.cudaResViewFormatSignedChar1">
            <summary>
            1 channel signed 8-bit integers
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaResourceViewFormat.cudaResViewFormatSignedChar2">
            <summary>
            2 channel signed 8-bit integers
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaResourceViewFormat.cudaResViewFormatSignedChar4">
            <summary>
            4 channel signed 8-bit integers
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaResourceViewFormat.cudaResViewFormatUnsignedShort1">
            <summary>
            1 channel unsigned 16-bit integers
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaResourceViewFormat.cudaResViewFormatUnsignedShort2">
            <summary>
            2 channel unsigned 16-bit integers
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaResourceViewFormat.cudaResViewFormatUnsignedShort4">
            <summary>
            4 channel unsigned 16-bit integers
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaResourceViewFormat.cudaResViewFormatSignedShort1">
            <summary>
            1 channel signed 16-bit integers
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaResourceViewFormat.cudaResViewFormatSignedShort2">
            <summary>
            2 channel signed 16-bit integers
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaResourceViewFormat.cudaResViewFormatSignedShort4">
            <summary>
            4 channel signed 16-bit integers
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaResourceViewFormat.cudaResViewFormatUnsignedInt1">
            <summary>
            1 channel unsigned 32-bit integers
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaResourceViewFormat.cudaResViewFormatUnsignedInt2">
            <summary>
            2 channel unsigned 32-bit integers
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaResourceViewFormat.cudaResViewFormatUnsignedInt4">
            <summary>
            4 channel unsigned 32-bit integers
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaResourceViewFormat.cudaResViewFormatSignedInt1">
            <summary>
            1 channel signed 32-bit integers
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaResourceViewFormat.cudaResViewFormatSignedInt2">
            <summary>
            2 channel signed 32-bit integers
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaResourceViewFormat.cudaResViewFormatSignedInt4">
            <summary>
            4 channel signed 32-bit integers
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaResourceViewFormat.cudaResViewFormatHalf1">
            <summary>
            1 channel 16-bit floating point
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaResourceViewFormat.cudaResViewFormatHalf2">
            <summary>
            2 channel 16-bit floating point
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaResourceViewFormat.cudaResViewFormatHalf4">
            <summary>
            4 channel 16-bit floating point
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaResourceViewFormat.cudaResViewFormatFloat1">
            <summary>
            1 channel 32-bit floating point
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaResourceViewFormat.cudaResViewFormatFloat2">
            <summary>
            2 channel 32-bit floating point
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaResourceViewFormat.cudaResViewFormatFloat4">
            <summary>
            4 channel 32-bit floating point
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaResourceViewFormat.cudaResViewFormatUnsignedBlockCompressed1">
            <summary>
            Block compressed 1
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaResourceViewFormat.cudaResViewFormatUnsignedBlockCompressed2">
            <summary>
            Block compressed 2
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaResourceViewFormat.cudaResViewFormatUnsignedBlockCompressed3">
            <summary>
            Block compressed 3
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaResourceViewFormat.cudaResViewFormatUnsignedBlockCompressed4">
            <summary>
            Block compressed 4 unsigned
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaResourceViewFormat.cudaResViewFormatSignedBlockCompressed4">
            <summary>
            Block compressed 4 signed
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaResourceViewFormat.cudaResViewFormatUnsignedBlockCompressed5">
            <summary>
            Block compressed 5 unsigned
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaResourceViewFormat.cudaResViewFormatSignedBlockCompressed5">
            <summary>
            Block compressed 5 signed
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaResourceViewFormat.cudaResViewFormatUnsignedBlockCompressed6H">
            <summary>
            Block compressed 6 unsigned half-float
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaResourceViewFormat.cudaResViewFormatSignedBlockCompressed6H">
            <summary>
            Block compressed 6 signed half-float
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaResourceViewFormat.cudaResViewFormatUnsignedBlockCompressed7">
            <summary>
            Block compressed 7
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cudaResourceViewDesc">
            <summary>
            CUDA resource view descriptor
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaResourceViewDesc.format">
            <summary>
            Resource view format
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaResourceViewDesc.width">
            <summary>
            Width of the resource view
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaResourceViewDesc.height">
            <summary>
            Height of the resource view
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaResourceViewDesc.depth">
            <summary>
            Depth of the resource view
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaResourceViewDesc.firstMipmapLevel">
            <summary>
            First defined mipmap level
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaResourceViewDesc.lastMipmapLevel">
            <summary>
            Last defined mipmap level
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaResourceViewDesc.firstLayer">
            <summary>
            First layer index
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaResourceViewDesc.lastlayer">
            <summary>
            Last layer index
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cudaChannelFormatKind">
            <summary>
            Channel format kind
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaChannelFormatKind.cudaChannelFormatKindSigned">
            <summary>
            Signed channel format
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaChannelFormatKind.cudaChannelFormatKindUnsigned">
            <summary>
            Unsigned channel format
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaChannelFormatKind.cudaChannelFormatKindFloat">
            <summary>
            Float channel format
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaChannelFormatKind.cudaChannelFormatKindNone">
            <summary>
            No channel format
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cudaChannelFormatDesc">
            <summary>
            CUDA Channel format descriptor
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaChannelFormatDesc.x">
            <summary>
            x
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaChannelFormatDesc.y">
            <summary>
            y
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaChannelFormatDesc.z">
            <summary>
            z
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaChannelFormatDesc.w">
            <summary>
            w
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaChannelFormatDesc.f">
            <summary>
            Channel format kind
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cudaMallocArrayFlags">
            <summary>
            array allocation flags
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaMallocArrayFlags.cudaArrayDefault">
            <summary>
            Default CUDA array allocation flag
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaMallocArrayFlags.cudaArrayLayered">
            <summary>
            Must be set in cudaMalloc3DArray to create a layered CUDA array
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaMallocArrayFlags.cudaArraySurfaceLoadStore">
            <summary>
            Must be set in cudaMallocArray or cudaMalloc3DArray in order to bind surfaces to the CUDA array
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaMallocArrayFlags.cudaArrayCubemap">
            <summary>
            Must be set in cudaMalloc3DArray to create a cubemap CUDA array
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaMallocArrayFlags.cudaArrayTextureGather">
            <summary>
            Must be set in cudaMallocArray or cudaMalloc3DArray in order to perform texture gather operations on the CUDA array
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cudaPos">
            <summary>
            CUDA 3D position
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaPos.x">
            <summary>
            x
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaPos.y">
            <summary>
            y
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaPos.z">
            <summary>
            z
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cudaMemcpy3DParms">
            <summary>
            CUDA 3D memory copying parameters
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaMemcpy3DParms.srcArray">
            <summary>
            Source memory address
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaMemcpy3DParms.srcPos">
            <summary>
            Source position offset
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaMemcpy3DParms.srcPtr">
            <summary>
            Pitched source memory address
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaMemcpy3DParms.dstArray">
            <summary>
            Destination memory address
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaMemcpy3DParms.dstPos">
            <summary>
            Destination position offset
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaMemcpy3DParms.dstPtr">
            <summary>
            Pitched destination memory address
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaMemcpy3DParms.extent">
            <summary>
            Requested memory copy size
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaMemcpy3DParms.kind">
            <summary>
            Type of transfer
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cudaFuncAttributes">
            <summary>
            CUDA function attributes
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaFuncAttributes.sharedSizeBytes">
            <summary>
             The size in bytes of statically-allocated shared memory per block
             required by this function. This does not include dynamically-allocated
             shared memory requested by the user at runtime.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaFuncAttributes.constSizeBytes">
            <summary>
            The size in bytes of user-allocated constant memory required by this function.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaFuncAttributes.localSizeBytes">
            <summary>
            The size in bytes of local memory used by each thread of this function.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaFuncAttributes.maxThreadsPerBlock">
            <summary>
            The maximum number of threads per block, beyond which a launch of the
            function would fail. This number depends on both the function and the
            device on which the function is currently loaded.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaFuncAttributes.numRegs">
            <summary>
            The number of registers used by each thread of this function.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaFuncAttributes.ptxVersion">
            <summary>
            The PTX virtual architecture version for which the function was
            compiled. This value is the major PTX version * 10 + the minor PTX
            version, so a PTX version 1.3 function would return the value 13.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaFuncAttributes.binaryVersion">
            <summary>
            The binary architecture version for which the function was compiled.
            This value is the major binary version * 10 + the minor binary version,
            so a binary version 1.3 function would return the value 13.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaFuncAttributes.cacheModeCA">
            <summary>
            The attribute to indicate whether the function has been compiled with
            user specified option "-Xptxas --dlcm=ca" set.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaFuncAttributes.maxDynamicSharedSizeBytes">
            <summary>
            The maximum size in bytes of dynamic shared memory per block for
            this function. Any launch must have a dynamic shared memory size
            smaller than this value.
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaFuncAttributes.preferredShmemCarveout">
            <summary>
            On devices where the L1 cache and shared memory use the same hardware resources, 
            this sets the shared memory carveout preference, in percent of the total resources. 
            This is only a hint, and the driver can choose a different ratio if required to execute the function.
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cudaFuncCache">
            <summary>
            CUDA function cache configurations
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaFuncCache.cudaFuncCachePreferNone">
            <summary>
            Default function cache configuration, no preference
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaFuncCache.cudaFuncCachePreferShared">
            <summary>
            Prefer larger shared memory and smaller L1 cache
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaFuncCache.cudaFuncCachePreferL1">
            <summary>
            Prefer larger L1 cache and smaller shared memory
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cudaEvent_t">
            <summary>
            CUDA event types
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cudaEventFlags">
            <summary>
            cuda event flags
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaEventFlags.cudaEventDefault">
            <summary>
            Default event flag
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaEventFlags.cudaEventBlockingSync">
            <summary>
            Event uses blocking synchronization
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaEventFlags.cudaEventDisableTiming">
            <summary>
            Event will not record timing data
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaEventFlags.cudaEventInterprocess">
            <summary>
            Event is suitable for interprocess use. cudaEventDisableTiming must be set
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cudaMipmappedArray_t">
            <summary>
             CUDA mipmapped array
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cudaMipmappedArray_const_t">
            <summary>
            CUDA mipmapped array (as source argument)
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cudaMemmoryAdvise">
            <summary>
            CUDA Memory Advise values 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaMemmoryAdvise.cudaMemAdviseSetReadMostly">
            <summary>
            Data will mostly be read and only occassionally be written to
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaMemmoryAdvise.cudaMemAdviseUnsetReadMostly">
            <summary>
            Undo the effect of ::cudaMemAdviseSetReadMostly
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaMemmoryAdvise.cudaMemAdviseSetPreferredLocation">
            <summary>
            Set the preferred location for the data as the specified device
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaMemmoryAdvise.cudaMemAdviseUnsetPreferredLocation">
            <summary>
            Clear the preferred location for the data
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaMemmoryAdvise.cudaMemAdviseSetAccessedBy">
            <summary>
            Data will be accessed by the specified device, so prevent page faults as much as possible
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaMemmoryAdvise.cudaMemAdviseUnsetAccessedBy">
            <summary>
            Let the Unified Memory subsystem decide on the page faulting policy for the specified device
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cudaMemAttach">
            <summary>
            cuda memory attach
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaMemAttach.cudaMemAttachGlobal">
            <summary>
            Memory can be accessed by any stream on any device
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaMemAttach.cudaMemAttachHost">
            <summary>
            Memory cannot be accessed by any stream on any device 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaMemAttach.cudaMemAttachSingle">
            <summary>
            Memory can only be accessed by a single stream on the associated device 
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cudaResourceType">
            <summary>
            CUDA resource types
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaResourceType.cudaResourceTypeArray">
            <summary>
            Array resource
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaResourceType.cudaResourceTypeMipmappedArray">
            <summary>
            Mipmapped array resource
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaResourceType.cudaResourceTypeLinear">
            <summary>
            Linear resource
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaResourceType.cudaResourceTypePitch2D">
            <summary>
            Pitch 2D resource
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cudaResourceDesc">
            <summary>
            CUDA resource descriptor
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaResourceDesc.resType">
            <summary>
            Resource type
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaResourceDesc.arrayStruct">
            <summary>
            CUDA array
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaResourceDesc.mipmap">
            <summary>
            CUDA mipmapped array
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cudaResourceDesc.cudaResourceDesc_linear">
            <summary>
            linear
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaResourceDesc.cudaResourceDesc_linear.devPtr">
            <summary>
            device pointer
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaResourceDesc.cudaResourceDesc_linear.desc">
            <summary>
            Channel descriptor
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaResourceDesc.cudaResourceDesc_linear.sizeInBytes">
            <summary>
            Size in bytes
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaResourceDesc.linear">
            <summary>
            linear
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cudaResourceDesc.cudaResourceDesc_pitch2D">
            <summary>
            pitch2D
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaResourceDesc.cudaResourceDesc_pitch2D.devPtr">
            <summary>
            Device pointer
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaResourceDesc.cudaResourceDesc_pitch2D.desc">
            <summary>
            Channel descriptor
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaResourceDesc.cudaResourceDesc_pitch2D.width">
            <summary>
            Width of the array in elements
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaResourceDesc.cudaResourceDesc_pitch2D.height">
            <summary>
            Height of the array in elements
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaResourceDesc.cudaResourceDesc_pitch2D.pitchInBytes">
            <summary>
            Pitch between two rows in bytes
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cudaResourceDesc.pitch2D">
            <summary>
            pitch2D
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cuComplex">
            <summary>
            complex single-precision
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuComplex.re">
            <summary>
            real part
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuComplex.im">
            <summary>
            imaginary part
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cuDoubleComplex">
            <summary>
            complex double-precision
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuDoubleComplex.re">
            <summary>
            real part
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cuDoubleComplex.im">
            <summary>
            imaginary part
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.float2">
            <summary>
            2 32 bits float, packed
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.float2.x">
            <summary>
            x
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.float2.y">
            <summary>
            y
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.float2.op_Explicit(Hybridizer.Runtime.CUDAImports.float2)~System.Int64">
            <summary>
            conversion to signed 64 bits integer
            </summary>
            <param name="res"></param>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.float2.op_Explicit(Hybridizer.Runtime.CUDAImports.float2)~Hybridizer.Runtime.CUDAImports.int2">
            <summary>
            conversion to int2
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.float2.op_Explicit(Hybridizer.Runtime.CUDAImports.float2)~System.Double">
            <summary>
            conversion to double
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.float2.op_Explicit(Hybridizer.Runtime.CUDAImports.float2)~Hybridizer.Runtime.CUDAImports.short4">
            <summary>
            conversion to short4
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.float2.op_Explicit(Hybridizer.Runtime.CUDAImports.float2)~Hybridizer.Runtime.CUDAImports.char8">
            <summary>
            conversion to char8
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.float2.#ctor(System.Single,System.Single)">
            <summary>
            constructor from 2 individual 32 bits floats
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.float2.#ctor(Hybridizer.Runtime.CUDAImports.int2)">
            <summary>
            constructor from int2
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.float2.op_Addition(Hybridizer.Runtime.CUDAImports.float2,Hybridizer.Runtime.CUDAImports.float2)">
            <summary>
            addition operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.float2.op_Addition(System.Single,Hybridizer.Runtime.CUDAImports.float2)">
            <summary>
            addition operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.float2.op_Addition(Hybridizer.Runtime.CUDAImports.float2,System.Single)">
            <summary>
            addition operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.float2.op_Subtraction(Hybridizer.Runtime.CUDAImports.float2,Hybridizer.Runtime.CUDAImports.float2)">
            <summary>
            substraction operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.float2.op_Subtraction(System.Single,Hybridizer.Runtime.CUDAImports.float2)">
            <summary>
            substraction operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.float2.op_Subtraction(Hybridizer.Runtime.CUDAImports.float2,System.Single)">
            <summary>
            substraction operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.float2.op_Multiply(Hybridizer.Runtime.CUDAImports.float2,Hybridizer.Runtime.CUDAImports.float2)">
            <summary>
            multiplication operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.float2.op_Multiply(System.Single,Hybridizer.Runtime.CUDAImports.float2)">
            <summary>
            multiplication operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.float2.op_Multiply(Hybridizer.Runtime.CUDAImports.float2,System.Single)">
            <summary>
            multiplication operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.float2.op_Division(Hybridizer.Runtime.CUDAImports.float2,Hybridizer.Runtime.CUDAImports.float2)">
            <summary>
            division operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.float2.op_Division(System.Single,Hybridizer.Runtime.CUDAImports.float2)">
            <summary>
            division operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.float2.op_Division(Hybridizer.Runtime.CUDAImports.float2,System.Single)">
            <summary>
            division operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.float2.Store(Hybridizer.Runtime.CUDAImports.float2*,Hybridizer.Runtime.CUDAImports.float2,System.Int32)">
            <summary>
            stores in memory
            </summary>
            <param name="ptr">destination pointer</param>
            <param name="val">value to store</param>
            <param name="alignment">has to be a compile time constant</param>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.float2.Load(Hybridizer.Runtime.CUDAImports.float2*,System.Int32)">
            <summary>
            loads from memory
            </summary>
            <param name="ptr"></param>
            <param name="alignment">has to be a compile time constant</param>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.float3">
            <summary>
            3 32 bits floating points elements, packed
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.float3.x">
            <summary>
            x
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.float3.y">
            <summary>
            y
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.float3.z">
            <summary>
            z
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.float3.op_Explicit(Hybridizer.Runtime.CUDAImports.float3)~System.Int64">
            <summary>
            conversion to signed 64 bits integer
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.float3.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            constructor from 3 float
            </summary>
            <param name="xx"></param>
            <param name="yy"></param>
            <param name="zz"></param>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.float3.op_Addition(Hybridizer.Runtime.CUDAImports.float3,Hybridizer.Runtime.CUDAImports.float3)">
            <summary>
            addition operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.float3.op_Addition(System.Single,Hybridizer.Runtime.CUDAImports.float3)">
            <summary>
            addition operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.float3.op_Addition(Hybridizer.Runtime.CUDAImports.float3,System.Single)">
            <summary>
            addition operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.float3.op_Subtraction(Hybridizer.Runtime.CUDAImports.float3,Hybridizer.Runtime.CUDAImports.float3)">
            <summary>
            substraction operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.float3.op_Subtraction(System.Single,Hybridizer.Runtime.CUDAImports.float3)">
            <summary>
            substraction operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.float3.op_Subtraction(Hybridizer.Runtime.CUDAImports.float3,System.Single)">
            <summary>
            substraction operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.float3.op_Multiply(Hybridizer.Runtime.CUDAImports.float3,Hybridizer.Runtime.CUDAImports.float3)">
            <summary>
            multiplication operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.float3.op_Multiply(System.Single,Hybridizer.Runtime.CUDAImports.float3)">
            <summary>
            multiplication operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.float3.op_Multiply(Hybridizer.Runtime.CUDAImports.float3,System.Single)">
            <summary>
            multiplication operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.float3.op_Division(Hybridizer.Runtime.CUDAImports.float3,Hybridizer.Runtime.CUDAImports.float3)">
            <summary>
            division operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.float3.op_Division(System.Single,Hybridizer.Runtime.CUDAImports.float3)">
            <summary>
            division operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.float3.op_Division(Hybridizer.Runtime.CUDAImports.float3,System.Single)">
            <summary>
            division operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.float3.Store(Hybridizer.Runtime.CUDAImports.float3*,Hybridizer.Runtime.CUDAImports.float3,System.Int32)">
            <summary>
            stores in memory
            </summary>
            <param name="ptr">destination pointer</param>
            <param name="val">value to store</param>
            <param name="alignment">has to be a compile time constant</param>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.float3.Load(Hybridizer.Runtime.CUDAImports.float3*,System.Int32)">
            <summary>
            loads from memory
            </summary>
            <param name="ptr"></param>
            <param name="alignment">has to be a compile time constant</param>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.double2">
            <summary>
            2 64 bits floating point elements, packed
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.double2.x">
            <summary>
            x
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.double2.y">
            <summary>
            y
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.double2.#ctor(System.Double,System.Double)">
            <summary>
            constructor from 2 64 bits float
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.double2.#ctor(Hybridizer.Runtime.CUDAImports.double2)">
            <summary>
            copy constructor
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.double2.op_Addition(Hybridizer.Runtime.CUDAImports.double2,Hybridizer.Runtime.CUDAImports.double2)">
            <summary>
            addition operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.double2.op_Addition(System.Double,Hybridizer.Runtime.CUDAImports.double2)">
            <summary>
            addition operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.double2.op_Addition(Hybridizer.Runtime.CUDAImports.double2,System.Double)">
            <summary>
            addition operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.double2.op_Subtraction(Hybridizer.Runtime.CUDAImports.double2,Hybridizer.Runtime.CUDAImports.double2)">
            <summary>
            substraction operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.double2.op_Subtraction(System.Double,Hybridizer.Runtime.CUDAImports.double2)">
            <summary>
            substraction operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.double2.op_Subtraction(Hybridizer.Runtime.CUDAImports.double2,System.Double)">
            <summary>
            substraction operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.double2.op_Multiply(Hybridizer.Runtime.CUDAImports.double2,Hybridizer.Runtime.CUDAImports.double2)">
            <summary>
            multiplication operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.double2.op_Multiply(System.Double,Hybridizer.Runtime.CUDAImports.double2)">
            <summary>
            multiplication operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.double2.op_Multiply(Hybridizer.Runtime.CUDAImports.double2,System.Double)">
            <summary>
            multiplication operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.double2.op_Division(Hybridizer.Runtime.CUDAImports.double2,Hybridizer.Runtime.CUDAImports.double2)">
            <summary>
            division operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.double2.op_Division(System.Double,Hybridizer.Runtime.CUDAImports.double2)">
            <summary>
            division operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.double2.op_Division(Hybridizer.Runtime.CUDAImports.double2,System.Double)">
            <summary>
            division operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.double2.op_GreaterThanOrEqual(Hybridizer.Runtime.CUDAImports.double2,Hybridizer.Runtime.CUDAImports.double2)">
            <summary>
            greater or equal operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.double2.op_GreaterThan(Hybridizer.Runtime.CUDAImports.double2,Hybridizer.Runtime.CUDAImports.double2)">
            <summary>
            strict greater operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.double2.op_LessThanOrEqual(Hybridizer.Runtime.CUDAImports.double2,Hybridizer.Runtime.CUDAImports.double2)">
            <summary>
            less or equal operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.double2.op_LessThan(Hybridizer.Runtime.CUDAImports.double2,Hybridizer.Runtime.CUDAImports.double2)">
            <summary>
            strict less operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.double2.Select(Hybridizer.Runtime.CUDAImports.bool2,Hybridizer.Runtime.CUDAImports.double2,Hybridizer.Runtime.CUDAImports.double2)">
            <summary>
            selects components from l or r, depending on mask value
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.double2.Store(Hybridizer.Runtime.CUDAImports.double2*,Hybridizer.Runtime.CUDAImports.double2,System.Int32)">
            <summary>
            stores in memory
            </summary>
            <param name="ptr">destination pointer</param>
            <param name="val">value to store</param>
            <param name="alignment">has to be a compile time constant</param>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.double2.Load(Hybridizer.Runtime.CUDAImports.double2*,System.Int32)">
            <summary>
            loads from memory
            </summary>
            <param name="ptr"></param>
            <param name="alignment">has to be a compile time constant</param>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.float4">
            <summary>
            4 32 bits floats
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.float4.x">
            <summary>
            x
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.float4.y">
            <summary>
            y
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.float4.z">
            <summary>
            z
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.float4.w">
            <summary>
            w
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.float4.#ctor(Hybridizer.Runtime.CUDAImports.float4)">
            <summary>
            copy constructor
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.float4.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            constructor from components
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.float4.op_Addition(Hybridizer.Runtime.CUDAImports.float4,Hybridizer.Runtime.CUDAImports.float4)">
            <summary>
            addition operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.float4.op_Addition(System.Single,Hybridizer.Runtime.CUDAImports.float4)">
            <summary>
            addition operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.float4.op_Addition(Hybridizer.Runtime.CUDAImports.float4,System.Single)">
            <summary>
            addition operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.float4.op_Subtraction(Hybridizer.Runtime.CUDAImports.float4,Hybridizer.Runtime.CUDAImports.float4)">
            <summary>
            substraction operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.float4.op_Subtraction(System.Single,Hybridizer.Runtime.CUDAImports.float4)">
            <summary>
            substraction operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.float4.op_Subtraction(Hybridizer.Runtime.CUDAImports.float4,System.Single)">
            <summary>
            substraction operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.float4.op_Multiply(Hybridizer.Runtime.CUDAImports.float4,Hybridizer.Runtime.CUDAImports.float4)">
            <summary>
            multiplication operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.float4.op_Multiply(System.Single,Hybridizer.Runtime.CUDAImports.float4)">
            <summary>
            multiplication operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.float4.op_Multiply(Hybridizer.Runtime.CUDAImports.float4,System.Single)">
            <summary>
            multiplication operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.float4.op_Division(Hybridizer.Runtime.CUDAImports.float4,Hybridizer.Runtime.CUDAImports.float4)">
            <summary>
            division operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.float4.op_Division(System.Single,Hybridizer.Runtime.CUDAImports.float4)">
            <summary>
            division operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.float4.op_Division(Hybridizer.Runtime.CUDAImports.float4,System.Single)">
            <summary>
            division operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.float4.Store(Hybridizer.Runtime.CUDAImports.float4*,Hybridizer.Runtime.CUDAImports.float4,System.Int32)">
            <summary>
            Stores in memory
            </summary>
            <param name="ptr">destination pointer</param>
            <param name="val">value to store</param>
            <param name="alignment">has to be a compile time constant</param>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.float4.Load(Hybridizer.Runtime.CUDAImports.float4*,System.Int32)">
            <summary>
            loads from memory
            </summary>
            <param name="ptr"></param>
            <param name="alignment">has to be a compile time constant</param>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.float8">
            <summary>
            8 32 bits floats
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.float8.x">
            <summary>
            x
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.float8.y">
            <summary>
            y
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.float8.z">
            <summary>
            z
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.float8.w">
            <summary>
            w
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.float8.x2">
            <summary>
            x2
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.float8.y2">
            <summary>
            y2
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.float8.z2">
            <summary>
            z2
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.float8.w2">
            <summary>
            w2
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.float8.#ctor(Hybridizer.Runtime.CUDAImports.float8)">
            <summary>
            copy constructor
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.float8.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            constructor from components
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.float8.Select(Hybridizer.Runtime.CUDAImports.bool8,Hybridizer.Runtime.CUDAImports.float8,Hybridizer.Runtime.CUDAImports.float8)">
            <summary>
            selects components from l or r, depending on mask value
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.float8.Load(Hybridizer.Runtime.CUDAImports.float8*,System.Int32)">
            <summary>
            loads from memory
            </summary>
            <param name="ptr"></param>
            <param name="alignment">has to be a compile time constant</param>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.float8.Store(Hybridizer.Runtime.CUDAImports.float8*,Hybridizer.Runtime.CUDAImports.float8,System.Int32)">
            <summary>
            stores in memory
            </summary>
            <param name="ptr">destination pointer</param>
            <param name="val">value to store</param>
            <param name="alignment">has to be a compile time constant</param>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.float8.op_Addition(Hybridizer.Runtime.CUDAImports.float8,Hybridizer.Runtime.CUDAImports.float8)">
            <summary>
            addition operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.float8.op_Addition(System.Single,Hybridizer.Runtime.CUDAImports.float8)">
            <summary>
            addition operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.float8.op_LessThan(Hybridizer.Runtime.CUDAImports.float8,Hybridizer.Runtime.CUDAImports.float8)">
            <summary>
            strict less operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.float8.op_LessThanOrEqual(Hybridizer.Runtime.CUDAImports.float8,Hybridizer.Runtime.CUDAImports.float8)">
            <summary>
            less or equal operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.float8.op_GreaterThanOrEqual(Hybridizer.Runtime.CUDAImports.float8,Hybridizer.Runtime.CUDAImports.float8)">
            <summary>
            greater or equal operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.float8.op_GreaterThan(Hybridizer.Runtime.CUDAImports.float8,Hybridizer.Runtime.CUDAImports.float8)">
            <summary>
            strict greater operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.float8.op_GreaterThan(Hybridizer.Runtime.CUDAImports.float8,System.Single)">
            <summary>
            strict greater operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.float8.op_LessThan(Hybridizer.Runtime.CUDAImports.float8,System.Single)">
            <summary>
            strict less operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.float8.op_Addition(Hybridizer.Runtime.CUDAImports.float8,System.Single)">
            <summary>
            addition operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.float8.op_Subtraction(Hybridizer.Runtime.CUDAImports.float8,Hybridizer.Runtime.CUDAImports.float8)">
            <summary>
            substraction operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.float8.op_Subtraction(System.Single,Hybridizer.Runtime.CUDAImports.float8)">
            <summary>
            substraction operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.float8.op_Subtraction(Hybridizer.Runtime.CUDAImports.float8,System.Single)">
            <summary>
            substraction operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.float8.op_Multiply(Hybridizer.Runtime.CUDAImports.float8,Hybridizer.Runtime.CUDAImports.float8)">
            <summary>
            multiplication operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.float8.op_Multiply(System.Single,Hybridizer.Runtime.CUDAImports.float8)">
            <summary>
            multiplication operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.float8.op_Multiply(Hybridizer.Runtime.CUDAImports.float8,System.Single)">
            <summary>
            multiplication operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.float8.op_Division(Hybridizer.Runtime.CUDAImports.float8,Hybridizer.Runtime.CUDAImports.float8)">
            <summary>
            division operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.float8.op_Division(System.Single,Hybridizer.Runtime.CUDAImports.float8)">
            <summary>
            division operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.float8.op_Division(Hybridizer.Runtime.CUDAImports.float8,System.Single)">
            <summary>
            division operator
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.bool2">
            <summary>
            2 booleans
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.bool2.x">
            <summary>
            component
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.bool2.y">
            <summary>
            component
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.bool4">
            <summary>
            4 booleans
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.bool4.x">
            <summary>
            component
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.bool4.y">
            <summary>
            component
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.bool4.z">
            <summary>
            component
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.bool4.w">
            <summary>
            component
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.bool8">
            <summary>
            8 booleans
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.bool8.x">
            <summary>
            component
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.bool8.y">
            <summary>
            component
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.bool8.z">
            <summary>
            component
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.bool8.w">
            <summary>
            component
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.bool8.x2">
            <summary>
            component
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.bool8.y2">
            <summary>
            component
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.bool8.z2">
            <summary>
            component
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.bool8.w2">
            <summary>
            component
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.double4">
            <summary>
            4 64 bits floating points elements
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.double4.x">
            <summary>
            x
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.double4.y">
            <summary>
            y
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.double4.z">
            <summary>
            z
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.double4.w">
            <summary>
            w
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.double4.op_Addition(Hybridizer.Runtime.CUDAImports.double4,Hybridizer.Runtime.CUDAImports.double4)">
            <summary>
            addition operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.double4.op_Addition(System.Double,Hybridizer.Runtime.CUDAImports.double4)">
            <summary>
            addition operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.double4.op_Addition(Hybridizer.Runtime.CUDAImports.double4,System.Double)">
            <summary>
            addition operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.double4.op_Subtraction(Hybridizer.Runtime.CUDAImports.double4,Hybridizer.Runtime.CUDAImports.double4)">
            <summary>
            substraction operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.double4.op_Subtraction(System.Double,Hybridizer.Runtime.CUDAImports.double4)">
            <summary>
            substraction operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.double4.op_Subtraction(Hybridizer.Runtime.CUDAImports.double4,System.Double)">
            <summary>
            substraction operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.double4.op_Multiply(Hybridizer.Runtime.CUDAImports.double4,Hybridizer.Runtime.CUDAImports.double4)">
            <summary>
            multiplication operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.double4.op_Multiply(System.Double,Hybridizer.Runtime.CUDAImports.double4)">
            <summary>
            multiplication operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.double4.op_Multiply(Hybridizer.Runtime.CUDAImports.double4,System.Double)">
            <summary>
            multiplication operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.double4.op_Division(Hybridizer.Runtime.CUDAImports.double4,Hybridizer.Runtime.CUDAImports.double4)">
            <summary>
            division operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.double4.op_Division(System.Double,Hybridizer.Runtime.CUDAImports.double4)">
            <summary>
            division operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.double4.op_Division(Hybridizer.Runtime.CUDAImports.double4,System.Double)">
            <summary>
            division operator
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.int2">
            <summary>
            2 32 bits integers
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.int2.x">
            <summary>
            x
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.int2.y">
            <summary>
            y
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.int2.#ctor(System.Int32,System.Int32)">
            <summary>
            constructor from components
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.int2.#ctor(Hybridizer.Runtime.CUDAImports.float2)">
            <summary>
            constructor from float2
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.int2.#ctor(System.Int64)">
            <summary>
            constructor from 64 bits integer
            </summary>
            <param name="val">lower part goes to x, high part to y</param>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.int2.op_Explicit(Hybridizer.Runtime.CUDAImports.int2)~System.Int64">
            <summary>
            conversion to 64 bits integer
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.int2.op_Explicit(Hybridizer.Runtime.CUDAImports.int2)~Hybridizer.Runtime.CUDAImports.float2">
            <summary>
            conversion to float2
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.int2.op_Explicit(Hybridizer.Runtime.CUDAImports.int2)~System.Double">
            <summary>
            conversion to 64 bits floating point
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.int2.op_Explicit(Hybridizer.Runtime.CUDAImports.int2)~Hybridizer.Runtime.CUDAImports.short4">
            <summary>
            conversion to short4
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.int2.op_Explicit(Hybridizer.Runtime.CUDAImports.int2)~Hybridizer.Runtime.CUDAImports.char8">
            <summary>
            conversion to char8
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.int2.op_Addition(Hybridizer.Runtime.CUDAImports.int2,Hybridizer.Runtime.CUDAImports.int2)">
            <summary>
            addition operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.int2.op_Addition(System.Int32,Hybridizer.Runtime.CUDAImports.int2)">
            <summary>
            addition operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.int2.op_Addition(Hybridizer.Runtime.CUDAImports.int2,System.Int32)">
            <summary>
            addition operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.int2.op_Subtraction(Hybridizer.Runtime.CUDAImports.int2,Hybridizer.Runtime.CUDAImports.int2)">
            <summary>
            substraction operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.int2.op_Subtraction(System.Int32,Hybridizer.Runtime.CUDAImports.int2)">
            <summary>
            substraction operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.int2.op_Subtraction(Hybridizer.Runtime.CUDAImports.int2,System.Int32)">
            <summary>
            substraction operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.int2.op_Multiply(Hybridizer.Runtime.CUDAImports.int2,Hybridizer.Runtime.CUDAImports.int2)">
            <summary>
            multiplication operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.int2.op_Multiply(System.Int32,Hybridizer.Runtime.CUDAImports.int2)">
            <summary>
            multiplication operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.int2.op_Multiply(Hybridizer.Runtime.CUDAImports.int2,System.Int32)">
            <summary>
            multiplication operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.int2.op_Division(Hybridizer.Runtime.CUDAImports.int2,Hybridizer.Runtime.CUDAImports.int2)">
            <summary>
            division operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.int2.op_Division(System.Int32,Hybridizer.Runtime.CUDAImports.int2)">
            <summary>
            division operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.int2.op_Division(Hybridizer.Runtime.CUDAImports.int2,System.Int32)">
            <summary>
            division operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.int2.op_BitwiseAnd(Hybridizer.Runtime.CUDAImports.int2,Hybridizer.Runtime.CUDAImports.int2)">
            <summary>
            bitwise AND operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.int2.op_BitwiseAnd(System.Int32,Hybridizer.Runtime.CUDAImports.int2)">
            <summary>
            bitwise AND operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.int2.op_BitwiseAnd(Hybridizer.Runtime.CUDAImports.int2,System.Int32)">
            <summary>
            bitwise AND operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.int2.op_BitwiseOr(Hybridizer.Runtime.CUDAImports.int2,Hybridizer.Runtime.CUDAImports.int2)">
            <summary>
            bitwise OR operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.int2.op_BitwiseOr(System.Int32,Hybridizer.Runtime.CUDAImports.int2)">
            <summary>
            bitwise OR operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.int2.op_BitwiseOr(Hybridizer.Runtime.CUDAImports.int2,System.Int32)">
            <summary>
            bitwise OR operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.int2.op_ExclusiveOr(Hybridizer.Runtime.CUDAImports.int2,Hybridizer.Runtime.CUDAImports.int2)">
            <summary>
            bitwise XOR operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.int2.op_ExclusiveOr(System.Int32,Hybridizer.Runtime.CUDAImports.int2)">
            <summary>
            bitwise XOR operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.int2.op_ExclusiveOr(Hybridizer.Runtime.CUDAImports.int2,System.Int32)">
            <summary>
            bitwise XOR operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.int2.Store(Hybridizer.Runtime.CUDAImports.int2*,Hybridizer.Runtime.CUDAImports.int2,System.Int32)">
            <summary>
            Stores in memory
            </summary>
            <param name="ptr"></param>
            <param name="val"></param>
            <param name="alignment">has to be a compile time constant</param>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.int2.Store(Hybridizer.Runtime.CUDAImports.int2*,System.Int32,System.Int32)">
            <summary>
            stores in memory
            </summary>
            <param name="ptr">destination pointer</param>
            <param name="val">value to store</param>
            <param name="alignment">has to be a compile time constant</param>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.int2.Load(Hybridizer.Runtime.CUDAImports.int2*,System.Int32)">
            <summary>
            loads from memory
            </summary>
            <param name="ptr"></param>
            <param name="alignment">has to be a compile time constant</param>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.long2">
            <summary>
            2 64 bits integers
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.long2.x">
            <summary>
            x
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.long2.y">
            <summary>
            y
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.long2.#ctor(System.Int64,System.Int64)">
            <summary>
            constructor from components
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.long2.#ctor(Hybridizer.Runtime.CUDAImports.long2)">
            <summary>
            copy constructor
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.long2.#ctor(System.Int64)">
            <summary>
            constructor from single component
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.long2.op_Addition(Hybridizer.Runtime.CUDAImports.long2,Hybridizer.Runtime.CUDAImports.long2)">
            <summary>
            addition operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.long2.op_Addition(System.Int32,Hybridizer.Runtime.CUDAImports.long2)">
            <summary>
            addition operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.long2.op_Addition(Hybridizer.Runtime.CUDAImports.long2,System.Int32)">
            <summary>
            addition operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.long2.op_Subtraction(Hybridizer.Runtime.CUDAImports.long2,Hybridizer.Runtime.CUDAImports.long2)">
            <summary>
            substraction operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.long2.op_Subtraction(System.Int32,Hybridizer.Runtime.CUDAImports.long2)">
            <summary>
            substraction operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.long2.op_Subtraction(Hybridizer.Runtime.CUDAImports.long2,System.Int32)">
            <summary>
            substraction operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.long2.op_Multiply(Hybridizer.Runtime.CUDAImports.long2,Hybridizer.Runtime.CUDAImports.long2)">
            <summary>
            multiplication operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.long2.op_Multiply(System.Int32,Hybridizer.Runtime.CUDAImports.long2)">
            <summary>
            multiplication operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.long2.op_Multiply(Hybridizer.Runtime.CUDAImports.long2,System.Int32)">
            <summary>
            multiplication operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.long2.op_Division(Hybridizer.Runtime.CUDAImports.long2,Hybridizer.Runtime.CUDAImports.long2)">
            <summary>
            division operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.long2.op_Division(System.Int32,Hybridizer.Runtime.CUDAImports.long2)">
            <summary>
            division operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.long2.op_Division(Hybridizer.Runtime.CUDAImports.long2,System.Int32)">
            <summary>
            division operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.long2.op_BitwiseAnd(Hybridizer.Runtime.CUDAImports.long2,Hybridizer.Runtime.CUDAImports.long2)">
            <summary>
            bitwise AND operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.long2.op_BitwiseAnd(System.Int32,Hybridizer.Runtime.CUDAImports.long2)">
            <summary>
            bitwise AND operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.long2.op_BitwiseAnd(Hybridizer.Runtime.CUDAImports.long2,System.Int32)">
            <summary>
            bitwise AND operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.long2.op_BitwiseOr(Hybridizer.Runtime.CUDAImports.long2,Hybridizer.Runtime.CUDAImports.long2)">
            <summary>
            bitwise OR operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.long2.op_BitwiseOr(System.Int64,Hybridizer.Runtime.CUDAImports.long2)">
            <summary>
            bitwise OR operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.long2.op_BitwiseOr(Hybridizer.Runtime.CUDAImports.long2,System.Int64)">
            <summary>
            bitwise OR operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.long2.op_ExclusiveOr(Hybridizer.Runtime.CUDAImports.long2,Hybridizer.Runtime.CUDAImports.long2)">
            <summary>
            bitwise XOR operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.long2.op_ExclusiveOr(System.Int32,Hybridizer.Runtime.CUDAImports.long2)">
            <summary>
            bitwise XOR operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.long2.op_ExclusiveOr(Hybridizer.Runtime.CUDAImports.long2,System.Int32)">
            <summary>
            bitwise XOR operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.long2.op_GreaterThanOrEqual(Hybridizer.Runtime.CUDAImports.long2,Hybridizer.Runtime.CUDAImports.long2)">
            <summary>
            greater or equal operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.long2.op_GreaterThan(Hybridizer.Runtime.CUDAImports.long2,Hybridizer.Runtime.CUDAImports.long2)">
            <summary>
            strict greater operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.long2.op_LessThanOrEqual(Hybridizer.Runtime.CUDAImports.long2,Hybridizer.Runtime.CUDAImports.long2)">
            <summary>
            less or equal operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.long2.op_LessThan(Hybridizer.Runtime.CUDAImports.long2,Hybridizer.Runtime.CUDAImports.long2)">
            <summary>
            strict less operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.long2.LeftShift(Hybridizer.Runtime.CUDAImports.long2,Hybridizer.Runtime.CUDAImports.long2)">
            <summary>
            left shift operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.long2.RightShift(Hybridizer.Runtime.CUDAImports.long2,Hybridizer.Runtime.CUDAImports.long2)">
            <summary>
            right shift operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.long2.Store(Hybridizer.Runtime.CUDAImports.long2*,Hybridizer.Runtime.CUDAImports.long2,System.Int32)">
            <summary>
            Stores in memory
            </summary>
            <param name="ptr"></param>
            <param name="val"></param>
            <param name="alignment">has to be a compile time constant</param>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.long2.Store(Hybridizer.Runtime.CUDAImports.long2*,System.Int32,System.Int32)">
            <summary>
            stores in memory
            </summary>
            <param name="ptr">destination pointer</param>
            <param name="val">value to store</param>
            <param name="alignment">has to be a compile time constant</param>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.long2.Load(Hybridizer.Runtime.CUDAImports.long2*,System.Int32)">
            <summary>
            loads from memory
            </summary>
            <param name="ptr"></param>
            <param name="alignment">has to be a compile time constant</param>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.long2.Select(Hybridizer.Runtime.CUDAImports.bool2,Hybridizer.Runtime.CUDAImports.long2,Hybridizer.Runtime.CUDAImports.long2)">
            <summary>
            selects components from l or r, depending on mask value
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.int4">
            <summary>
            4 integers, packed
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.int4.x">
            <summary>
            first component
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.int4.y">
            <summary>
            second component
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.int4.z">
            <summary>
            third component
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.int4.w">
            <summary>
            fourth component
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.int4.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            constructor from 4 distinc integers
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.int4.op_Addition(Hybridizer.Runtime.CUDAImports.int4,Hybridizer.Runtime.CUDAImports.int4)">
            <summary>
            addition operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.int4.op_Addition(System.Int32,Hybridizer.Runtime.CUDAImports.int4)">
            <summary>
            addition operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.int4.op_Addition(Hybridizer.Runtime.CUDAImports.int4,System.Int32)">
            <summary>
            addition operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.int4.op_Subtraction(Hybridizer.Runtime.CUDAImports.int4,Hybridizer.Runtime.CUDAImports.int4)">
            <summary>
            substraction operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.int4.op_Subtraction(System.Int32,Hybridizer.Runtime.CUDAImports.int4)">
            <summary>
            substraction operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.int4.op_Subtraction(Hybridizer.Runtime.CUDAImports.int4,System.Int32)">
            <summary>
            substraction operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.int4.op_Multiply(Hybridizer.Runtime.CUDAImports.int4,Hybridizer.Runtime.CUDAImports.int4)">
            <summary>
            multiplication operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.int4.op_Multiply(System.Int32,Hybridizer.Runtime.CUDAImports.int4)">
            <summary>
            multiplication operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.int4.op_Multiply(Hybridizer.Runtime.CUDAImports.int4,System.Int32)">
            <summary>
            multiplication operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.int4.op_Division(Hybridizer.Runtime.CUDAImports.int4,Hybridizer.Runtime.CUDAImports.int4)">
            <summary>
            division operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.int4.op_Division(System.Int32,Hybridizer.Runtime.CUDAImports.int4)">
            <summary>
            division operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.int4.op_Division(Hybridizer.Runtime.CUDAImports.int4,System.Int32)">
            <summary>
            division operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.int4.op_BitwiseAnd(Hybridizer.Runtime.CUDAImports.int4,Hybridizer.Runtime.CUDAImports.int4)">
            <summary>
            bitwise AND operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.int4.op_BitwiseAnd(System.Int32,Hybridizer.Runtime.CUDAImports.int4)">
            <summary>
            bitwise AND operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.int4.op_BitwiseAnd(Hybridizer.Runtime.CUDAImports.int4,System.Int32)">
            <summary>
            bitwise AND operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.int4.op_BitwiseOr(Hybridizer.Runtime.CUDAImports.int4,Hybridizer.Runtime.CUDAImports.int4)">
            <summary>
            bitwise OR operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.int4.op_BitwiseOr(System.Int32,Hybridizer.Runtime.CUDAImports.int4)">
            <summary>
            bitwise OR operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.int4.op_BitwiseOr(Hybridizer.Runtime.CUDAImports.int4,System.Int32)">
            <summary>
            bitwise OR operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.int4.op_ExclusiveOr(Hybridizer.Runtime.CUDAImports.int4,Hybridizer.Runtime.CUDAImports.int4)">
            <summary>
            bitwise XOR operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.int4.op_ExclusiveOr(System.Int32,Hybridizer.Runtime.CUDAImports.int4)">
            <summary>
            bitwise XOR operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.int4.op_ExclusiveOr(Hybridizer.Runtime.CUDAImports.int4,System.Int32)">
            <summary>
            bitwise XOR operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.int4.Store(Hybridizer.Runtime.CUDAImports.int4*,Hybridizer.Runtime.CUDAImports.int4,System.Int32)">
            <summary>
            stores in memory
            </summary>
            <param name="ptr">destination pointer</param>
            <param name="val">value to store</param>
            <param name="alignment">has to be a compile time constant</param>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.int8">
            <summary>
            8 32 bits integers
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.int8.x">
            <summary>
            x
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.int8.y">
            <summary>
            y
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.int8.z">
            <summary>
            z
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.int8.w">
            <summary>
            w
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.int8.x2">
            <summary>
            x2
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.int8.y2">
            <summary>
            y2
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.int8.z2">
            <summary>
            z2
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.int8.w2">
            <summary>
            w2
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.int8.#ctor(System.Int32)">
            <summary>
            constructor from single component
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.int8.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            constructor from components
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.int8.#ctor(Hybridizer.Runtime.CUDAImports.int8)">
            <summary>
            copy constructor
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.int8.op_Addition(Hybridizer.Runtime.CUDAImports.int8,Hybridizer.Runtime.CUDAImports.int8)">
            <summary>
            addition operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.int8.op_ExclusiveOr(Hybridizer.Runtime.CUDAImports.int8,Hybridizer.Runtime.CUDAImports.int8)">
            <summary>
            bitwise XOR operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.int8.op_ExclusiveOr(System.Int32,Hybridizer.Runtime.CUDAImports.int8)">
            <summary>
            bitwise XOR operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.int8.op_ExclusiveOr(Hybridizer.Runtime.CUDAImports.int8,System.Int32)">
            <summary>
            bitwise XOR operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.int8.op_Addition(System.Int32,Hybridizer.Runtime.CUDAImports.int8)">
            <summary>
            addition operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.int8.op_Addition(Hybridizer.Runtime.CUDAImports.int8,System.Int32)">
            <summary>
            addition operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.int8.op_Subtraction(Hybridizer.Runtime.CUDAImports.int8,Hybridizer.Runtime.CUDAImports.int8)">
            <summary>
            substraction operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.int8.op_Subtraction(System.Int32,Hybridizer.Runtime.CUDAImports.int8)">
            <summary>
            substraction operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.int8.op_Subtraction(Hybridizer.Runtime.CUDAImports.int8,System.Int32)">
            <summary>
            substraction operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.int8.op_Multiply(Hybridizer.Runtime.CUDAImports.int8,Hybridizer.Runtime.CUDAImports.int8)">
            <summary>
            multiplication operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.int8.op_Multiply(System.Int32,Hybridizer.Runtime.CUDAImports.int8)">
            <summary>
            multiplication operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.int8.op_Multiply(Hybridizer.Runtime.CUDAImports.int8,System.Int32)">
            <summary>
            multiplication operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.int8.op_Division(Hybridizer.Runtime.CUDAImports.int8,Hybridizer.Runtime.CUDAImports.int8)">
            <summary>
            division operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.int8.op_Division(System.Int32,Hybridizer.Runtime.CUDAImports.int8)">
            <summary>
            division operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.int8.op_Division(Hybridizer.Runtime.CUDAImports.int8,System.Int32)">
            <summary>
            division operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.int8.Store(Hybridizer.Runtime.CUDAImports.int8*,Hybridizer.Runtime.CUDAImports.int8,System.Int32)">
            <summary>
            stores in memory
            </summary>
            <param name="ptr">destination pointer</param>
            <param name="val">value to store</param>
            <param name="alignment">has to be a compile time constant</param>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.int8.Store(Hybridizer.Runtime.CUDAImports.int8*,System.Int32,System.Int32)">
            <summary>
            stores in memory
            </summary>
            <param name="ptr">destination pointer</param>
            <param name="val">value to store</param>
            <param name="alignment">has to be a compile time constant</param>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.int8.Load(Hybridizer.Runtime.CUDAImports.int8*,System.Int32)">
            <summary>
            loads from memory
            </summary>
            <param name="ptr"></param>
            <param name="alignment">has to be a compile time constant</param>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.char2">
            <summary>
            two signed bytes
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.char2.x">
            <summary>
            x
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.char2.y">
            <summary>
            y
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.char2.#ctor(System.Int32)">
            <summary>
            constructor from 32 bits integer
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.char2.#ctor(System.SByte,System.SByte)">
            <summary>
            constructor from components
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.char2.#ctor(System.SByte)">
            <summary>
            constructor from single component
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.char2.#ctor(Hybridizer.Runtime.CUDAImports.char2)">
            <summary>
            copy constructor
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.char2.op_Explicit(Hybridizer.Runtime.CUDAImports.char2)~System.Int16">
            <summary>
            conversion to short
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.char2.op_Addition(Hybridizer.Runtime.CUDAImports.char2,Hybridizer.Runtime.CUDAImports.char2)">
            <summary>
            addition operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.char2.op_Addition(System.SByte,Hybridizer.Runtime.CUDAImports.char2)">
            <summary>
            addition operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.char2.op_Addition(Hybridizer.Runtime.CUDAImports.char2,System.SByte)">
            <summary>
            addition operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.char2.op_Subtraction(Hybridizer.Runtime.CUDAImports.char2,Hybridizer.Runtime.CUDAImports.char2)">
            <summary>
            substraction operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.char2.op_Subtraction(System.SByte,Hybridizer.Runtime.CUDAImports.char2)">
            <summary>
            substraction operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.char2.op_Subtraction(Hybridizer.Runtime.CUDAImports.char2,System.SByte)">
            <summary>
            substraction operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.char2.op_Multiply(Hybridizer.Runtime.CUDAImports.char2,Hybridizer.Runtime.CUDAImports.char2)">
            <summary>
            multiplication operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.char2.op_Multiply(System.SByte,Hybridizer.Runtime.CUDAImports.char2)">
            <summary>
            multiplication operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.char2.op_Multiply(Hybridizer.Runtime.CUDAImports.char2,System.SByte)">
            <summary>
            multiplication operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.char2.op_Division(Hybridizer.Runtime.CUDAImports.char2,Hybridizer.Runtime.CUDAImports.char2)">
            <summary>
            division operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.char2.op_Division(System.SByte,Hybridizer.Runtime.CUDAImports.char2)">
            <summary>
            division operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.char2.op_Division(Hybridizer.Runtime.CUDAImports.char2,System.SByte)">
            <summary>
            division operator
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.char4">
            <summary>
            four signed bytes
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.char4.x">
            <summary>
            x
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.char4.y">
            <summary>
            y
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.char4.z">
            <summary>
            z
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.char4.w">
            <summary>
            w
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.char4.#ctor(System.SByte,System.SByte,System.SByte,System.SByte)">
            <summary>
            constructor from components
            </summary>
            <param name="xx"></param>
            <param name="yy"></param>
            <param name="zz"></param>
            <param name="ww"></param>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.char4.#ctor(System.Int32)">
            <summary>
             constructor from signed 32 bits integer
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.char4.#ctor(System.SByte)">
            <summary>
            constructor from single component
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.char4.#ctor(Hybridizer.Runtime.CUDAImports.char4)">
            <summary>
             copy constructor
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.char4.op_Addition(Hybridizer.Runtime.CUDAImports.char4,Hybridizer.Runtime.CUDAImports.char4)">
            <summary>
            addition operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.char4.op_Addition(System.SByte,Hybridizer.Runtime.CUDAImports.char4)">
            <summary>
            addition operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.char4.op_Addition(Hybridizer.Runtime.CUDAImports.char4,System.SByte)">
            <summary>
            addition operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.char4.op_Subtraction(Hybridizer.Runtime.CUDAImports.char4,Hybridizer.Runtime.CUDAImports.char4)">
            <summary>
            substraction operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.char4.op_Subtraction(System.SByte,Hybridizer.Runtime.CUDAImports.char4)">
            <summary>
            substraction operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.char4.op_Subtraction(Hybridizer.Runtime.CUDAImports.char4,System.SByte)">
            <summary>
            substraction operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.char4.op_Multiply(Hybridizer.Runtime.CUDAImports.char4,Hybridizer.Runtime.CUDAImports.char4)">
            <summary>
            multiplication operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.char4.op_Multiply(System.SByte,Hybridizer.Runtime.CUDAImports.char4)">
            <summary>
            multiplication operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.char4.op_Multiply(Hybridizer.Runtime.CUDAImports.char4,System.SByte)">
            <summary>
            multiplication operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.char4.op_Division(Hybridizer.Runtime.CUDAImports.char4,Hybridizer.Runtime.CUDAImports.char4)">
            <summary>
            division operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.char4.op_Division(System.SByte,Hybridizer.Runtime.CUDAImports.char4)">
            <summary>
            division operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.char4.op_Division(Hybridizer.Runtime.CUDAImports.char4,System.SByte)">
            <summary>
            division operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.char4.Store(Hybridizer.Runtime.CUDAImports.char4*,Hybridizer.Runtime.CUDAImports.char4,System.Int32)">
            <summary>
            stores in memory
            </summary>
            <param name="ptr">destination pointer</param>
            <param name="val">value to store</param>
            <param name="alignment">has to be a compile time constant</param>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.char4.Store(Hybridizer.Runtime.CUDAImports.char4*,System.SByte,System.Int32)">
            <summary>
            stores in memory
            </summary>
            <param name="ptr">destination pointer</param>
            <param name="val">value to store</param>
            <param name="alignment">has to be a compile time constant</param>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.char4.Load(Hybridizer.Runtime.CUDAImports.char4*,System.Int32)">
            <summary>
            loads from memory
            </summary>
            <param name="ptr"></param>
            <param name="alignment">has to be a compile time constant</param>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.uchar4">
            <summary>
            four unsigned signed bytes
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.uchar4.x">
            <summary>
            x
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.uchar4.y">
            <summary>
            y
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.uchar4.z">
            <summary>
            z
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.uchar4.w">
            <summary>
            w
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.uchar4.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            constructor from components
            </summary>
            <param name="xx"></param>
            <param name="yy"></param>
            <param name="zz"></param>
            <param name="ww"></param>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.uchar4.#ctor(System.Int32)">
            <summary>
             constructor from signed 32 bits integer
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.uchar4.#ctor(System.Byte)">
            <summary>
            constructor from single component
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.uchar4.#ctor(Hybridizer.Runtime.CUDAImports.uchar4)">
            <summary>
             copy constructor
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.uchar4.op_Addition(Hybridizer.Runtime.CUDAImports.uchar4,Hybridizer.Runtime.CUDAImports.uchar4)">
            <summary>
            addition operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.uchar4.op_Addition(System.Byte,Hybridizer.Runtime.CUDAImports.uchar4)">
            <summary>
            addition operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.uchar4.op_Addition(Hybridizer.Runtime.CUDAImports.uchar4,System.SByte)">
            <summary>
            addition operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.uchar4.op_Subtraction(Hybridizer.Runtime.CUDAImports.uchar4,Hybridizer.Runtime.CUDAImports.uchar4)">
            <summary>
            substraction operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.uchar4.op_Subtraction(System.Byte,Hybridizer.Runtime.CUDAImports.uchar4)">
            <summary>
            substraction operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.uchar4.op_Subtraction(Hybridizer.Runtime.CUDAImports.uchar4,System.Byte)">
            <summary>
            substraction operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.uchar4.op_Multiply(Hybridizer.Runtime.CUDAImports.uchar4,Hybridizer.Runtime.CUDAImports.uchar4)">
            <summary>
            multiplication operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.uchar4.op_Multiply(System.Byte,Hybridizer.Runtime.CUDAImports.uchar4)">
            <summary>
            multiplication operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.uchar4.op_Multiply(Hybridizer.Runtime.CUDAImports.uchar4,System.Byte)">
            <summary>
            multiplication operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.uchar4.op_Division(Hybridizer.Runtime.CUDAImports.uchar4,Hybridizer.Runtime.CUDAImports.uchar4)">
            <summary>
            division operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.uchar4.op_Division(System.Byte,Hybridizer.Runtime.CUDAImports.uchar4)">
            <summary>
            division operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.uchar4.op_Division(Hybridizer.Runtime.CUDAImports.uchar4,System.Byte)">
            <summary>
            division operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.uchar4.Store(Hybridizer.Runtime.CUDAImports.uchar4*,Hybridizer.Runtime.CUDAImports.uchar4,System.Int32)">
            <summary>
            stores in memory
            </summary>
            <param name="ptr">destination pointer</param>
            <param name="val">value to store</param>
            <param name="alignment">has to be a compile time constant</param>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.uchar4.Store(Hybridizer.Runtime.CUDAImports.uchar4*,System.Byte,System.Int32)">
            <summary>
            stores in memory
            </summary>
            <param name="ptr">destination pointer</param>
            <param name="val">value to store</param>
            <param name="alignment">has to be a compile time constant</param>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.uchar4.Load(Hybridizer.Runtime.CUDAImports.uchar4*,System.Int32)">
            <summary>
            loads from memory
            </summary>
            <param name="ptr"></param>
            <param name="alignment">has to be a compile time constant</param>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.char8">
            <summary>
            8 signed bytes
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.char8.x">
            <summary>
            x
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.char8.y">
            <summary>
            y
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.char8.z">
            <summary>
            z
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.char8.w">
            <summary>
            w
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.char8.x2">
            <summary>
            x2
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.char8.y2">
            <summary>
            y2
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.char8.z2">
            <summary>
            z2
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.char8.w2">
            <summary>
            w2
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.char8.#ctor(System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte)">
            <summary>
            constructor from components
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.char8.#ctor(System.SByte)">
            <summary>
            constructor from single component
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.char8.#ctor(Hybridizer.Runtime.CUDAImports.char8)">
            <summary>
            copy constructor
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.char8.op_Addition(Hybridizer.Runtime.CUDAImports.char8,Hybridizer.Runtime.CUDAImports.char8)">
            <summary>
            addition operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.char8.op_Addition(System.SByte,Hybridizer.Runtime.CUDAImports.char8)">
            <summary>
            addition operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.char8.op_Addition(Hybridizer.Runtime.CUDAImports.char8,System.SByte)">
            <summary>
            addition operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.char8.op_Subtraction(Hybridizer.Runtime.CUDAImports.char8,Hybridizer.Runtime.CUDAImports.char8)">
            <summary>
            substraction operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.char8.op_Subtraction(System.SByte,Hybridizer.Runtime.CUDAImports.char8)">
            <summary>
            substraction operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.char8.op_Subtraction(Hybridizer.Runtime.CUDAImports.char8,System.SByte)">
            <summary>
            substraction operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.char8.op_Multiply(Hybridizer.Runtime.CUDAImports.char8,Hybridizer.Runtime.CUDAImports.char8)">
            <summary>
            multiplication operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.char8.op_Multiply(System.SByte,Hybridizer.Runtime.CUDAImports.char8)">
            <summary>
            multiplication operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.char8.op_Multiply(Hybridizer.Runtime.CUDAImports.char8,System.SByte)">
            <summary>
            multiplication operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.char8.op_Division(Hybridizer.Runtime.CUDAImports.char8,Hybridizer.Runtime.CUDAImports.char8)">
            <summary>
            division operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.char8.op_Division(System.SByte,Hybridizer.Runtime.CUDAImports.char8)">
            <summary>
            division operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.char8.op_Division(Hybridizer.Runtime.CUDAImports.char8,System.SByte)">
            <summary>
            division operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.char8.Store(Hybridizer.Runtime.CUDAImports.char8*,Hybridizer.Runtime.CUDAImports.char8,System.Int32)">
            <summary>
            stores in memory
            </summary>
            <param name="ptr">destination pointer</param>
            <param name="val">value to store</param>
            <param name="alignment">has to be a compile time constant</param>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.char8.Store(Hybridizer.Runtime.CUDAImports.char8*,System.SByte,System.Int32)">
            <summary>
            stores in memory
            </summary>
            <param name="ptr">destination pointer</param>
            <param name="val">value to store</param>
            <param name="alignment">has to be a compile time constant</param>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.char8.Load(Hybridizer.Runtime.CUDAImports.char8*,System.Int32)">
            <summary>
            loads from memory
            </summary>
            <param name="ptr"></param>
            <param name="alignment">has to be a compile time constant</param>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.short2">
            <summary>
            2 26 bits integers
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.short2.x">
            <summary>
            x
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.short2.y">
            <summary>
            y
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.short2.#ctor(System.Int32)">
            <summary>
            constructor from 32 bits integer
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.short2.#ctor(System.Int16,System.Int16)">
            <summary>
            constructor from components
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.short2.#ctor(System.Int16)">
            <summary>
            constructor from single component
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.short2.#ctor(Hybridizer.Runtime.CUDAImports.short2)">
            <summary>
            copy constructor
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.short2.op_Explicit(Hybridizer.Runtime.CUDAImports.short2)~System.Int32">
            <summary>
            conversion to 32 bits integer
            </summary>
            <param name="res"></param>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.short2.op_Addition(Hybridizer.Runtime.CUDAImports.short2,Hybridizer.Runtime.CUDAImports.short2)">
            <summary>
            addition operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.short2.op_Addition(System.Int16,Hybridizer.Runtime.CUDAImports.short2)">
            <summary>
            addition operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.short2.op_Addition(Hybridizer.Runtime.CUDAImports.short2,System.Int16)">
            <summary>
            addition operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.short2.op_Subtraction(Hybridizer.Runtime.CUDAImports.short2,Hybridizer.Runtime.CUDAImports.short2)">
            <summary>
            substraction operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.short2.op_Subtraction(System.Int16,Hybridizer.Runtime.CUDAImports.short2)">
            <summary>
            substraction operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.short2.op_Subtraction(Hybridizer.Runtime.CUDAImports.short2,System.Int16)">
            <summary>
            substraction operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.short2.op_Multiply(Hybridizer.Runtime.CUDAImports.short2,Hybridizer.Runtime.CUDAImports.short2)">
            <summary>
            multiplication operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.short2.op_Multiply(System.Int16,Hybridizer.Runtime.CUDAImports.short2)">
            <summary>
            multiplication operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.short2.op_Multiply(Hybridizer.Runtime.CUDAImports.short2,System.Int16)">
            <summary>
            multiplication operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.short2.op_Division(Hybridizer.Runtime.CUDAImports.short2,Hybridizer.Runtime.CUDAImports.short2)">
            <summary>
            division operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.short2.op_Division(System.Int16,Hybridizer.Runtime.CUDAImports.short2)">
            <summary>
            division operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.short2.op_Division(Hybridizer.Runtime.CUDAImports.short2,System.Int16)">
            <summary>
            division operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.short2.Store(Hybridizer.Runtime.CUDAImports.short2*,Hybridizer.Runtime.CUDAImports.short2,System.Int32)">
            <summary>
            stores in memory
            </summary>
            <param name="ptr">destination pointer</param>
            <param name="val">value to store</param>
            <param name="alignment">has to be a compile time constant</param>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.short2.Store(Hybridizer.Runtime.CUDAImports.short2*,System.SByte,System.Int32)">
            <summary>
            stores in memory
            </summary>
            <param name="ptr">destination pointer</param>
            <param name="val">value to store</param>
            <param name="alignment">has to be a compile time constant</param>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.short2.Load(Hybridizer.Runtime.CUDAImports.short2*,System.Int32)">
            <summary>
            loads from memory
            </summary>
            <param name="ptr"></param>
            <param name="alignment">has to be a compile time constant</param>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.short4">
            <summary>
            4 16 bits integers
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.short4.x">
            <summary>
            x
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.short4.y">
            <summary>
            y
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.short4.z">
            <summary>
            z
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.short4.w">
            <summary>
            w
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.short4.#ctor(System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            constructor from components
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.short4.#ctor(System.Int16)">
            <summary>
            constructor from single component
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.short4.#ctor(Hybridizer.Runtime.CUDAImports.short4)">
            <summary>
            copy constructor
            </summary>
            <param name="res"></param>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.short4.op_Addition(Hybridizer.Runtime.CUDAImports.short4,Hybridizer.Runtime.CUDAImports.short4)">
            <summary>
            addition operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.short4.op_Addition(System.Int16,Hybridizer.Runtime.CUDAImports.short4)">
            <summary>
            addition operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.short4.op_Addition(Hybridizer.Runtime.CUDAImports.short4,System.Int16)">
            <summary>
            addition operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.short4.op_Subtraction(Hybridizer.Runtime.CUDAImports.short4,Hybridizer.Runtime.CUDAImports.short4)">
            <summary>
            substraction operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.short4.op_Subtraction(System.Int16,Hybridizer.Runtime.CUDAImports.short4)">
            <summary>
            substraction operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.short4.op_Subtraction(Hybridizer.Runtime.CUDAImports.short4,System.Int16)">
            <summary>
            substraction operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.short4.op_Multiply(Hybridizer.Runtime.CUDAImports.short4,Hybridizer.Runtime.CUDAImports.short4)">
            <summary>
            multiplication operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.short4.op_Multiply(System.Int16,Hybridizer.Runtime.CUDAImports.short4)">
            <summary>
            multiplication operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.short4.op_Multiply(Hybridizer.Runtime.CUDAImports.short4,System.Int16)">
            <summary>
            multiplication operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.short4.op_Division(Hybridizer.Runtime.CUDAImports.short4,Hybridizer.Runtime.CUDAImports.short4)">
            <summary>
            division operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.short4.op_Division(System.Int16,Hybridizer.Runtime.CUDAImports.short4)">
            <summary>
            division operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.short4.op_Division(Hybridizer.Runtime.CUDAImports.short4,System.Int16)">
            <summary>
            division operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.short4.Load(Hybridizer.Runtime.CUDAImports.short4*,System.Int32)">
            <summary>
            loads from memory
            </summary>
            <param name="ptr"></param>
            <param name="alignment">has to be a compile time constant</param>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.short4.Store(Hybridizer.Runtime.CUDAImports.short4*,Hybridizer.Runtime.CUDAImports.short4,System.Int32)">
            <summary>
            stores in memory
            </summary>
            <param name="ptr">destination pointer</param>
            <param name="val">value to store</param>
            <param name="alignment">has to be a compile time constant</param>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.short8">
            <summary>
            8 16 bits integers
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.short8.x">
            <summary>
            x
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.short8.y">
            <summary>
            y
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.short8.z">
            <summary>
            z
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.short8.w">
            <summary>
            w
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.short8.x2">
            <summary>
            x2
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.short8.y2">
            <summary>
            y2
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.short8.z2">
            <summary>
            z2
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.short8.w2">
            <summary>
            w2
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.short8.#ctor(System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            constructor from components
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.short8.#ctor(System.Int16)">
            <summary>
            constructor from single component
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.short8.#ctor(Hybridizer.Runtime.CUDAImports.short8)">
            <summary>
            copy constructor
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.short8.op_Addition(Hybridizer.Runtime.CUDAImports.short8,Hybridizer.Runtime.CUDAImports.short8)">
            <summary>
            addition operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.short8.op_Addition(System.Int16,Hybridizer.Runtime.CUDAImports.short8)">
            <summary>
            addition operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.short8.op_Addition(Hybridizer.Runtime.CUDAImports.short8,System.Int16)">
            <summary>
            addition operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.short8.op_Subtraction(Hybridizer.Runtime.CUDAImports.short8,Hybridizer.Runtime.CUDAImports.short8)">
            <summary>
            substraction operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.short8.op_Subtraction(System.Int16,Hybridizer.Runtime.CUDAImports.short8)">
            <summary>
            substraction operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.short8.op_Subtraction(Hybridizer.Runtime.CUDAImports.short8,System.Int16)">
            <summary>
            substraction operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.short8.op_Multiply(Hybridizer.Runtime.CUDAImports.short8,Hybridizer.Runtime.CUDAImports.short8)">
            <summary>
            multiplication operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.short8.op_Multiply(System.Int16,Hybridizer.Runtime.CUDAImports.short8)">
            <summary>
            multiplication operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.short8.op_Multiply(Hybridizer.Runtime.CUDAImports.short8,System.Int16)">
            <summary>
            multiplication operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.short8.op_Division(Hybridizer.Runtime.CUDAImports.short8,Hybridizer.Runtime.CUDAImports.short8)">
            <summary>
            division operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.short8.op_Division(System.Int16,Hybridizer.Runtime.CUDAImports.short8)">
            <summary>
            division operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.short8.op_Division(Hybridizer.Runtime.CUDAImports.short8,System.Int16)">
            <summary>
            division operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.short8.op_BitwiseAnd(Hybridizer.Runtime.CUDAImports.short8,Hybridizer.Runtime.CUDAImports.short8)">
            <summary>
            bitwise AND operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.short8.op_BitwiseAnd(System.Int16,Hybridizer.Runtime.CUDAImports.short8)">
            <summary>
            bitwise AND operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.short8.op_BitwiseAnd(Hybridizer.Runtime.CUDAImports.short8,System.Int16)">
            <summary>
            bitwise AND operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.short8.op_BitwiseOr(Hybridizer.Runtime.CUDAImports.short8,Hybridizer.Runtime.CUDAImports.short8)">
            <summary>
            bitwise OR operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.short8.op_BitwiseOr(System.Int16,Hybridizer.Runtime.CUDAImports.short8)">
            <summary>
            bitwise OR operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.short8.op_BitwiseOr(Hybridizer.Runtime.CUDAImports.short8,System.Int16)">
            <summary>
            bitwise OR operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.short8.op_ExclusiveOr(Hybridizer.Runtime.CUDAImports.short8,Hybridizer.Runtime.CUDAImports.short8)">
            <summary>
            bitwise XOR operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.short8.op_ExclusiveOr(System.Int16,Hybridizer.Runtime.CUDAImports.short8)">
            <summary>
            bitwise XOR operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.short8.op_ExclusiveOr(Hybridizer.Runtime.CUDAImports.short8,System.Int16)">
            <summary>
            bitwise XOR operator
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.short8.Load(Hybridizer.Runtime.CUDAImports.short8*,System.Int32)">
            <summary>
            loads from memory
            </summary>
            <param name="ptr"></param>
            <param name="alignment">has to be a compile time constant</param>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.short8.Store(Hybridizer.Runtime.CUDAImports.short8*,Hybridizer.Runtime.CUDAImports.short8,System.Int32)">
            <summary>
            stores in memory
            </summary>
            <param name="ptr">destination pointer</param>
            <param name="val">value to store</param>
            <param name="alignment">has to be a compile time constant</param>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.LLVMVectorIntrinsics">
            <summary>
            
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.LLVMVectorIntrinsics.InsertElement(Hybridizer.Runtime.CUDAImports.int8,System.Int32,System.Int32)">
            <summary>
            The ‘insertelement‘ instruction inserts a scalar element into a vector at a specified index.
            Documentation <see href="https://llvm.org/docs/LangRef.html#insertelement-instruction">here</see>
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.LLVMVectorIntrinsics.InsertElement(Hybridizer.Runtime.CUDAImports.float8,System.Single,System.Int32)">
            <summary>
            The ‘insertelement‘ instruction inserts a scalar element into a vector at a specified index.
            Documentation <see href="https://llvm.org/docs/LangRef.html#insertelement-instruction">here</see>
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.LLVMVectorIntrinsics.InsertElement(Hybridizer.Runtime.CUDAImports.float4,System.Single,System.Int32)">
            <summary>
            The ‘insertelement‘ instruction inserts a scalar element into a vector at a specified index.
            Documentation <see href="https://llvm.org/docs/LangRef.html#insertelement-instruction">here</see>
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.LLVMVectorIntrinsics.InsertElement(Hybridizer.Runtime.CUDAImports.double2,System.Double,System.Int32)">
            <summary>
            The ‘insertelement‘ instruction inserts a scalar element into a vector at a specified index.
            Documentation <see href="https://llvm.org/docs/LangRef.html#insertelement-instruction">here</see>
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.LLVMVectorIntrinsics.InsertElement(Hybridizer.Runtime.CUDAImports.long2,System.Int64,System.Int32)">
            <summary>
            The ‘insertelement‘ instruction inserts a scalar element into a vector at a specified index.
            Documentation <see href="https://llvm.org/docs/LangRef.html#insertelement-instruction">here</see>
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.LLVMVectorIntrinsics.ExtractElement(Hybridizer.Runtime.CUDAImports.int8,System.Int32)">
            <summary>
            The ‘extractelement‘ instruction extracts a single scalar element from a vector at a specified index.
            Documentation <see href="https://llvm.org/docs/LangRef.html#extractelement-instruction">here</see>
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.LLVMVectorIntrinsics.ExtractElement(Hybridizer.Runtime.CUDAImports.float8,System.Int32)">
            <summary>
            The ‘extractelement‘ instruction extracts a single scalar element from a vector at a specified index.
            Documentation <see href="https://llvm.org/docs/LangRef.html#extractelement-instruction">here</see>
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.LLVMVectorIntrinsics.ExtractElement(Hybridizer.Runtime.CUDAImports.float4,System.Int32)">
            <summary>
            The ‘extractelement‘ instruction extracts a single scalar element from a vector at a specified index.
            Documentation <see href="https://llvm.org/docs/LangRef.html#extractelement-instruction">here</see>
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.LLVMVectorIntrinsics.ExtractElement(Hybridizer.Runtime.CUDAImports.double2,System.Int32)">
            <summary>
            The ‘extractelement‘ instruction extracts a single scalar element from a vector at a specified index.
            Documentation <see href="https://llvm.org/docs/LangRef.html#extractelement-instruction">here</see>
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.LLVMVectorIntrinsics.ExtractElement(Hybridizer.Runtime.CUDAImports.long2,System.Int32)">
            <summary>
            The ‘extractelement‘ instruction extracts a single scalar element from a vector at a specified index.
            Documentation <see href="https://llvm.org/docs/LangRef.html#extractelement-instruction">here</see>
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.LLVMVectorIntrinsics.ShuffleVector(Hybridizer.Runtime.CUDAImports.int8,Hybridizer.Runtime.CUDAImports.int8,Hybridizer.Runtime.CUDAImports.int8)">
            <summary>
            The ‘shufflevector‘ instruction constructs a permutation of elements from two input vectors, returning a vector with the same element type as the input and length that is the same as the shuffle mask.
            Documentation <see href="https://llvm.org/docs/LangRef.html#shufflevector-instruction">here</see>
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.LLVMVectorIntrinsics.ShuffleVector(Hybridizer.Runtime.CUDAImports.float8,Hybridizer.Runtime.CUDAImports.float8,Hybridizer.Runtime.CUDAImports.int8)">
            <summary>
            The ‘shufflevector‘ instruction constructs a permutation of elements from two input vectors, returning a vector with the same element type as the input and length that is the same as the shuffle mask.
            Documentation <see href="https://llvm.org/docs/LangRef.html#shufflevector-instruction">here</see>
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.LLVMVectorIntrinsics.ShuffleVector(Hybridizer.Runtime.CUDAImports.long2,Hybridizer.Runtime.CUDAImports.long2,Hybridizer.Runtime.CUDAImports.int2)">
            <summary>
            The ‘shufflevector‘ instruction constructs a permutation of elements from two input vectors, returning a vector with the same element type as the input and length that is the same as the shuffle mask.
            Documentation <see href="https://llvm.org/docs/LangRef.html#shufflevector-instruction">here</see>
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.LLVMVectorIntrinsics.ShuffleVector(Hybridizer.Runtime.CUDAImports.double2,Hybridizer.Runtime.CUDAImports.double2,Hybridizer.Runtime.CUDAImports.int2)">
            <summary>
            The ‘shufflevector‘ instruction constructs a permutation of elements from two input vectors, returning a vector with the same element type as the input and length that is the same as the shuffle mask.
            Documentation <see href="https://llvm.org/docs/LangRef.html#shufflevector-instruction">here</see>
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cufftHandle">
            <summary>
            Inner structure to carry handle.
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cufftResult">
            <summary>
            
            <see href="http://docs.nvidia.com/cuda/cufft/index.html#cufftresult">online</see>
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cufftResult.CUFFT_SUCCESS">
            <summary>
            The CUFFT operation was successful
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cufftResult.CUFFT_INVALID_PLAN">
            <summary>
            CUFFT was passed an invalid plan handle
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cufftResult.CUFFT_ALLOC_FAILED">
            <summary>
             CUFFT failed to allocate GPU or CPU memory
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cufftResult.CUFFT_INVALID_TYPE">
            <summary>
             No longer used 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cufftResult.CUFFT_INVALID_VALUE">
            <summary>
             User specified an invalid pointer or parameter 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cufftResult.CUFFT_INTERNAL_ERROR">
            <summary>
             Driver or internal CUFFT library error
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cufftResult.CUFFT_EXEC_FAILED">
            <summary>
             Failed to execute an FFT on the GPU 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cufftResult.CUFFT_SETUP_FAILED">
            <summary>
             The CUFFT library failed to initialize
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cufftResult.CUFFT_INVALID_SIZE">
            <summary>
             User specified an invalid transform size
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cufftResult.CUFFT_UNALIGNED_DATA">
            <summary>
             No longer used
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cufftType">
            <summary>
            <see href="http://docs.nvidia.com/cuda/cufft/index.html#cufft-transform-types">online</see>
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cufftType.CUFFT_R2C">
            <summary>
            Real to complex (interleaved) 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cufftType.CUFFT_C2R">
            <summary>
            Complex (interleaved) to real 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cufftType.CUFFT_C2C">
            <summary>
            Complex to complex (interleaved) 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cufftType.CUFFT_D2Z">
            <summary>
            Double to double-complex (interleaved) 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cufftType.CUFFT_Z2D">
            <summary>
            Double-complex (interleaved) to double 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cufftType.CUFFT_Z2Z">
            <summary>
            Double-complex to double-complex (interleaved)
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cufftCompatibility">
            <summary>
            <see href="http://docs.nvidia.com/cuda/cufft/index.html#cufftcompatibility">online</see>
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cufftCompatibility.CUFFT_COMPATIBILITY_NATIVE">
            <summary>
            Compact data in native format (highest performance)
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cufftCompatibility.CUFFT_COMPATIBILITY_FFTW_PADDING">
            <summary>
            FFTW-compatible alignment (the default value)
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cufftCompatibility.CUFFT_COMPATIBILITY_FFTW_ASYMMETRIC">
            <summary>
            Waives the C2R symmetry requirement input 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.cufftCompatibility.CUFFT_COMPATIBILITY_FFTW_ALL">
            <summary>
            ALL
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.cufft">
            <summary>
            cufft wrapper
            Complete documentation <see href="https://docs.nvidia.com/cuda/cufft/index.html">here</see>
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cufft.PlanMany(Hybridizer.Runtime.CUDAImports.cufftHandle@,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32,Hybridizer.Runtime.CUDAImports.cufftType,System.Int32)">
            <summary>
            
            <see href="http://docs.nvidia.com/cuda/cufft/index.html#function-cufftplanmany">online</see>
            </summary>
            <param name="plan"></param>
            <param name="rank"></param>
            <param name="n"></param>
            <param name="inembed"></param>
            <param name="istride"></param>
            <param name="idist"></param>
            <param name="onembed"></param>
            <param name="ostride"></param>
            <param name="odist"></param>
            <param name="type"></param>
            <param name="batch"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cufft.PlanMany(Hybridizer.Runtime.CUDAImports.cufftHandle@,System.Int32,System.Int32[],System.Int32[],System.Int32,System.Int32,System.Int32[],System.Int32,System.Int32,Hybridizer.Runtime.CUDAImports.cufftType,System.Int32)">
            <summary>
            <see href="http://docs.nvidia.com/cuda/cufft/index.html#function-cufftplanmany">online</see>
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cufft.Plan1d(Hybridizer.Runtime.CUDAImports.cufftHandle@,System.Int32,Hybridizer.Runtime.CUDAImports.cufftType,System.Int32)">
            <summary>
            <see href="https://docs.nvidia.com/cuda/cufft/index.html#function-cufftplan1d">online</see>
            </summary>
            <param name="plan"></param>
            <param name="nx"></param>
            <param name="type"></param>
            <param name="batch"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cufft.Plan2d(Hybridizer.Runtime.CUDAImports.cufftHandle@,System.Int32,System.Int32,Hybridizer.Runtime.CUDAImports.cufftType)">
            <summary>
            
            <see href="https://docs.nvidia.com/cuda/cufft/index.html#function-cufftplan2d">online</see>
            </summary>
            <param name="plan"></param>
            <param name="nx"></param>
            <param name="ny"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cufft.Plan3d(Hybridizer.Runtime.CUDAImports.cufftHandle@,System.Int32,System.Int32,System.Int32,Hybridizer.Runtime.CUDAImports.cufftType)">
            <summary>
            
            <see href="https://docs.nvidia.com/cuda/cufft/index.html#function-cufftplan3d">online</see>
            </summary>
            <param name="plan"></param>
            <param name="nx"></param>
            <param name="ny"></param>
            <param name="nz"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cufft.Destroy(Hybridizer.Runtime.CUDAImports.cufftHandle)">
            <summary>
            
            <see href="">onlone</see>
            </summary>
            <param name="plan"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cufft.ExecC2C(Hybridizer.Runtime.CUDAImports.cufftHandle,System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            <see href="http://docs.nvidia.com/cuda/cufft/index.html">online</see>
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cufft.ExecZ2Z(Hybridizer.Runtime.CUDAImports.cufftHandle,System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            <see href="http://docs.nvidia.com/cuda/cufft/index.html">online</see>
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cufft.ExecR2C(Hybridizer.Runtime.CUDAImports.cufftHandle,System.IntPtr,System.IntPtr)">
            <summary>
            <see href="http://docs.nvidia.com/cuda/cufft/index.html">online</see>
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cufft.ExecD2Z(Hybridizer.Runtime.CUDAImports.cufftHandle,System.IntPtr,System.IntPtr)">
            <summary>
            <see href="http://docs.nvidia.com/cuda/cufft/index.html">online</see>
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cufft.ExecC2R(Hybridizer.Runtime.CUDAImports.cufftHandle,System.IntPtr,System.IntPtr)">
            <summary>
            <see href="http://docs.nvidia.com/cuda/cufft/index.html">online</see>
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cufft.ExecZ2D(Hybridizer.Runtime.CUDAImports.cufftHandle,System.IntPtr,System.IntPtr)">
            <summary>
            <see href="http://docs.nvidia.com/cuda/cufft/index.html">online</see>
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cufft.SetStream(Hybridizer.Runtime.CUDAImports.cufftHandle,Hybridizer.Runtime.CUDAImports.cudaStream_t)">
            <summary>
            <see href="http://docs.nvidia.com/cuda/cufft/index.html">online</see>
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cufft.SetCompatibilityMode(Hybridizer.Runtime.CUDAImports.cufftHandle,Hybridizer.Runtime.CUDAImports.cufftCompatibility)">
            <summary>
            <see href="http://docs.nvidia.com/cuda/cufft/index.html">online</see>
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cufft.ExecR2C``2(Hybridizer.Runtime.CUDAImports.cufftHandle,``0[],``1[])">
            <summary>
            float type
            </summary>
            <typeparam name="R"></typeparam>
            <typeparam name="C"></typeparam>
            <param name="plan"></param>
            <param name="idata"></param>
            <param name="odata"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cufft.ExecD2Z``2(Hybridizer.Runtime.CUDAImports.cufftHandle,``0[],``1[])">
            <summary>
            double type
            </summary>
            <typeparam name="D"></typeparam>
            <typeparam name="Z"></typeparam>
            <param name="plan"></param>
            <param name="idata"></param>
            <param name="odata"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cufft.ExecC2C``1(Hybridizer.Runtime.CUDAImports.cufftHandle,``0[],``0[],System.Int32)">
            <summary>
            <see href="http://docs.nvidia.com/cuda/cufft/index.html">online</see>
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cufft.ExecZ2Z``1(Hybridizer.Runtime.CUDAImports.cufftHandle,``0[],``0[],System.Int32)">
            <summary>
            <see href="http://docs.nvidia.com/cuda/cufft/index.html">online</see>
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cufft.ExecC2R``2(Hybridizer.Runtime.CUDAImports.cufftHandle,``1[],``0[])">
            <summary>
            float type
            </summary>
            <typeparam name="R"></typeparam>
            <typeparam name="C"></typeparam>
            <param name="plan"></param>
            <param name="idata"></param>
            <param name="odata"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cufft.ExecZ2D``2(Hybridizer.Runtime.CUDAImports.cufftHandle,``1[],``0[])">
            <summary>
            double type
            </summary>
            <typeparam name="D"></typeparam>
            <typeparam name="Z"></typeparam>
            <param name="plan"></param>
            <param name="idata"></param>
            <param name="odata"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cufft.ExecR2C(Hybridizer.Runtime.CUDAImports.cufftHandle,System.Single[],Hybridizer.Runtime.CUDAImports.float2[])">
            <summary>
            <see href="http://docs.nvidia.com/cuda/cufft/index.html">online</see>
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cufft.ExecD2Z(Hybridizer.Runtime.CUDAImports.cufftHandle,System.Double[],Hybridizer.Runtime.CUDAImports.double2[])">
            <summary>
            <see href="http://docs.nvidia.com/cuda/cufft/index.html">online</see>
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cufft.ExecC2C(Hybridizer.Runtime.CUDAImports.cufftHandle,Hybridizer.Runtime.CUDAImports.float2[],Hybridizer.Runtime.CUDAImports.float2[],System.Int32)">
            <summary>
            <see href="http://docs.nvidia.com/cuda/cufft/index.html">online</see>
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cufft.ExecZ2Z(Hybridizer.Runtime.CUDAImports.cufftHandle,Hybridizer.Runtime.CUDAImports.double2[],Hybridizer.Runtime.CUDAImports.double2[],System.Int32)">
            <summary>
            <see href="http://docs.nvidia.com/cuda/cufft/index.html">online</see>
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cufft.ExecC2R(Hybridizer.Runtime.CUDAImports.cufftHandle,Hybridizer.Runtime.CUDAImports.float2[],System.Single[])">
            <summary>
            <see href="http://docs.nvidia.com/cuda/cufft/index.html">online</see>
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cufft.ExecZ2D(Hybridizer.Runtime.CUDAImports.cufftHandle,Hybridizer.Runtime.CUDAImports.double2[],System.Double[])">
            <summary>
            <see href="http://docs.nvidia.com/cuda/cufft/index.html">online</see>
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cufft.Create(Hybridizer.Runtime.CUDAImports.cufftHandle@)">
            <summary>
            Creates only an opaque handle, and allocates small data structures on the host
            <see href="https://docs.nvidia.com/cuda/archive/9.2/cufft/index.html#function-cufftcreate">online</see> 
            </summary>
            <param name="plan">Pointer to a cufftHandle object </param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cufft.Estimate1d(System.Int32,Hybridizer.Runtime.CUDAImports.cufftType,System.Int32,Hybridizer.Runtime.CUDAImports.size_t@)">
            <summary>
            During plan execution, cuFFT requires a work area for temporary storage of intermediate results. This call returns an estimate for the size of the work area required, given the specified parameters, and assuming default plan settings. 
            <see href="https://docs.nvidia.com/cuda/archive/9.2/cufft/index.html#function-cufftestimate1d">online</see> 
            </summary>
            <param name="nx">The transform size in the x dimension (number of rows)</param>
            <param name="type">The transform data type (e.g., <see cref="F:Hybridizer.Runtime.CUDAImports.cufftType.CUFFT_C2R"/> for single precision complex to real) </param>
            <param name="batch">Number of transforms of size nx. Please consider using <see cref="M:Hybridizer.Runtime.CUDAImports.cufft.EstimateMany(System.Int32,System.Int32[],System.Int32[],System.Int32,System.Int32,System.Int32[],System.Int32,System.Int32,Hybridizer.Runtime.CUDAImports.cufftType,System.Int32,Hybridizer.Runtime.CUDAImports.size_t@)"/> for multiple transforms.</param>
            <param name="workSize">Pointer to the size, in bytes, of the work space.</param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cufft.Estimate2d(System.Int32,System.Int32,Hybridizer.Runtime.CUDAImports.cufftType,Hybridizer.Runtime.CUDAImports.size_t@)">
            <summary>
            During plan execution, cuFFT requires a work area for temporary storage of intermediate results. This call returns an estimate for the size of the work area required, given the specified parameters, and assuming default plan settings. 
            </summary>
            <param name="nx">The transform size in the x dimension (number of rows)</param>
            <param name="ny">The transform size in the y dimension (number of columns)</param>
            <param name="type">The transform data type (e.g., <see cref="F:Hybridizer.Runtime.CUDAImports.cufftType.CUFFT_C2R"/> for single precision complex to real) </param>
            <param name="workSize">Pointer to the size, in bytes, of the work space.</param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cufft.Estimate3d(System.Int32,System.Int32,System.Int32,Hybridizer.Runtime.CUDAImports.cufftType,Hybridizer.Runtime.CUDAImports.size_t@)">
            <summary>
            During plan execution, cuFFT requires a work area for temporary storage of intermediate results. This call returns an estimate for the size of the work area required, given the specified parameters, and assuming default plan settings. 
            </summary>
            <param name="nx">The transform size in the x dimension</param>
            <param name="ny">The transform size in the y dimension</param>
            <param name="nz">The transform size in the z dimension</param>
            <param name="type">The transform data type (e.g., <see cref="F:Hybridizer.Runtime.CUDAImports.cufftType.CUFFT_C2R"/> for single precision complex to real) </param>
            <param name="workSize">Pointer to the size, in bytes, of the work space.</param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cufft.EstimateMany(System.Int32,System.Int32[],System.Int32[],System.Int32,System.Int32,System.Int32[],System.Int32,System.Int32,Hybridizer.Runtime.CUDAImports.cufftType,System.Int32,Hybridizer.Runtime.CUDAImports.size_t@)">
            <summary>
            During plan execution, cuFFT requires a work area for temporary storage of intermediate results. This call returns an estimate for the size of the work area required, given the specified parameters, and assuming default plan settings.
            The cufftEstimateMany() API supports more complicated input and output data layouts via the advanced data layout parameters: inembed, istride, idist, onembed, ostride, and odist.
            All arrays are assumed to be in CPU memory.
            </summary>
            <param name="rank">Dimensionality of the transform (1, 2, or 3)</param>
            <param name="n">Array of size rank, describing the size of each dimension </param>
            <param name="inembed">Pointer of size rank that indicates the storage dimensions of the input data in memory. If set to NULL all other advanced data layout parameters are ignored.</param>
            <param name="istride">Indicates the distance between two successive input elements in the least significant (i.e., innermost) dimension</param>
            <param name="idist">Indicates the distance between the first element of two consecutive signals in a batch of the input data</param>
            <param name="onembed">Pointer of size rank that indicates the storage dimensions of the output data in memory. If set to NULL all other advanced data layout parameters are ignored. </param>
            <param name="ostride">Indicates the distance between two successive output elements in the output array in the least significant (i.e., innermost) dimension </param>
            <param name="odist">Indicates the distance between the first element of two consecutive signals in a batch of the output data</param>
            <param name="type">The transform data type (e.g., CUFFT_R2C for single precision real to complex) </param>
            <param name="batch">Batch size for this transform</param>
            <param name="workSize">Pointer to the size, in bytes, of the work space.</param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cufft.GetProperty(Hybridizer.Runtime.CUDAImports.libraryPropertyType_t,System.Int32@)">
            <summary>
            Return in *value the number for the property described by type of the dynamically linked CUFFT library. 
            </summary>
            <param name="type">CUDA library property</param>
            <param name="val">Contains the integer value for the requested property</param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cufft.GetSize(Hybridizer.Runtime.CUDAImports.cufftHandle,Hybridizer.Runtime.CUDAImports.size_t@)">
            <summary>
            Once plan generation has been done, either with the original API or the extensible API, this call returns the actual size of the work area required to support the plan. 
            Callers who choose to manage work area allocation within their application must use this call after plan generation, and after any cufftSet*() calls subsequent to plan generation, if those calls might alter the required work space size. 
            </summary>
            <param name="handle">cufftHandle returned by <see cref="M:Hybridizer.Runtime.CUDAImports.cufft.Create(Hybridizer.Runtime.CUDAImports.cufftHandle@)"/></param>
            <param name="workSize">Pointer to the size(s), in bytes, of the work areas. For example for two GPUs worksize must be declared to have two elements.</param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cufft.GetSize1d(Hybridizer.Runtime.CUDAImports.cufftHandle,System.Int32,Hybridizer.Runtime.CUDAImports.cufftType,System.Int32,Hybridizer.Runtime.CUDAImports.size_t@)">
            <summary>
            Gives a more accurate estimate of the work area size required for a plan than the <see cref="M:Hybridizer.Runtime.CUDAImports.cufft.Estimate1d(System.Int32,Hybridizer.Runtime.CUDAImports.cufftType,System.Int32,Hybridizer.Runtime.CUDAImports.size_t@)"/> routine as they take into account any plan settings that may have been made.
            As discussed in the section <see cref="!:https://docs.nvidia.com/cuda/archive/9.2/cufft/index.html#work-estimate">cuFFT Estimated Size of Work Area</see>, the workSize value(s) returned may be conservative especially for values of n that are not multiples of powers of 2, 3, 5 and 7.
            </summary>
            <param name="handle">cufftHandle returned by cufftCreate</param>
            <param name="nx">The transform size (e.g. 256 for a 256-point FFT)</param>
            <param name="type">The transform data type (e.g., CUFFT_C2C for single precision complex to complex) </param>
            <param name="batch">Number of transforms of size nx. Please consider using cufftGetSizeMany for multiple transforms. </param>
            <param name="workSize">Pointer to the size(s), in bytes, of the work areas. For example for two GPUs worksize must be declared to have two elements.</param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cufft.GetSize2d(Hybridizer.Runtime.CUDAImports.cufftHandle,System.Int32,System.Int32,Hybridizer.Runtime.CUDAImports.cufftType,Hybridizer.Runtime.CUDAImports.size_t@)">
            <summary>
            This call gives a more accurate estimate of the work area size required for a plan than <see cref="M:Hybridizer.Runtime.CUDAImports.cufft.Estimate2d(System.Int32,System.Int32,Hybridizer.Runtime.CUDAImports.cufftType,Hybridizer.Runtime.CUDAImports.size_t@)"></see>, given the specified parameters, and taking into account any plan settings that may have been made. 
            </summary>
            <param name="handle">cufftHandle returned by cufftCreate</param>
            <param name="nx">The transform size in the x dimension (number of rows) </param>
            <param name="ny">The transform size in the y dimension (number of columns) </param>
            <param name="type">The transform data type (e.g., CUFFT_C2R for single precision complex to real) </param>
            <param name="workSize">Pointer to the size(s), in bytes, of the work areas. For example for two GPUs worksize must be declared to have two elements.</param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cufft.GetSize3d(Hybridizer.Runtime.CUDAImports.cufftHandle,System.Int32,System.Int32,System.Int32,Hybridizer.Runtime.CUDAImports.cufftType,Hybridizer.Runtime.CUDAImports.size_t@)">
            <summary>
            This call gives a more accurate estimate of the work area size required for a plan than <see cref="M:Hybridizer.Runtime.CUDAImports.cufft.Estimate3d(System.Int32,System.Int32,System.Int32,Hybridizer.Runtime.CUDAImports.cufftType,Hybridizer.Runtime.CUDAImports.size_t@)"></see>, given the specified parameters, and taking into account any plan settings that may have been made. 
            </summary>
            <param name="handle">cufftHandle returned by cufftCreate</param>
            <param name="nx">The transform size in the x dimension </param>
            <param name="ny">The transform size in the y dimension </param>
            <param name="nz">The transform size in the z dimension </param>
            <param name="type">The transform data type (e.g., CUFFT_R2C for single precision real to complex) </param>
            <param name="workSize">Pointer to the size(s), in bytes, of the work areas. For example for two GPUs worksize must be declared to have two elements.</param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cufft.GetSizeMany(Hybridizer.Runtime.CUDAImports.cufftHandle,System.Int32,System.Int32[],System.Int32[],System.Int32,System.Int32,System.Int32[],System.Int32,System.Int32,Hybridizer.Runtime.CUDAImports.cufftType,System.Int32,Hybridizer.Runtime.CUDAImports.size_t@)">
            <summary>
            This call gives a more accurate estimate of the work area size required for a plan than <see cref="M:Hybridizer.Runtime.CUDAImports.cufft.EstimateMany(System.Int32,System.Int32[],System.Int32[],System.Int32,System.Int32,System.Int32[],System.Int32,System.Int32,Hybridizer.Runtime.CUDAImports.cufftType,System.Int32,Hybridizer.Runtime.CUDAImports.size_t@)"/>, given the specified parameters, and taking into account any plan settings that may have been made. 
            </summary>
            <param name="plan">cufftHandle returned by cufftCreate</param>
            <param name="rank">Dimensionality of the transform (1, 2, or 3)</param>
            <param name="n">Array of size rank, describing the size of each dimension </param>
            <param name="inembed">Pointer of size rank that indicates the storage dimensions of the input data in memory. If set to NULL all other advanced data layout parameters are ignored. </param>
            <param name="istride">Indicates the distance between two successive input elements in the least significant (i.e., innermost) dimension</param>
            <param name="idist">Indicates the distance between the first element of two consecutive signals in a batch of the input data</param>
            <param name="onembed">Pointer of size rank that indicates the storage dimensions of the output data in memory. If set to NULL all other advanced data layout parameters are ignored. </param>
            <param name="ostride">Indicates the distance between two successive output elements in the output array in the least significant (i.e., innermost) dimension </param>
            <param name="odist">Indicates the distance between the first element of two consecutive signals in a batch of the output data</param>
            <param name="type">The transform data type (e.g., CUFFT_R2C for single precision real to complex) </param>
            <param name="batch">Batch size for this transform</param>
            <param name="workSize">Pointer to the size(s), in bytes, of the work areas. For example for two GPUs worksize must be declared to have two elements.</param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cufft.GetSizeMany64(Hybridizer.Runtime.CUDAImports.cufftHandle,System.Int32,System.Int64[],System.Int64[],System.Int64,System.Int64,System.Int64[],System.Int64,System.Int64,Hybridizer.Runtime.CUDAImports.cufftType,System.Int64,Hybridizer.Runtime.CUDAImports.size_t@)">
            <summary>
            This call gives a more accurate estimate of the work area size required for a plan than cufftEstimateSizeMany(), given the specified parameters, and taking into account any plan settings that may have been made.
            This API is identical to cufftMakePlanMany except that the arguments specifying sizes and strides are 64 bit integers.This API makes very large transforms possible. cuFFT includes kernels that use 32 bit indexes, and kernels that use 64 bit indexes. cuFFT planning selects 32 bit kernels whenever possible to avoid any overhead due to 64 bit arithmetic.
            All sizes and types of transform are supported by this interface, with two exceptions.For transforms whose total size exceeds 4G elements, the dimensions specified in the array n must be factorable into primes that are less than or equal to 127. For real to complex and complex to real transforms whose total size exceeds 2G elements, the fastest changing dimension must be even.
            </summary>
            <param name="plan">cufftHandle returned by cufftCreate</param>
            <param name="rank">Dimensionality of the transform (1, 2, or 3)</param>
            <param name="n">Array of size rank, describing the size of each dimension </param>
            <param name="inembed">Pointer of size rank that indicates the storage dimensions of the input data in memory. If set to NULL all other advanced data layout parameters are ignored. </param>
            <param name="istride">Indicates the distance between two successive input elements in the least significant (i.e., innermost) dimension</param>
            <param name="idist">Indicates the distance between the first element of two consecutive signals in a batch of the input data</param>
            <param name="onembed">Pointer of size rank that indicates the storage dimensions of the output data in memory. If set to NULL all other advanced data layout parameters are ignored. </param>
            <param name="ostride">Indicates the distance between two successive output elements in the output array in the least significant (i.e., innermost) dimension </param>
            <param name="odist">Indicates the distance between the first element of two consecutive signals in a batch of the output data</param>
            <param name="type">The transform data type (e.g., CUFFT_R2C for single precision real to complex) </param>
            <param name="batch">Batch size for this transform</param>
            <param name="workSize">Pointer to the size(s), in bytes, of the work areas. For example for two GPUs worksize must be declared to have two elements.</param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cufft.GetVersion(System.Int32@)">
            <summary>
            Returns the version number of cuFFT.
            </summary>
            <param name="version">Pointer to the version number</param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cufft.MakePlan1d(Hybridizer.Runtime.CUDAImports.cufftHandle,System.Int32,Hybridizer.Runtime.CUDAImports.cufftType,System.Int32,Hybridizer.Runtime.CUDAImports.size_t@)">
            <summary>
            Following a call to cufftCreate() makes a 1D FFT plan configuration for a specified signal size and data type. The batch input parameter tells cuFFT how many 1D transforms to configure. 
            If cufftXtSetGPUs() was called prior to this call with multiple GPUs, then workSize will contain multiple sizes. See sections on multiple GPUs for more details. 
            </summary>
            <param name="plan">cufftHandle returned by cufftCreate</param>
            <param name="nx">The transform size (e.g. 256 for a 256-point FFT). For multiple GPUs, this must be a power of 2.</param>
            <param name="type">The transform data type (e.g., CUFFT_C2C for single precision complex to complex). For multiple GPUs this must be a complex to complex transform. </param>
            <param name="batch">Number of transforms of size nx. Please consider using cufftMakePlanMany for multiple transforms. </param>
            <param name="workSize">Pointer to the size(s), in bytes, of the work areas. For example for two GPUs worksize must be declared to have two elements.</param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cufft.MakePlan2d(Hybridizer.Runtime.CUDAImports.cufftHandle,System.Int32,System.Int32,Hybridizer.Runtime.CUDAImports.cufftType,Hybridizer.Runtime.CUDAImports.size_t@)">
            <summary>
            Following a call to cufftCreate() makes a 2D FFT plan configuration according to specified signal sizes and data type. 
            If cufftXtSetGPUs() was called prior to this call with multiple GPUs, then workSize will contain multiple sizes. See sections on multiple GPUs for more details. 
            </summary>
            <param name="plan">cufftHandle returned by cufftCreate</param>
            <param name="nx">The transform size in the x dimension. This is slowest changing dimension of a transform (strided in memory). For multiple GPUs, this must be factorable into primes less than or equal to 127.</param>
            <param name="ny">The transform size in the y dimension. This is fastest changing dimension of a transform (contiguous in memory). For 2 GPUs, this must be factorable into primes less than or equal to 127.</param>
            <param name="type">The transform data type (e.g., CUFFT_C2R for single precision complex to real). For multiple GPUs this must be a complex to complex transform. </param>
            <param name="workSize">Pointer to the size(s), in bytes, of the work areas. For example for two GPUs worksize must be declared to have two elements.</param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cufft.MakePlan3d(Hybridizer.Runtime.CUDAImports.cufftHandle,System.Int32,System.Int32,System.Int32,Hybridizer.Runtime.CUDAImports.cufftType,Hybridizer.Runtime.CUDAImports.size_t@)">
            <summary>
            Following a call to cufftCreate() makes a 3D FFT plan configuration according to specified signal sizes and data type. This function is the same as cufftPlan2d() except that it takes a third size parameter nz. 
            If cufftXtSetGPUs() was called prior to this call with multiple GPUs, then workSize will contain multiple sizes. See sections on multiple GPUs for more details. 
            </summary>
            <param name="plan">cufftHandle returned by cufftCreate</param>
            <param name="nx">The transform size in the x dimension. This is slowest changing dimension of a transform (strided in memory). For multiple GPUs, this must be factorable into primes less than or equal to 127. </param>
            <param name="ny">The transform size in the y dimension. For multiple GPUs, this must be factorable into primes less than or equal to 127. </param>
            <param name="nz">The transform size in the z dimension. This is fastest changing dimension of a transform (contiguous in memory). For multiple GPUs, this must be factorable into primes less than or equal to 127. </param>
            <param name="type">The transform data type (e.g., CUFFT_R2C for single precision real to complex). For multiple GPUs this must be a complex to complex transform. </param>
            <param name="workSize">Pointer to the size(s), in bytes, of the work areas. For example for two GPUs worksize must be declared to have two elements.</param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cufft.MakePlanMany(Hybridizer.Runtime.CUDAImports.cufftHandle,System.Int32,System.Int32[],System.Int32[],System.Int32,System.Int32,System.Int32[],System.Int32,System.Int32,Hybridizer.Runtime.CUDAImports.cufftType,System.Int32,Hybridizer.Runtime.CUDAImports.size_t@)">
            <summary>
            Following a call to cufftCreate() makes a FFT plan configuration of dimension rank, with sizes specified in the array n. The batch input parameter tells cuFFT how many transforms to configure. With this function, batched plans of 1, 2, or 3 dimensions may be created. 
            The cufftPlanMany() API supports more complicated input and output data layouts via the advanced data layout parameters: inembed, istride, idist, onembed, ostride, and odist. 
            If inembed and onembed are set to NULL, all other stride information is ignored, and default strides are used. The default assumes contiguous data arrays. 
            If cufftXtSetGPUs() was called prior to this call with multiple GPUs, then workSize will contain multiple sizes. See sections on multiple GPUs for more details. 
            All arrays are assumed to be in CPU memory.
            </summary>
            <param name="plan">cufftHandle returned by cufftCreate</param>
            <param name="rank">Dimensionality of the transform (1, 2, or 3)</param>
            <param name="n">Array of size rank, describing the size of each dimension, n[0] being the size of the outermost and n[rank-1] innermost (contiguous) dimension of a transform. For multiple GPUs and rank equal to 1, the sizes must be a power of 2. For multiple GPUs and rank equal to 2 or 3, the sizes must be factorable into primes less than or equal to 127. </param>
            <param name="inembed">Pointer of size rank that indicates the storage dimensions of the input data in memory, inembed[0] being the storage dimension of the innermost dimension. If set to NULL all other advanced data layout parameters are ignored. </param>
            <param name="istride">Indicates the distance between two successive input elements in the least significant (i.e., innermost) dimension</param>
            <param name="idist">Indicates the distance between the first element of two consecutive signals in a batch of the input data</param>
            <param name="onembed">Pointer of size rank that indicates the storage dimensions of the output data in memory, inembed[0] being the storage dimension of the innermost dimension. If set to NULL all other advanced data layout parameters are ignored. </param>
            <param name="ostride">Indicates the distance between two successive output elements in the output array in the least significant (i.e., innermost) dimension </param>
            <param name="odist">Indicates the distance between the first element of two consecutive signals in a batch of the output data</param>
            <param name="type">The transform data type (e.g., CUFFT_R2C for single precision real to complex). For 2 GPUs this must be a complex to complex transform. </param>
            <param name="batch">Batch size for this transform</param>
            <param name="workSize">Pointer to the size(s), in bytes, of the work areas. For example for two GPUs worksize must be declared to have two elements.</param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cufft.MakePlanMany64(Hybridizer.Runtime.CUDAImports.cufftHandle,System.Int32,System.Int64[],System.Int64[],System.Int64,System.Int64,System.Int64[],System.Int64,System.Int64,Hybridizer.Runtime.CUDAImports.cufftType,System.Int64,Hybridizer.Runtime.CUDAImports.size_t@)">
            <summary>
            Following a call to cufftCreate() makes a FFT plan configuration of dimension rank, with sizes specified in the array n. The batch input parameter tells cuFFT how many transforms to configure. With this function, batched plans of 1, 2, or 3 dimensions may be created. 
            The cufftPlanMany() API supports more complicated input and output data layouts via the advanced data layout parameters: inembed, istride, idist, onembed, ostride, and odist. 
            If inembed and onembed are set to NULL, all other stride information is ignored, and default strides are used. The default assumes contiguous data arrays. 
            If cufftXtSetGPUs() was called prior to this call with multiple GPUs, then workSize will contain multiple sizes. See sections on multiple GPUs for more details. 
            All arrays are assumed to be in CPU memory.
            </summary>
            <param name="plan">cufftHandle returned by cufftCreate</param>
            <param name="rank">Dimensionality of the transform (1, 2, or 3)</param>
            <param name="n">Array of size rank, describing the size of each dimension, n[0] being the size of the outermost and n[rank-1] innermost (contiguous) dimension of a transform. For multiple GPUs and rank equal to 1, the sizes must be a power of 2. For multiple GPUs and rank equal to 2 or 3, the sizes must be factorable into primes less than or equal to 127. </param>
            <param name="inembed">Pointer of size rank that indicates the storage dimensions of the input data in memory, inembed[0] being the storage dimension of the innermost dimension. If set to NULL all other advanced data layout parameters are ignored. </param>
            <param name="istride">Indicates the distance between two successive input elements in the least significant (i.e., innermost) dimension</param>
            <param name="idist">Indicates the distance between the first element of two consecutive signals in a batch of the input data</param>
            <param name="onembed">Pointer of size rank that indicates the storage dimensions of the output data in memory, inembed[0] being the storage dimension of the innermost dimension. If set to NULL all other advanced data layout parameters are ignored. </param>
            <param name="ostride">Indicates the distance between two successive output elements in the output array in the least significant (i.e., innermost) dimension </param>
            <param name="odist">Indicates the distance between the first element of two consecutive signals in a batch of the output data</param>
            <param name="type">The transform data type (e.g., CUFFT_R2C for single precision real to complex). For 2 GPUs this must be a complex to complex transform. </param>
            <param name="batch">Batch size for this transform</param>
            <param name="workSize">Pointer to the size(s), in bytes, of the work areas. For example for two GPUs worksize must be declared to have two elements.</param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cufft.SetAutoAllocate(Hybridizer.Runtime.CUDAImports.cufftHandle,System.Int32)">
            <summary>
            cufftSetAutoAllocation() indicates that the caller intends to allocate and manage work areas for plans that have been generated. 
            cuFFT default behavior is to allocate the work area at plan generation time. 
            If cufftSetAutoAllocation() has been called with autoAllocate set to 0 ("false") prior to one of the cufftMakePlan*() calls, cuFFT does not allocate the work area. 
            This is the preferred sequence for callers wishing to manage work area allocation. 
            </summary>
            <param name="plan">cufftHandle returned by cufftCreate.</param>
            <param name="autoAllocate">allocate </param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cufft.SetWorkArea(Hybridizer.Runtime.CUDAImports.cufftHandle,System.IntPtr)">
            <summary>
            cufftSetWorkArea() overrides the work area pointer associated with a plan. 
            If the work area was auto-allocated, cuFFT frees the auto-allocated space. 
            The cufftExecute*() calls assume that the work area pointer is valid and that it points to a contiguous region in device memory that does not overlap with any other work area. 
            If this is not the case, results are indeterminate. 
            </summary>
            <param name="plan">cufftHandle returned by cufftCreate</param>
            <param name="workArea">Pointer to workArea. For multiple GPUs, multiple work area pointers must be given.</param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.cufft.XtMakePlanMany(Hybridizer.Runtime.CUDAImports.cufftHandle,System.Int32,System.Int64[],System.Int64[],System.Int64,System.Int64,Hybridizer.Runtime.CUDAImports.cudaDataType_t,System.Int64[],System.Int64,System.Int64,Hybridizer.Runtime.CUDAImports.cudaDataType_t,System.Int64,Hybridizer.Runtime.CUDAImports.size_t@,Hybridizer.Runtime.CUDAImports.cudaDataType_t)">
            <summary>
            Following a call to cufftCreate() makes an FFT plan configuration of dimension rank, with sizes specified in the array n. The batch input parameter tells cuFFT how many transforms to configure. With this function, batched plans of 1, 2, or 3 dimensions may be created. 
            Type specifiers inputtype, outputtype and executiontype dictate type and precision of transform to be performed. Not all combinations of parameters are supported. Currently all three parameters need to match precision. Parameters inputtype and outputtype need to match transform type complex-to-complex, real-to-complex or complex-to-real. Parameter executiontype needs to match precision and be of a complex type. Example: for a 16 bit real-to-complex transform parameters inputtype, outputtype and executiontype would have values of CUDA_R_16F, CUDA_C_16F and CUDA_C_16F respectively. 
            The cufftXtMakePlanMany() API supports more complicated input and output data layouts via the advanced data layout parameters: inembed, istride, idist, onembed, ostride, and odist. 
            If inembed and onembed are set to NULL, all other stride information is ignored, and default strides are used. The default assumes contiguous data arrays. 
            If cufftXtSetGPUs() was called prior to this call with multiple GPUs, then workSize will contain multiple sizes. See sections on multiple GPUs for more details. 
            All arrays are assumed to be in CPU memory.
            </summary>
            <param name="plan">cufftHandle returned by cufftCreate</param>
            <param name="rank">Dimensionality of the transform (1, 2, or 3)</param>
            <param name="n">Array of size rank, describing the size of each dimension, n[0] being the size of the innermost deminsion. For multiple GPUs and rank equal to 1, the sizes must be a power of 2. For multiple GPUs and rank equal to 2 or 3, the sizes must be factorable into primes less than or equal to 127. </param>
            <param name="inembed">Pointer of size rank that indicates the storage dimensions of the input data in memory, inembed[0] being the storage dimension of the innermost dimension. If set to NULL all other advanced data layout parameters are ignored. </param>
            <param name="istride">Indicates the distance between two successive input elements in the least significant (i.e., innermost) dimension</param>
            <param name="idist">Indicates the distance between the first element of two consecutive signals in a batch of the input data</param>
            <param name="inputtype">Type of input data.</param>
            <param name="onembed">Pointer of size rank that indicates the storage dimensions of the output data in memory, inembed[0] being the storage dimension of the innermost dimension. If set to NULL all other advanced data layout parameters are ignored. </param>
            <param name="ostride">Indicates the distance between two successive output elements in the output array in the least significant (i.e., innermost) dimension </param>
            <param name="odist">Indicates the distance between the first element of two consecutive signals in a batch of the output data</param>
            <param name="outputtype">Type of output data.</param>
            <param name="batch">Batch size for this transform</param>
            <param name="workSize">Pointer to the size(s), in bytes, of the work areas. For example for two GPUs worksize must be declared to have two elements.</param>
            <param name="executiontype">Type of data to be used for computations.</param>
            <returns></returns>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.curand">
            <summary>
            curand mapping
            Full documentation <see href="https://docs.nvidia.com/cuda/curand/index.html">here</see>
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.curand.curandOrdering_t.CURAND_ORDERING_PSEUDO_BEST">
            <summary>
            Best ordering for pseudorandom results
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.curand.curandOrdering_t.CURAND_ORDERING_PSEUDO_DEFAULT">
            <summary>
            Specific default 4096 thread sequence for pseudorandom results
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.curand.curandOrdering_t.CURAND_ORDERING_PSEUDO_SEEDED">
            <summary>
            Specific seeding pattern for fast lower quality pseudorandom results
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.curand.curandOrdering_t.CURAND_ORDERING_QUASI_DEFAULT">
            <summary>
            Specific n-dimensional ordering for quasirandom results
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.curand.curandRngType_t.CURAND_RNG_PSEUDO_DEFAULT">
            <summary>
            Default pseudorandom generator
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.curand.curandRngType_t.CURAND_RNG_PSEUDO_XORWOW">
            <summary>
            XORWOW pseudorandom generator
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.curand.curandRngType_t.CURAND_RNG_PSEUDO_MRG32K3A">
            <summary>
            MRG32k3a pseudorandom generator
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.curand.curandRngType_t.CURAND_RNG_PSEUDO_MTGP32">
            <summary>
            Mersenne Twister pseudorandom generator
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.curand.curandRngType_t.CURAND_RNG_PSEUDO_PHILOX4_32_10">
            <summary>
            Default pseudorandom generator
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.curand.curandRngType_t.CURAND_RNG_QUASI_DEFAULT">
            <summary>
            Default quasirandom generator
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.curand.curandRngType_t.CURAND_RNG_QUASI_SOBOL32">
            <summary>
            Sobol32 quasirandom generator
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.curand.curandRngType_t.CURAND_RNG_QUASI_SCRAMBLED_SOBOL32">
            <summary>
            Scrambled Sobol32 quasirandom generator
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.curand.curandRngType_t.CURAND_RNG_QUASI_SOBOL64">
            <summary>
            Sobol64 quasirandom generator
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.curand.curandRngType_t.CURAND_RNG_QUASI_SCRAMBLED_SOBOL64">
            <summary>
            Scrambled Sobol64 quasirandom generator
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.curand.curandStatus_t.CURAND_STATUS_SUCCESS">
            <summary>
            No errors. 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.curand.curandStatus_t.CURAND_STATUS_VERSION_MISMATCH">
            <summary>
            Header file and linked library version do not match. 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.curand.curandStatus_t.CURAND_STATUS_NOT_INITIALIZED">
            <summary>
            Generator not initialized. 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.curand.curandStatus_t.CURAND_STATUS_ALLOCATION_FAILED">
            <summary>
            Memory allocation failed. 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.curand.curandStatus_t.CURAND_STATUS_TYPE_ERROR">
            <summary>
            Generator is wrong type. 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.curand.curandStatus_t.CURAND_STATUS_OUT_OF_RANGE">
            <summary>
            Argument out of range. 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.curand.curandStatus_t.CURAND_STATUS_LENGTH_NOT_MULTIPLE">
            <summary>
            Length requested is not a multple of dimension. 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.curand.curandStatus_t.CURAND_STATUS_DOUBLE_PRECISION_REQUIRED">
            <summary>
            GPU does not have double precision required by MRG32k3a. 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.curand.curandStatus_t.CURAND_STATUS_LAUNCH_FAILURE">
            <summary>
            Kernel launch failure. 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.curand.curandStatus_t.CURAND_STATUS_PREEXISTING_FAILURE">
            <summary>
            Preexisting failure on library entry. 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.curand.curandStatus_t.CURAND_STATUS_INITIALIZATION_FAILED">
            <summary>
            Initialization of CUDA failed. 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.curand.curandStatus_t.CURAND_STATUS_ARCH_MISMATCH">
            <summary>
            Architecture mismatch, GPU does not support requested feature. 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.curand.curandStatus_t.CURAND_STATUS_INTERNAL_ERROR">
            <summary>
            Internal library error. 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.curand.switchToVersion(Hybridizer.Runtime.CUDAImports.curand.VERSION)">
            <summary>
            select curand version -- this is now done automatically from app settings
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.curand.GetCudaVersion">
            <summary>
            Gets CUDA version from app.config
            </summary>
            <returns></returns>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.curand_device.BoxMuller">
            <summary>
            Box-Müller Transform 
            </summary>
            <seealso href="https://en.wikipedia.org/wiki/Box%E2%80%93Muller_transform"/>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.curand_device.curandStateMRG32k3a_t.MultModM(System.Double,System.Double,System.Double,System.Double)">
            See L'Ecuyer : http://www.iro.umontreal.ca/~lecuyer/
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.threadIdxX64">
            <summary>
            Static class to guide work distribution on device for the Thread part : Index
            (maps on vector unit index for the vectorized flavors)
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.threadIdxX64.x">
            <summary>
            X component (lowest weight)
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.threadIdxX64.y">
            <summary>
            Y component
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.threadIdxX64.z">
            <summary>
            Z component (highest weight)
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.threadIdx">
            <summary>
            Static class to guide work distribution on device for the Thread part : Index
            (maps on vector unit index for the vectorized flavors)
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.threadIdx.x">
            <summary>
            X component (lowest weight)
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.threadIdx.y">
            <summary>
            Y component
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.threadIdx.z">
            <summary>
            Z component (highest weight)
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.blockIdxX64">
            <summary>
            Static class to guide work distribution on device for the Block part : Index
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.blockIdxX64.x">
            <summary>
            X component (lowest weight)
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.blockIdxX64.y">
            <summary>
            Y component
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.blockIdxX64.z">
            <summary>
            Z component (highest weight)
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.blockIdx">
            <summary>
            Static class to guide work distribution on device for the Block part : Index
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.blockIdx.x">
            <summary>
            X component (lowest weight)
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.blockIdx.y">
            <summary>
            Y component
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.blockIdx.z">
            <summary>
            Z component (highest weight)
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.blockDimX64">
            <summary>
            Static class to guide work distribution on device for the Thread part : Dimension
            (maps on vector unit index for the vectorized flavors)
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.blockDimX64.x">
            <summary>
            X component (lowest weight)
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.blockDimX64.y">
            <summary>
            Y component
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.blockDimX64.z">
            <summary>
            Z component (highest weight)
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.blockDim">
            <summary>
            Static class to guide work distribution on device for the Thread part : Dimension
            (maps on vector unit index for the vectorized flavors)
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.blockDim.x">
            <summary>
            X component (lowest weight)
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.blockDim.y">
            <summary>
            Y component
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.blockDim.z">
            <summary>
            Z component (highest weight)
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.gridDimX64">
            <summary>
            Static class to guide work distribution on device for the Block part : Dimension
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.gridDimX64.x">
            <summary>
            X component (lowest weight)
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.gridDimX64.y">
            <summary>
            Y component
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.gridDimX64.z">
            <summary>
            Z component (highest weight)
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.gridDim">
            <summary>
            Static class to guide work distribution on device for the Block part : Dimension
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.gridDim.x">
            <summary>
            X component (lowest weight)
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.gridDim.y">
            <summary>
            Y component
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.gridDim.z">
            <summary>
            Z component (highest weight)
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.CUDAIntrinsics">
            <summary>
            CUDA intrinsics
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.CUDAIntrinsics.__syncthreads">
            <summary>
            synchronize all threads of a block
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.SharedMemoryAttribute">
            <summary>
            internal
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.EntryPointAttribute">
            <summary>
            Entry point method
            called from host and executed on device
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.EntryPointAttribute.OmitSelf">
            <summary>
            obsolete
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.EntryPointAttribute.SharedSize">
            <summary>
            reserved
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.EntryPointAttribute.Nvrtc">
            <summary>
            Using Nvrtc for just-in-time compilation
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.EntryPointAttribute.#ctor">
            <summary>
            default constructor
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.EntryPointAttribute.#ctor(System.String)">
            <summary>
            constructor with name override
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.EntryPointAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            obsolete
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.CUDADynamicParallelismAttribute">
            <summary>
            EntryPoint can be called from device function, spawning dynamic parallelism
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.CUDADynamicParallelismAttribute.GridDim">
            <summary>
            grid dimension at launch
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.CUDADynamicParallelismAttribute.BlockDim">
            <summary>
            block dimension at launch
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.CUDADynamicParallelismAttribute.Shared">
            <summary>
            shared memory size
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.CUDADynamicParallelismAttribute.Stream">
            <summary>
            stream identifier
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.CUDADynamicParallelismAttribute.#ctor">
            <summary>
            default constructor
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.CUDADynamicParallelismAttribute.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            full constructor
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.LaunchBoundsAttribute">
            <summary>
            Launch bounds provided to __global__ function
            Hints to compiler to optimize register pressure
            Complete documentation <see href="https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#launch-bounds">here</see>
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.LaunchBoundsAttribute.MaxThreadsPerBlock">
            <summary>
            maximum threads per block
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.LaunchBoundsAttribute.MinBlocksPerMultiprocessor">
            <summary>
            minimum blocks per multiprocessor
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.LaunchBoundsAttribute.#ctor(System.Int32,System.Int32)">
            <summary>
            full constructor
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.LaunchBoundsAttribute.#ctor">
            <summary>
            default consructor
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.KernelAttribute">
            <summary>
            A function running on the device
            </summary>
            <example>
            <code>
            [Kernel]
            int f (int p) 
            {
                return p * p ;
            }
            </code>
            </example>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.KernelAttribute.Name">
            <summary>
            optional override for native generated name
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.KernelAttribute.Profiles">
            <summary>
            reserved
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.KernelAttribute.#ctor">
            <summary>
            default constructor
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.KernelAttribute.#ctor(System.String)">
            <summary>
            constructor from name
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.HybNoInlineAttribute">
            <summary>
            Orevents inlining in generated code (speed-up compilation + saves register)
            Use with care, as it can alse dramatically slow down the generated code
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.HybridizerIgnoreAttribute">
            <summary>
            Do not hybridize
            Likely because C# code contains non supported code constructs
            </summary>
            <example>
            <code>
             class A
             {
               int x;
               [HybridizerIgnore]
               Dictionary&lt;int, float&gt; somecache;
             }
            </code>
            </example>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.HybridizerIgnoreAttribute.Flavors">
            <summary>
            list of flavors for which code should be ignored (default : all)
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.HybridizerIgnoreAttribute.#ctor">
            <summary>
            default constructor
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.HybridizerIgnoreAttribute.#ctor(System.String)">
            <summary>
            Ignore for a specific flavor 
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.HybridizerIgnoreAttribute.#ctor(Hybridizer.Runtime.CUDAImports.HybridizerFlavor[])">
            <summary>
            Ignor for a list of flavors
            </summary>
            <param name="flavors"></param>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.HybridizerIgnoreAttribute.IsIgnored(System.String)">
            <summary>
            internal
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.IntrinsicAttribute">
            <summary>
            internal - base type for all intrinsics attribute
            <see cref="T:Hybridizer.Runtime.CUDAImports.IntrinsicFunctionAttribute"/> 
            <seealso cref="T:Hybridizer.Runtime.CUDAImports.IntrinsicTypeAttribute"/>
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.IntrinsicAttribute.IsFunction">
            <summary>
            internal
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.IntrinsicAttribute.Flavor">
            <summary>
            internal
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.IntrinsicAttribute.#ctor">
            <summary>
            internal
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.IntrinsicAttribute.#ctor(System.String)">
            <summary>
            internal
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.IntrinsicFunctionAttribute">
            <summary>
            Functions marked as intrinsic -- user shall provide an implementation
            </summary>
            <example>
            <code>
            [IntrinsicFunction("::cosf")]
            public static float Cosf(float x) {
                return (float) Math.Cos((double) x);
            }
            </code>
            </example>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.IntrinsicFunctionAttribute.IsMember">
            <summary>
            Is function static or member function
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.IntrinsicFunctionAttribute.IsFunction">
            <summary>
            Is function -- always true
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.IntrinsicFunctionAttribute.IsNaked">
            <summary>
            is function naked?
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.IntrinsicFunctionAttribute.GenerateSource">
            <summary>
            internal
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.IntrinsicFunctionAttribute.#ctor">
            <summary>
            default constructor
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.IntrinsicFunctionAttribute.#ctor(System.String)">
            <summary>
            name constructor
            </summary>
            <param name="name">name of native function to be used</param>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.IntrinsicFunctionAttribute.#ctor(System.String,System.Int32)">
            <summary>
            full constructor
            </summary>
            <param name="name">name of native function to be used</param>
            <param name="flavor">flavor</param>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.SingleStaticAssignmentAttribute">
            <summary>
            Variables of this type can only be assigned once (at their declaration)
            The developer is responsible to ensure it's actually the case
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.IntrinsicTypeAttribute">
            <summary>
            Types marked as intrinsic -- user shall provide an implementation
            </summary>
            <example>
            <code>
            [IntrinsicType("half2")]
            struct float2 {
               ...
            }
            </code>
            </example>
            <seealso cref="T:Hybridizer.Runtime.CUDAImports.IntrinsicIncludeAttribute"/>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.IntrinsicTypeAttribute.IsFunction">
            <summary>
            is function ? -- always false
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.IntrinsicTypeAttribute.NotVectorizable">
            <summary>
            AVX specific -- is type vectorizable?
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.IntrinsicTypeAttribute.VectorizedType">
            <summary>
            Provide vectorized type if type is vectorizable
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.IntrinsicTypeAttribute.#ctor">
            <summary>
            default constructor
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.IntrinsicTypeAttribute.#ctor(System.String)">
            <summary>
            constructor for name
            </summary>
            <param name="name">name of native type to be used</param>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.IntrinsicTypeAttribute.HandleAsValueType">
            <summary>
            handle this type as a value type (not a pointer)
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.IntrinsicTypeAttribute.#ctor(System.String,System.Int32)">
            <summary>
            full constructor
            </summary>
            <param name="name">name of native type to be used</param>
            <param name="flavor">flavor</param>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.AllocatableTypeAttribute">
            <summary>
            Types that can be newed on the device using hybridizer::allocate&lt;T&gt;()
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.IntrinsicConstantAttribute">
            <summary>
            Compile time constant
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.IntrinsicConstantAttribute.IsFunction">
            <summary>
            is function ? -- always false
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.IntrinsicConstantAttribute.#ctor">
            <summary>
            default constructor
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.IntrinsicConstantAttribute.#ctor(System.String)">
            <summary>
            name constructor
            </summary>
            <param name="name">name of constant value to be used</param>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.HybridTemplateConceptAttribute">
            <summary>
            Register class as a template concept
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.HybridRegisterTemplateAttribute">
            <summary>
            type to specialize template concept
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.HybridRegisterTemplateAttribute.Specialize">
            <summary>
            type to specialize with
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.TypeIdAttribute">
            <summary>
            Use this attribute to customize the typeId of one type
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.TypeIdAttribute.TypeId">
            <summary>
            typeid to be used
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.TypeIdAttribute.#ctor">
            <summary>
            default constructor
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.TypeIdAttribute.#ctor(System.String)">
            <summary>
            full constructor
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.ConstantLocation">
            <summary>
            constant memory location
            <seealso cref="T:Hybridizer.Runtime.CUDAImports.HybridConstantAttribute"/>
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.ConstantLocation.ConstantMemory">
            <summary>
            Constant memory
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.ConstantLocation.GlobalMemory">
            <summary>
            global memory
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.ConstantLocation.LocalDeclaration">
            <summary>
            reserved
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.HybridConstantAttribute">
            <summary>
            Defines a constant value
            </summary>
            <example>
            <code>
            public class ConstantsDeclaration {
                [HybridConstant(Location = ConstantLocation.ConstantMemory)]
                public static float[] data = { -2.0F, -1.0F, 0.0F, 1.0F, 2.0F };
            }
            </code>
            Complete example <see href="https://github.com/altimesh/hybridizer-basic-samples/blob/master/HybridizerBasicSamples_CUDA100/5.CUDA%20runtime/ConstantMemory/ConstantMemory/Program.cs">on github</see>
            </example>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.HybridConstantAttribute.Location">
            <summary>
            memory location to be used
            <see cref="T:Hybridizer.Runtime.CUDAImports.ConstantLocation"/>
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.HybridConstantAttribute.MaxSize">
            <summary>
            Maximum size (in elements) of this constant array
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.HybridConstantAttribute.Symbol">
            <summary>
            Symbol to be used in native code - be carefull to avoid naming conflicts as no mangling is applied
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.HybridConstantAttribute.IsDefine">
            <summary>
            Instead of a constant memory variable, a macro define will b egenerated.
            Please note that this can only work when the value is known at compile time.
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.HybridConstantAttribute.#ctor">
            <summary>
            default constructor (GlobalMemory)
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.HybridConstantAttribute.#ctor(Hybridizer.Runtime.CUDAImports.ConstantLocation)">
            <summary>
            full constructor
            </summary>
            <param name="location"></param>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.IntrinsicIncludeCUDAAttribute">
            <summary>
            intrinsic include -- CUDA specific 
            <seealso cref="T:Hybridizer.Runtime.CUDAImports.IntrinsicIncludeAttribute"/>
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.IntrinsicIncludeAttribute">
            <summary>
            Force include of some native header
            </summary>
            <example>
            <code>
            [IntrinsicInclude("&lt;cuda_fp16.h&gt;")]
            [IntrinsicType("half2")]
            struct half2 {
             ... 
            }
            </code>
            </example>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.IntrinsicIncludeAttribute.FileName">
            <summary>
            file name to include
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.IntrinsicIncludeAttribute.IsFunction">
            <summary>
             is function ? always false
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.IntrinsicIncludeAttribute.IsTypeDeclaredInHeader">
            <summary>
            is type declared in header?
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.IntrinsicIncludeAttribute.#ctor">
            <summary>
            default constructor
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.IntrinsicIncludeAttribute.#ctor(System.String)">
            <summary>
            full constructor
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.HybRunnerDefaultSatelliteNameAttribute">
            <summary>
            Assembly attribute providing name of generated satellite library
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.HybRunnerDefaultSatelliteNameAttribute.Name">
            <summary>
            Name of satellite library
            </summary>
            <example>
            <code>
            // allow parameterless constructor for HybRunner
            [assembly: HybRunnerDefaultSatelliteName("HybridizerSample15_CUDA.dll")]
            // allowing HybRunner runner = HybRunner.Cuda(); 
            </code>
            </example>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.HybRunnerDefaultSatelliteNameAttribute.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.IResidentArray">
            <summary>
            Resident array -- user must manually control memory location
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.IResidentArray.Status">
            <summary>
            memory status
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.IResidentArray.DevicePointer">
            <summary>
            device pointer
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.IResidentArray.HostPointer">
            <summary>
            host pointer
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.IResidentArray.RefreshHost">
            <summary>
            moves memory to host
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.IResidentArray.RefreshDevice">
            <summary>
            moves memory to device
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.ICustomMarshalled">
            <summary>
            custom marshaler
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.ICustomMarshalled.MarshalTo(System.IO.BinaryWriter,Hybridizer.Runtime.CUDAImports.HybridizerFlavor)">
            <summary>
            marshal to native
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.ICustomMarshalled.UnmarshalFrom(System.IO.BinaryReader,Hybridizer.Runtime.CUDAImports.HybridizerFlavor)">
            <summary>
            UnMarshal from native
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.IHybCustomMarshaler">
            <summary>
            custom marshaler
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.IHybCustomMarshaler.MarshalTo(System.Object,System.IO.BinaryWriter,Hybridizer.Runtime.CUDAImports.AbstractNativeMarshaler)">
            <summary>
            marshal to native
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.IHybCustomMarshaler.UnmarshalFrom(System.Object,System.IO.BinaryReader,Hybridizer.Runtime.CUDAImports.AbstractNativeMarshaler)">
            <summary>
            UnMarshal from native
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.IHybCustomMarshaler.SizeOf(System.Object)">
            <summary>
            provides size
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.ICustomMarshalledSize">
            <summary>
            size of marshalled structure
            </summary>
            <remarks>
            Mandatory when type implements <see cref="T:Hybridizer.Runtime.CUDAImports.ICustomMarshalled" />
            </remarks>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.ICustomMarshalledSize.Size">
            <summary>
            size
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.ICustomMarshalledSize.#ctor">
            <summary>
            default constructor
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.ICustomMarshalledSize.#ctor(System.Int32)">
            <summary>
            full constructor
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.IResidentData">
            <summary>
            Resident data interface
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.IResidentData.Size">
            <summary>
            Total size in bytes
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.ResidentArrayStatus">
            <summary>
            Memory status of resident array
            <see cref="T:Hybridizer.Runtime.CUDAImports.IResidentArray"/>
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.ResidentArrayStatus.NoAction">
            <summary>
            device and host are up-to-date
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.ResidentArrayStatus.DeviceNeedsRefresh">
            <summary>
            Host memory has changed and not propagated to device
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.ResidentArrayStatus.HostNeedsRefresh">
            <summary>
            device memory has changed and not propagated to host
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.ResidentArrayHostAttribute">
            <summary>
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.OptixShaderAttribute">
            <summary>
            Kernel is an optix shader - special treatment required
            <see href="https://docs.nvidia.com/gameworks/content/gameworkslibrary/optix/optix_v4_0.htm"/>
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.OptixShaderAttribute.#ctor">
            <summary>
            default constructor
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.OptixShaderAttribute.#ctor(System.String)">
            <summary>
            full constructor
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.HybridizerNativeFieldProxyAttribute">
            <summary>
            Use to wrap a constant array
            <example>
            public static int[] aa = { 1, 2 };
            [HybridizerNativeFieldProxy("aa")]
            public static int* a;
            </example>
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.HybridizerNativeFieldProxyAttribute.UnderlyingArrayName">
            <summary>
            name of underlying array
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.HybridizerNativeFieldProxyAttribute.#ctor">
            <summary>
            default constructor
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.HybridizerNativeFieldProxyAttribute.#ctor(System.String)">
            <summary>
            full constructor
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.BuiltinMethodAttribute">
            <summary>
            LLVM as input only
            With this attribute, no code will be generated
            Provided .Net method will be used instead in generated assembly
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.BuiltinMethodAttribute.NativeName">
            <summary>
            native method name
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.BuiltinMethodAttribute.#ctor">
            <summary>
            default constructor
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.BuiltinMethodAttribute.#ctor(System.String)">
            <summary>
            full constructor
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.ConstAttribute">
            <summary>
            LLVM as input only
            Mark a parameter as const
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.NativeImportSymbolAttribute">
            <summary>
            LLVM as input only
            Native symbol shoud use provided .Net method
            </summary>
            <example>
            <code>
            [IntrinsicFunction(IsNaked=true, Name="__threadfence_block"), NativeImportSymbol("__threadfence_block")]
            public static void __threadfence_block()
            {
            }
            </code>
            </example>
            <seealso cref="T:Hybridizer.Runtime.CUDAImports.IntrinsicIncludeAttribute"/>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.NativeImportSymbolAttribute.Symbol">
            <summary>
            native symbol
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.NativeImportSymbolAttribute.IsOverride">
            <summary>
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.NativeImportSymbolAttribute.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.NativeImportSymbolAttribute.#ctor(System.String)">
            <summary>
            constructor
            </summary>
            <param name="symbol"></param>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.NativeImportSymbolAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            full constructor
            </summary>
            <param name="symbol"></param>
            <param name="isOverride"></param>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.HybridVectorizerAttribute">
            <summary>
             force vectorization of method parameter
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.IntrinsicIncludeOMPAttribute">
            <summary>
            intrinsic include -- OMP specific
            <seealso cref="T:Hybridizer.Runtime.CUDAImports.IntrinsicIncludeAttribute"/>
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.IntrinsicIncludePhiAttribute">
            <summary>
            intrinsic include -- AVX specific
            <seealso cref="T:Hybridizer.Runtime.CUDAImports.IntrinsicIncludeAttribute"/>
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.VectorizerMask">
            <summary>
            INTERNAL TYPE
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.VectorizerIntrinsicReturn">
            <summary>
            vectorization hint for return type
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.VectorizerIntrinsicReturn.Unknown">
            <summary>
            unknown
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.VectorizerIntrinsicReturn.Transitive">
            <summary>
            return type is same as argument
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.VectorizerIntrinsicReturn.VectorTransitive">
            <summary>
            return type has same vectorization pattern as argument (float -> int becomes float&lt;&gt; -&gt; int&lt;&gt;)
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.VectorizerIntrinsicReturn.Unchanged">
            <summary>
            return type is unchanged whatsoever (reducers for example)
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.VectorizerIntrinsicReturn.Vectorized">
            <summary>
            return type is always vectorized
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.ReturnTypeInferrenceAttribute">
            <summary>
            obsolete
            <see cref="T:Hybridizer.Runtime.CUDAImports.ReturnTypeInferenceAttribute"/>
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.ReturnTypeInferenceAttribute">
            <summary>
            hint for return type vectorization
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.ReturnTypeInferenceAttribute.Index">
            <summary>
            internal
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.ReturnTypeInferenceAttribute.Return">
            <summary>
            vectorization type
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.ReturnTypeInferenceAttribute.#ctor">
            <summary>
            default constructor
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.ReturnTypeInferenceAttribute.#ctor(Hybridizer.Runtime.CUDAImports.VectorizerIntrinsicReturn)">
            <summary>
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.ReturnTypeInferenceAttribute.#ctor(Hybridizer.Runtime.CUDAImports.VectorizerIntrinsicReturn,System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.ReturnTypeInferenceAttribute.#ctor(System.Int32,System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.HybridNakedFunctionAttribute">
            <summary>
            Naked function : no memory operation
            Allows optimizations
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.HybridArithmeticFunctionAttribute">
            <summary>
            Arithmetic function : no memory operations and no branches
            Allows aggressive optimizations
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.HybridHybOpFunctionAttribute">
            <summary>
            internal
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.SerialVectorizeAttribute">
            <summary>
            Fallback when vectorization fails
            Method signature is vectorized, but implementation is serial
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.DontVectorizeAttribute">
            <summary>
            dot no vectorize
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.StackAllocBehaviorEnum">
            <summary>
            Stack allocation behavior
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.StackAllocBehaviorEnum.PerLane">
            <summary>
            each vector lane has an instance of the stack allocation 
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.StackAllocBehaviorEnum.BlockShared">
            <summary>
            stack allocation is share amongst lanes
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.StackAllocBehaviorEnum.Default">
            <summary>
            if not specified
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.StackAllocBehaviorAttribute">
            <summary>
            specifies stack allocation behavior
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.StackAllocBehaviorAttribute.Behavior">
            <summary>
            behavior
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.StackAllocBehaviorAttribute.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.HybridLambdaIdentifierAttribute">
            <summary>
            HVL only
            Lambdas must have a unique identifier to be used in HVL
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.HybridLambdaIdentifierAttribute.guid">
            <summary>
            identifier
            </summary>
            <seealso cref="T:System.Guid"/>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.HybridLambdaIdentifierAttribute.#ctor">
            <summary>
            default constructor
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.HybridLambdaIdentifierAttribute.#ctor(System.String)">
            <summary>
            full constructor
            </summary>
            <param name="gid">must be a valid GUID</param>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.LinuxKernelInteropTools.ExecuteBashCommand(System.String)">
            <summary>
            executes a bash command
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.KernelInteropTools.IsLinux">
            <summary>
            return true if environment is linux. 
            </summary>
            <see href="http://www.mono-project.com/docs/faq/technical/#how-to-detect-the-execution-platform"></see>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.HybridizerFlavor">
            <summary>
            Supported flavors
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.HybridizerFlavor.CUDA">
            <summary>
            Targets NVIDIA GPUS
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.HybridizerFlavor.OMP">
            <summary>
            Simple C++ generation (no vectorization)
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.HybridizerFlavor.AVX">
            <summary>
            AVX and AVX2 C++ code generation
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.HybridizerFlavor.KEPLER">
            <summary>
            Vectorized CUDA leveraging ILP for kepler architectures (deprecated)
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.HybridizerFlavor.PHI">
            <summary>
            Vectorized C++ targeting MIC instruction set (KNC) (deprecated)
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.HybridizerFlavor.JAVA">
            <summary>
            
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.HybridizerFlavor.VSX">
            <summary>
            Vectorized C++ targeting VSX instruction set (Power)
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.HybridizerFlavor.OPENCL">
            <summary>
            OpenCL target
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.HybridizerFlavor.PTX">
            <summary>
            
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.HybridizerFlavor.HYBOP">
            <summary>
            
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.HybridizerFlavor.AVX512">
            <summary>
            Vectorized C++ targeting AVX512 instruction set (KNL, skylake avx512...)
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.HybridizerFlavor.JAVA_BYTECODE">
            <summary>
            
            </summary>
        </member>
        <member name="F:Hybridizer.Runtime.CUDAImports.HybridizerFlavor.HIP">
            <summary>
            Targets AMD GPUS
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.HybridizerProperties">
            <summary>
            Hybridizer properties at runtime
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.HybridizerProperties.UseHybridArrays">
            <summary>
            Use HybridArrays or C-style arrays (pointer to first element)
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.HybridizerProperties.Flavor">
            <summary>
            Target Flavor
            <see cref="T:Hybridizer.Runtime.CUDAImports.HybridizerFlavor"/>
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.HybridizerProperties.CompatibilityMode">
            <summary>
            internal
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.HybridizerProperties.DelegateSupport">
            <summary>
            internal
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.HybRunner">
            <summary>
            This class allows to call hybridized methods without explicitly declaring native methods
            Usage: int res = HybRunner.Cuda(target).Distrib(gridDimX, blockDimX).methodName(args);
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.HybRunner.CheckExceptions">
            <summary>
            Check exceptions
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.HybRunner.BlockDimX">
            <summary>
            block dimension X
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.HybRunner.BlockDimY">
            <summary>
            block dimension Y
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.HybRunner.BlockDimZ">
            <summary>
            block dimension Z
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.HybRunner.GridDimX">
            <summary>
            grid dimension X
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.HybRunner.GridDimY">
            <summary>
            grid dimension Y
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.HybRunner.Shared">
            <summary>
            Amount of shared memory
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.HybRunner.Stream">
            <summary>
            Stream identifier
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.HybRunner.UseStream">
            <summary>
            Is using non-default stream?
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.HybRunner.GetCudaVersion">
            <summary>
            Gets CUDA version from app.config
            </summary>
            <returns></returns>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.HybRunner.Marshaller">
            <summary>
            Marshaller attached
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.HybRunner.LastKernelDuration">
            <summary>
            Last kernel duration (from launch to synchronize)
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.HybRunner.Cuda(System.Object,System.String)">
            <summary>
            Allows to call CUDA implementations of an object's entrypoints
            </summary>
            <param name="o">Object to be wrapped</param>
            <param name="dllName">name of the DLL containing the native method</param>
            <returns>A dynamic proxy to the object</returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.HybRunner.Cuda(System.String)">
            <summary>
            Wraps a dll into an HybRunner using CUDA, allowing to further set the work distribution parameter (see SetDistrib)
            </summary>
            <param name="dllName"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.HybRunner.Cuda(System.String,Hybridizer.Runtime.CUDAImports.cudaStream_t,Hybridizer.Runtime.CUDAImports.CudaMarshaler)">
            <summary>
            Wraps a dll into an HybRunner using CUDA flavor
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.HybRunner.OMP(System.Object,System.String)">
            <summary>
            Allows to call OMP implementations of an object's entrypoints
            </summary>
            <param name="o">Object to be wrapped</param>
            <param name="dllName">name of the DLL containing the native method</param>
            <returns>A dynamic proxy to the object</returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.HybRunner.OMP(System.String)">
            <summary>
            Wraps a dll into an HybRunner using OMP flavor
            </summary>
            <param name="dllName"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.HybRunner.AVX(System.Object,System.String)">
            <summary>
            Allows to call AVX implementations of an object's entrypoints
            </summary>
            <param name="o">Object to be wrapped</param>
            <param name="dllName">name of the DLL containing the native method</param>
            <returns>A dynamic proxy to the object</returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.HybRunner.AVX(System.String)">
            <summary>
            Wraps a dll into an HybRunner using AVX flavor
            </summary>
            <param name="dllName"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.HybRunner.AVX512(System.Object,System.String)">
            <summary>
            Wraps a dll into an HybRunner using AVX512 flavor
            </summary>
            <param name="o"></param>
            <param name="dllName"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.HybRunner.AVX512(System.String)">
            <summary>
            Wraps a dll into an HybRunner using AVX512 flavor
            </summary>
            <param name="dllName"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.HybRunner.Env">
            <summary>
            Instanciates a HybRunner with a flavor from an environment variable (%HYBRIDIZER_FLAVOR%) [CUDA if not present]
            possible values for %HYBRIDIZER_FLAVOR% : [CUDA, AVX, AVX2, AVX512, AUTOCPU]
            </summary>
            <returns>HybRunner instance</returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.HybRunner.AutoCPU">
            <summary>
            Automatically detects processor features (flags) to load the appropriate satellite dll
            satellite dlls must have a name ending with the flavor (AVX/AVX2/AVX512)
            LINUX ONLY
            </summary>
            <param name="dllName"></param>
            <returns>The appropriate HybRunner</returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.HybRunner.Wrap(System.Object)">
            <summary>
            Wraps an object using the current flavor
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.HybRunner.SetDistrib(System.Int32,System.Int32)">
            <summary>
            Set cuda work distribution parameters
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.HybRunner.SetDistrib(Hybridizer.Runtime.CUDAImports.dim3,Hybridizer.Runtime.CUDAImports.dim3)">
            <summary>
            Set cuda work distribution parameters
            </summary>
            <param name="grid">NOTE: grid.z is ignored !</param>
            <param name="block"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.HybRunner.SetDistrib(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Configures a launch (CUDA-only)
            </summary>
            <param name="gridDimX"></param>
            <param name="gridDimY"></param>
            <param name="blockDimX"></param>
            <param name="blockDimY"></param>
            <param name="blockDimZ"></param>
            <param name="shared"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.HybRunner.SetShared(System.Int32)">
            <summary>
            Sets the shared memory size parameter for a launch (CUDA-only)
            </summary>
            <param name="shared"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.HybRunner.saveAssembly(System.String)">
            <summary>
            INTERNAL METHOD - For debugging only
            </summary>
            <param name="name">name : example.dll</param>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.JavaRuntime">
            <summary>
            helper functions
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.JavaRuntime.Dcmpl(System.Double,System.Double)">
            <summary>
            compares two double precision real number
            </summary>
            <returns>-1 if d2 > d1, 1 if d1 > d2, 0 otherwise</returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.JavaRuntime.Fcmpl(System.Single,System.Single)">
            <summary>
            compares two float 32 precision real number
            </summary>
            <returns>-1 if d2 > d1, 1 if d1 > d2, 0 otherwise</returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.NativeArrayIndexer`1.#ctor(System.IntPtr,System.IntPtr)">
            <summary>
            
            </summary>
            <param name="ptr"></param>
            <param name="index">in bytes</param>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.DoubleResidentArray">
            <summary>
            A resident array of double precision real number
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.DoubleResidentArray.#ctor(System.Int64,System.Object)">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.DoubleResidentArray.Item(System.Int32)">
            <summary>
            indexer
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.DoubleResidentArray.GetResidentArray(System.Double*,System.Int32)">
            <summary>
            
            </summary>
            <param name="tab"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.DoubleResidentArray.SetResidentArray(System.Double*,System.Int32,System.Double)">
            <summary>
            
            </summary>
            <param name="tab"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.DoubleResidentArray.CheckRefreshHost">
            <summary>
            
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.DoubleResidentArray.Status">
            <summary>
            Memory Status
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.DoubleResidentArray.DevicePointer">
            <summary>
            Device Pointer
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.DoubleResidentArray.HostPointer">
            <summary>
            Host Pointer
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.DoubleResidentArray.Size">
            <summary>
            Size
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.DoubleResidentArray.RefreshHost">
            <summary>
            moves memory from device to host
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.DoubleResidentArray.RefreshDevice">
            <summary>
            moves memory from host to device
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.DoubleResidentArray.Count">
            <summary>
             Count
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.IntResidentArray">
            <summary>
            A resident array of int32 elements
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.IntResidentArray.#ctor(System.Int64)">
            <summary>
            
            </summary>
            <param name="count"></param>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.IntResidentArray.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.IntResidentArray.GetResidentArray(System.Int32*,System.Int32)">
            <summary>
            
            </summary>
            <param name="tab"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.IntResidentArray.SetResidentArray(System.Int32*,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="tab"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.IntResidentArray.CheckRefreshHost">
            <summary>
            
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.IntResidentArray.Status">
            <summary>
            memory status
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.IntResidentArray.DevicePointer">
            <summary>
            device pointer
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.IntResidentArray.HostPointer">
            <summary>
            host pointer
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.IntResidentArray.Size">
            <summary>
            Size
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.IntResidentArray.RefreshHost">
            <summary>
            moves memory from device to host
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.IntResidentArray.RefreshDevice">
            <summary>
            moves memory from host to device
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.IntResidentArray.Count">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.IntResidentArray.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.IntResidentArray.Finalize">
            <summary>
            
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.FloatResidentArray">
            <summary>
            A resident Array of float 32 elements
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.FloatResidentArray.#ctor(System.Int64)">
            <summary>
            
            </summary>
            <param name="count"></param>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.FloatResidentArray.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.FloatResidentArray.GetResidentArray(System.Single*,System.Int32)">
            <summary>
            
            </summary>
            <param name="tab"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.FloatResidentArray.SetResidentArray(System.Single*,System.Int32,System.Single)">
            <summary>
            
            </summary>
            <param name="tab"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.FloatResidentArray.CheckRefreshHost">
            <summary>
            
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.FloatResidentArray.Status">
            <summary>
            Memory status
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.FloatResidentArray.DevicePointer">
            <summary>
            Device Pointer
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.FloatResidentArray.HostPointer">
            <summary>
            Host Pointer
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.FloatResidentArray.Size">
            <summary>
            Size
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.FloatResidentArray.RefreshHost">
            <summary>
            Moves memory from Device to Host
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.FloatResidentArray.RefreshDevice">
            <summary>
            Moves memory from Host to Device
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.FloatResidentArray.Count">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.FloatResidentArray.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.FloatResidentArray.Finalize">
            <summary>
            
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.ResidentArrayGeneric`1.#ctor(System.Int64)">
            <summary>
            
            </summary>
            <param name="count"></param>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.ResidentArrayGeneric`1.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.ResidentArrayGeneric`1.Import(`0[])">
            <summary>
            assuming memory is already allocated by a call to constructor
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.ResidentArrayGeneric`1.GetResidentArray(System.IntPtr,System.Int32)">
            <summary>
            
            </summary>
            <param name="tab"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.ResidentArrayGeneric`1.SetResidentArray(System.IntPtr,System.Int32,`0)">
            <summary>
            
            </summary>
            <param name="tab"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.ResidentArrayGeneric`1.CheckRefreshHost">
            <summary>
            
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.ResidentArrayGeneric`1.Status">
            <summary>
            memory status
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.ResidentArrayGeneric`1.DevicePointer">
            <summary>
            device pointer
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.ResidentArrayGeneric`1.HostPointer">
            <summary>
            host pointer
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.ResidentArrayGeneric`1.Size">
            <summary>
            Size
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.ResidentArrayGeneric`1.RefreshHost">
            <summary>
            moves memory from device to host
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.ResidentArrayGeneric`1.RefreshDevice">
            <summary>
            moves memory from host to device
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.ResidentArrayGeneric`1.Count">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.ResidentArrayGeneric`1.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.ResidentArrayGeneric`1.Finalize">
            <summary>
            
            </summary>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.SharedMemoryAllocator`1">
            <summary>
            structure to allocate shared memory in device code
            </summary>
            <example>
            <code>
            float[] a = new SharedMemoryAllocator&lt;float&gt;.allocate(32)
            </code>
            </example>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.SharedMemoryAllocator`1.allocate(System.Int32)">
            <summary>
            Performs the allocation
            </summary>
            <param name="count">number of elements in the result array</param>
            <returns></returns>
        </member>
        <member name="T:Hybridizer.Runtime.CUDAImports.StackArray`1">
            <summary>
            An array on stack
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Hybridizer.Runtime.CUDAImports.StackArray`1.#ctor(System.Int32)">
            <summary>
            constructor
            </summary>
            <param name="count">elements count</param>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.StackArray`1.data">
            <summary>
            get the underlying array -- allowing operations on it
            </summary>
        </member>
        <member name="P:Hybridizer.Runtime.CUDAImports.StackArray`1.Item(System.Int32)">
            <summary>
            get or set value in the array
            </summary>
        </member>
        <member name="T:Altimesh.Hybridizer.Runtime.NamingTools">
            <summary>
            
            </summary>
        </member>
        <member name="M:Altimesh.Hybridizer.Runtime.NamingTools.GetHeapArrayAllocationName">
            <summary>
            internal
            </summary>
            <returns></returns>
        </member>
        <member name="M:Altimesh.Hybridizer.Runtime.NamingTools.CSharpTypeName(System.Type,System.Boolean@)">
            <summary>
            mangling of typename
            </summary>
            <param name="t"></param>
            <param name="nonamespace"></param>
            <returns></returns>
        </member>
        <member name="M:Altimesh.Hybridizer.Runtime.NamingTools.QualifiedTypeName(System.Type,System.Boolean)">
            <summary>
            mangling of typename
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Altimesh.Hybridizer.Runtime.NamingTools.SplitTypeList(System.String)">
            <summary>
            list is a type list expressed as coma separated list of types - NOTE: types may contain comas !
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Altimesh.Hybridizer.Runtime.NamingTools.QualifiedType(System.String,System.Type,System.Reflection.Assembly)">
            <summary>
            type from mangled typename
            </summary>
            <returns></returns>
        </member>
        <member name="M:Altimesh.Hybridizer.Runtime.NamingTools.Mangle(System.Char)">
            <summary>
            mangling of char
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Altimesh.Hybridizer.Runtime.NamingTools.GetFullTypeName(System.Type)">
            <summary>
            mangling of typename
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Altimesh.Hybridizer.Runtime.NamingTools.GetFullMethodName(System.Reflection.MethodBase)">
            <summary>
            mangling of method name
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Altimesh.Hybridizer.Runtime.NamingTools.Mangle(System.Reflection.MethodBase)">
            <summary>
            mangling of method name
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Altimesh.Hybridizer.Runtime.NamingTools.RawMangle(System.String)">
            <summary>
            mangling of method name
            </summary>
            <param name="cmethodname"></param>
            <returns></returns>
        </member>
        <member name="M:Altimesh.Hybridizer.Runtime.NamingTools.EncodeParameterTypes(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Short encoding of parameter types -- for mangling
            </summary>
            <param name="types"></param>
            <returns></returns>
        </member>
        <member name="M:Altimesh.Hybridizer.Runtime.NamingTools.GetEncodedSignature(System.Reflection.MethodBase)">
            <summary>
            manging of method signature
            </summary>
            <param name="Original"></param>
            <returns></returns>
        </member>
        <member name="M:Altimesh.Hybridizer.Runtime.CMethodMangler.EncodeParameterTypes(System.Type[],Altimesh.Hybridizer.Runtime.ITypeIdProvider)">
            <summary>
            Short encoding of parameter types -- for mangling
            </summary>
            <param name="types"></param>
            <param name="typeIdProvider"></param>
            <returns></returns>
        </member>
    </members>
</doc>
